// // Copyright 2022 Mindbox Ltd
// //
// // Licensed under the Apache License, Version 2.0 (the "License");
// // you may not use this file except in compliance with the License.
// // You may obtain a copy of the License at
// //
// //     http://www.apache.org/licenses/LICENSE-2.0
// //
// // Unless required by applicable law or agreed to in writing, software
// // distributed under the License is distributed on an "AS IS" BASIS,
// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// // See the License for the specific language governing permissions and
// // limitations under the License.

//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419
#pragma warning disable 0108

namespace Mindbox.Quokka.Generated
{
	using System;
	using System.IO;
	using System.Text;

	using Antlr4.Runtime;
	using Antlr4.Runtime.Atn;
	using Antlr4.Runtime.Misc;

	using DFA = Antlr4.Runtime.Dfa.DFA;

	[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
	[System.CLSCompliant(false)]
	internal partial class QuokkaLex : Lexer
	{
		protected static DFA[] decisionToDFA;

		protected static PredictionContextCache sharedContextCache = new PredictionContextCache();

		public const int
			SingleInstructionComment = 1,
			OutputInstructionStart = 2,
			ControlInstructionStart = 3,
			Fluff = 4,
			InstructionEnd = 5,
			If = 6,
			EndIf = 7,
			End = 8,
			Else = 9,
			ElseIf = 10,
			For = 11,
			In = 12,
			EndFor = 13,
			Null = 14,
			MemberAccessOperator = 15,
			Pipe = 16,
			CommaSeparator = 17,
			LeftParen = 18,
			RightParen = 19,
			And = 20,
			Or = 21,
			Not = 22,
			Set = 23,
			Equals = 24,
			NotEquals = 25,
			GreaterThan = 26,
			LessThan = 27,
			GreaterThanOrEquals = 28,
			LessThanOrEquals = 29,
			Plus = 30,
			Minus = 31,
			Multiply = 32,
			Divide = 33,
			Number = 34,
			Digit = 35,
			DoubleQuotedString = 36,
			SingleQuotedString = 37,
			Ampersand = 38,
			Identifier = 39,
			WhiteSpace = 40;

		public const int
			Instruction = 1;

		public static string[] channelNames =
		{
			"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
		};

		public static string[] modeNames =
		{
			"DEFAULT_MODE", "Instruction"
		};

		public static readonly string[] ruleNames =
		{
			"SingleInstructionComment", "OutputInstructionStart", "ControlInstructionStart",
			"Fluff", "InstructionEnd", "If", "EndIf", "End", "Else", "ElseIf", "For",
			"In", "EndFor", "Null", "MemberAccessOperator", "Pipe", "CommaSeparator",
			"LeftParen", "RightParen", "And", "Or", "Not", "Set", "Equals", "NotEquals",
			"GreaterThan", "LessThan", "GreaterThanOrEquals", "LessThanOrEquals",
			"Plus", "Minus", "Multiply", "Divide", "Number", "Digit", "DoubleQuotedString",
			"SingleQuotedString", "Ampersand", "Identifier", "WhiteSpace"
		};


		public QuokkaLex(ICharStream input)
			: this(input, Console.Out, Console.Error)
		{
		}

		public QuokkaLex(ICharStream input, TextWriter output, TextWriter errorOutput)
			: base(input, output, errorOutput)
		{
			Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
		}

		private static readonly string[] _LiteralNames =
		{
			null, null, "'${'", "'@{'", null, "'}'", null, null, null, null, null,
			null, null, null, null, "'.'", "'|'", "','", "'('", "')'", null, null,
			null, null, "'='", "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", "'-'",
			"'*'", "'/'", null, null, null, null, "'&'"
		};

		private static readonly string[] _SymbolicNames =
		{
			null, "SingleInstructionComment", "OutputInstructionStart", "ControlInstructionStart",
			"Fluff", "InstructionEnd", "If", "EndIf", "End", "Else", "ElseIf", "For",
			"In", "EndFor", "Null", "MemberAccessOperator", "Pipe", "CommaSeparator",
			"LeftParen", "RightParen", "And", "Or", "Not", "Set", "Equals", "NotEquals",
			"GreaterThan", "LessThan", "GreaterThanOrEquals", "LessThanOrEquals",
			"Plus", "Minus", "Multiply", "Divide", "Number", "Digit", "DoubleQuotedString",
			"SingleQuotedString", "Ampersand", "Identifier", "WhiteSpace"
		};

		public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

		[NotNull]
		public override IVocabulary Vocabulary
		{
			get { return DefaultVocabulary; }
		}

		public override string GrammarFileName
		{
			get { return "QuokkaLex.g4"; }
		}

		public override string[] RuleNames
		{
			get { return ruleNames; }
		}

		public override string[] ChannelNames
		{
			get { return channelNames; }
		}

		public override string[] ModeNames
		{
			get { return modeNames; }
		}

		public override int[] SerializedAtn
		{
			get { return _serializedATN; }
		}

		static QuokkaLex()
		{
			decisionToDFA = new DFA[_ATN.NumberOfDecisions];
			for (int i = 0; i < _ATN.NumberOfDecisions; i++)
			{
				decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
			}
		}

		private static int[] _serializedATN =
		{
			4, 0, 40, 259, 6, -1, 6, -1, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2,
			6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13,
			2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20,
			2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27,
			2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7, 31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34,
			2, 35, 7, 35, 2, 36, 7, 36, 2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0,
			5, 0, 88, 8, 0, 10, 0, 12, 0, 91, 9, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1,
			2, 1, 2, 1, 2, 1, 3, 4, 3, 107, 8, 3, 11, 3, 12, 3, 108, 1, 3, 3, 3, 112, 8, 3, 1, 4, 1, 4, 1, 4, 1,
			4, 1, 5, 1, 5, 1, 5, 1, 6, 1, 6, 4, 6, 123, 8, 6, 11, 6, 12, 6, 124, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 1,
			7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 9, 1, 9, 4, 9, 140, 8, 9, 11, 9, 12, 9, 141, 1, 9, 1, 9, 1, 10, 1,
			10, 1, 10, 1, 10, 1, 11, 1, 11, 1, 11, 1, 12, 1, 12, 4, 12, 155, 8, 12, 11, 12, 12, 12, 156, 1,
			12, 1, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 15, 1, 15, 1, 16, 1, 16, 1, 17, 1,
			17, 1, 18, 1, 18, 1, 19, 1, 19, 1, 19, 1, 19, 1, 20, 1, 20, 1, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1,
			22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 26, 1, 26, 1, 27, 1,
			27, 1, 27, 1, 28, 1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 31, 1, 31, 1, 32, 1, 32, 1, 33, 4,
			33, 215, 8, 33, 11, 33, 12, 33, 216, 1, 33, 1, 33, 4, 33, 221, 8, 33, 11, 33, 12, 33, 222, 3,
			33, 225, 8, 33, 1, 34, 1, 34, 1, 35, 1, 35, 5, 35, 231, 8, 35, 10, 35, 12, 35, 234, 9, 35, 1, 35,
			1, 35, 1, 36, 1, 36, 5, 36, 240, 8, 36, 10, 36, 12, 36, 243, 9, 36, 1, 36, 1, 36, 1, 37, 1, 37,
			1, 38, 1, 38, 5, 38, 251, 8, 38, 10, 38, 12, 38, 254, 9, 38, 1, 39, 1, 39, 1, 39, 1, 39, 0, 0, 40,
			2, 1, 4, 2, 6, 3, 8, 4, 10, 5, 12, 6, 14, 7, 16, 8, 18, 9, 20, 10, 22, 11, 24, 12, 26, 13, 28, 14,
			30, 15, 32, 16, 34, 17, 36, 18, 38, 19, 40, 20, 42, 21, 44, 22, 46, 23, 48, 24, 50, 25, 52, 26,
			54, 27, 56, 28, 58, 29, 60, 30, 62, 31, 64, 32, 66, 33, 68, 34, 70, 35, 72, 36, 74, 37, 76, 38,
			78, 39, 80, 40, 2, 0, 1, 19, 1, 0, 125, 125, 2, 0, 36, 36, 64, 64, 2, 0, 73, 73, 105, 105, 2, 0,
			70, 70, 102, 102, 2, 0, 69, 69, 101, 101, 2, 0, 78, 78, 110, 110, 2, 0, 68, 68, 100, 100, 2,
			0, 76, 76, 108, 108, 2, 0, 83, 83, 115, 115, 2, 0, 79, 79, 111, 111, 2, 0, 82, 82, 114, 114,
			2, 0, 85, 85, 117, 117, 2, 0, 65, 65, 97, 97, 2, 0, 84, 84, 116, 116, 1, 0, 34, 34, 1, 0, 39, 39,
			3, 0, 65, 90, 95, 95, 97, 122, 4, 0, 48, 57, 65, 90, 95, 95, 97, 122, 3, 0, 9, 10, 13, 13, 32,
			32, 269, 0, 2, 1, 0, 0, 0, 0, 4, 1, 0, 0, 0, 0, 6, 1, 0, 0, 0, 0, 8, 1, 0, 0, 0, 1, 10, 1, 0, 0, 0, 1,
			12, 1, 0, 0, 0, 1, 14, 1, 0, 0, 0, 1, 16, 1, 0, 0, 0, 1, 18, 1, 0, 0, 0, 1, 20, 1, 0, 0, 0, 1, 22, 1,
			0, 0, 0, 1, 24, 1, 0, 0, 0, 1, 26, 1, 0, 0, 0, 1, 28, 1, 0, 0, 0, 1, 30, 1, 0, 0, 0, 1, 32, 1, 0, 0, 0,
			1, 34, 1, 0, 0, 0, 1, 36, 1, 0, 0, 0, 1, 38, 1, 0, 0, 0, 1, 40, 1, 0, 0, 0, 1, 42, 1, 0, 0, 0, 1, 44,
			1, 0, 0, 0, 1, 46, 1, 0, 0, 0, 1, 48, 1, 0, 0, 0, 1, 50, 1, 0, 0, 0, 1, 52, 1, 0, 0, 0, 1, 54, 1, 0, 0,
			0, 1, 56, 1, 0, 0, 0, 1, 58, 1, 0, 0, 0, 1, 60, 1, 0, 0, 0, 1, 62, 1, 0, 0, 0, 1, 64, 1, 0, 0, 0, 1, 66,
			1, 0, 0, 0, 1, 68, 1, 0, 0, 0, 1, 70, 1, 0, 0, 0, 1, 72, 1, 0, 0, 0, 1, 74, 1, 0, 0, 0, 1, 76, 1, 0, 0,
			0, 1, 78, 1, 0, 0, 0, 1, 80, 1, 0, 0, 0, 2, 82, 1, 0, 0, 0, 4, 95, 1, 0, 0, 0, 6, 100, 1, 0, 0, 0, 8,
			111, 1, 0, 0, 0, 10, 113, 1, 0, 0, 0, 12, 117, 1, 0, 0, 0, 14, 120, 1, 0, 0, 0, 16, 128, 1, 0, 0,
			0, 18, 132, 1, 0, 0, 0, 20, 137, 1, 0, 0, 0, 22, 145, 1, 0, 0, 0, 24, 149, 1, 0, 0, 0, 26, 152, 1,
			0, 0, 0, 28, 160, 1, 0, 0, 0, 30, 165, 1, 0, 0, 0, 32, 167, 1, 0, 0, 0, 34, 169, 1, 0, 0, 0, 36, 171,
			1, 0, 0, 0, 38, 173, 1, 0, 0, 0, 40, 175, 1, 0, 0, 0, 42, 179, 1, 0, 0, 0, 44, 182, 1, 0, 0, 0, 46,
			186, 1, 0, 0, 0, 48, 190, 1, 0, 0, 0, 50, 192, 1, 0, 0, 0, 52, 195, 1, 0, 0, 0, 54, 197, 1, 0, 0,
			0, 56, 199, 1, 0, 0, 0, 58, 202, 1, 0, 0, 0, 60, 205, 1, 0, 0, 0, 62, 207, 1, 0, 0, 0, 64, 209, 1,
			0, 0, 0, 66, 211, 1, 0, 0, 0, 68, 214, 1, 0, 0, 0, 70, 226, 1, 0, 0, 0, 72, 228, 1, 0, 0, 0, 74, 237,
			1, 0, 0, 0, 76, 246, 1, 0, 0, 0, 78, 248, 1, 0, 0, 0, 80, 255, 1, 0, 0, 0, 82, 83, 5, 64, 0, 0, 83,
			84, 5, 123, 0, 0, 84, 85, 5, 42, 0, 0, 85, 89, 1, 0, 0, 0, 86, 88, 8, 0, 0, 0, 87, 86, 1, 0, 0, 0,
			88, 91, 1, 0, 0, 0, 89, 87, 1, 0, 0, 0, 89, 90, 1, 0, 0, 0, 90, 92, 1, 0, 0, 0, 91, 89, 1, 0, 0, 0,
			92, 93, 5, 42, 0, 0, 93, 94, 5, 125, 0, 0, 94, 3, 1, 0, 0, 0, 95, 96, 5, 36, 0, 0, 96, 97, 5, 123,
			0, 0, 97, 98, 1, 0, 0, 0, 98, 99, 6, 1, 0, 0, 99, 5, 1, 0, 0, 0, 100, 101, 5, 64, 0, 0, 101, 102,
			5, 123, 0, 0, 102, 103, 1, 0, 0, 0, 103, 104, 6, 2, 0, 0, 104, 7, 1, 0, 0, 0, 105, 107, 8, 1, 0,
			0, 106, 105, 1, 0, 0, 0, 107, 108, 1, 0, 0, 0, 108, 106, 1, 0, 0, 0, 108, 109, 1, 0, 0, 0, 109,
			112, 1, 0, 0, 0, 110, 112, 7, 1, 0, 0, 111, 106, 1, 0, 0, 0, 111, 110, 1, 0, 0, 0, 112, 9, 1, 0,
			0, 0, 113, 114, 5, 125, 0, 0, 114, 115, 1, 0, 0, 0, 115, 116, 6, 4, 1, 0, 116, 11, 1, 0, 0, 0, 117,
			118, 7, 2, 0, 0, 118, 119, 7, 3, 0, 0, 119, 13, 1, 0, 0, 0, 120, 122, 3, 16, 7, 0, 121, 123, 3,
			80, 39, 0, 122, 121, 1, 0, 0, 0, 123, 124, 1, 0, 0, 0, 124, 122, 1, 0, 0, 0, 124, 125, 1, 0, 0,
			0, 125, 126, 1, 0, 0, 0, 126, 127, 3, 12, 5, 0, 127, 15, 1, 0, 0, 0, 128, 129, 7, 4, 0, 0, 129,
			130, 7, 5, 0, 0, 130, 131, 7, 6, 0, 0, 131, 17, 1, 0, 0, 0, 132, 133, 7, 4, 0, 0, 133, 134, 7, 7,
			0, 0, 134, 135, 7, 8, 0, 0, 135, 136, 7, 4, 0, 0, 136, 19, 1, 0, 0, 0, 137, 139, 3, 18, 8, 0, 138,
			140, 3, 80, 39, 0, 139, 138, 1, 0, 0, 0, 140, 141, 1, 0, 0, 0, 141, 139, 1, 0, 0, 0, 141, 142,
			1, 0, 0, 0, 142, 143, 1, 0, 0, 0, 143, 144, 3, 12, 5, 0, 144, 21, 1, 0, 0, 0, 145, 146, 7, 3, 0,
			0, 146, 147, 7, 9, 0, 0, 147, 148, 7, 10, 0, 0, 148, 23, 1, 0, 0, 0, 149, 150, 7, 2, 0, 0, 150,
			151, 7, 5, 0, 0, 151, 25, 1, 0, 0, 0, 152, 154, 3, 16, 7, 0, 153, 155, 3, 80, 39, 0, 154, 153,
			1, 0, 0, 0, 155, 156, 1, 0, 0, 0, 156, 154, 1, 0, 0, 0, 156, 157, 1, 0, 0, 0, 157, 158, 1, 0, 0,
			0, 158, 159, 3, 22, 10, 0, 159, 27, 1, 0, 0, 0, 160, 161, 7, 5, 0, 0, 161, 162, 7, 11, 0, 0, 162,
			163, 7, 7, 0, 0, 163, 164, 7, 7, 0, 0, 164, 29, 1, 0, 0, 0, 165, 166, 5, 46, 0, 0, 166, 31, 1, 0,
			0, 0, 167, 168, 5, 124, 0, 0, 168, 33, 1, 0, 0, 0, 169, 170, 5, 44, 0, 0, 170, 35, 1, 0, 0, 0, 171,
			172, 5, 40, 0, 0, 172, 37, 1, 0, 0, 0, 173, 174, 5, 41, 0, 0, 174, 39, 1, 0, 0, 0, 175, 176, 7,
			12, 0, 0, 176, 177, 7, 5, 0, 0, 177, 178, 7, 6, 0, 0, 178, 41, 1, 0, 0, 0, 179, 180, 7, 9, 0, 0,
			180, 181, 7, 10, 0, 0, 181, 43, 1, 0, 0, 0, 182, 183, 7, 5, 0, 0, 183, 184, 7, 9, 0, 0, 184, 185,
			7, 13, 0, 0, 185, 45, 1, 0, 0, 0, 186, 187, 7, 8, 0, 0, 187, 188, 7, 4, 0, 0, 188, 189, 7, 13, 0,
			0, 189, 47, 1, 0, 0, 0, 190, 191, 5, 61, 0, 0, 191, 49, 1, 0, 0, 0, 192, 193, 5, 33, 0, 0, 193,
			194, 5, 61, 0, 0, 194, 51, 1, 0, 0, 0, 195, 196, 5, 62, 0, 0, 196, 53, 1, 0, 0, 0, 197, 198, 5,
			60, 0, 0, 198, 55, 1, 0, 0, 0, 199, 200, 5, 62, 0, 0, 200, 201, 5, 61, 0, 0, 201, 57, 1, 0, 0, 0,
			202, 203, 5, 60, 0, 0, 203, 204, 5, 61, 0, 0, 204, 59, 1, 0, 0, 0, 205, 206, 5, 43, 0, 0, 206,
			61, 1, 0, 0, 0, 207, 208, 5, 45, 0, 0, 208, 63, 1, 0, 0, 0, 209, 210, 5, 42, 0, 0, 210, 65, 1, 0,
			0, 0, 211, 212, 5, 47, 0, 0, 212, 67, 1, 0, 0, 0, 213, 215, 3, 70, 34, 0, 214, 213, 1, 0, 0, 0,
			215, 216, 1, 0, 0, 0, 216, 214, 1, 0, 0, 0, 216, 217, 1, 0, 0, 0, 217, 224, 1, 0, 0, 0, 218, 220,
			5, 46, 0, 0, 219, 221, 3, 70, 34, 0, 220, 219, 1, 0, 0, 0, 221, 222, 1, 0, 0, 0, 222, 220, 1, 0,
			0, 0, 222, 223, 1, 0, 0, 0, 223, 225, 1, 0, 0, 0, 224, 218, 1, 0, 0, 0, 224, 225, 1, 0, 0, 0, 225,
			69, 1, 0, 0, 0, 226, 227, 2, 48, 57, 0, 227, 71, 1, 0, 0, 0, 228, 232, 5, 34, 0, 0, 229, 231, 8,
			14, 0, 0, 230, 229, 1, 0, 0, 0, 231, 234, 1, 0, 0, 0, 232, 230, 1, 0, 0, 0, 232, 233, 1, 0, 0, 0,
			233, 235, 1, 0, 0, 0, 234, 232, 1, 0, 0, 0, 235, 236, 5, 34, 0, 0, 236, 73, 1, 0, 0, 0, 237, 241,
			5, 39, 0, 0, 238, 240, 8, 15, 0, 0, 239, 238, 1, 0, 0, 0, 240, 243, 1, 0, 0, 0, 241, 239, 1, 0,
			0, 0, 241, 242, 1, 0, 0, 0, 242, 244, 1, 0, 0, 0, 243, 241, 1, 0, 0, 0, 244, 245, 5, 39, 0, 0, 245,
			75, 1, 0, 0, 0, 246, 247, 5, 38, 0, 0, 247, 77, 1, 0, 0, 0, 248, 252, 7, 16, 0, 0, 249, 251, 7,
			17, 0, 0, 250, 249, 1, 0, 0, 0, 251, 254, 1, 0, 0, 0, 252, 250, 1, 0, 0, 0, 252, 253, 1, 0, 0, 0,
			253, 79, 1, 0, 0, 0, 254, 252, 1, 0, 0, 0, 255, 256, 7, 18, 0, 0, 256, 257, 1, 0, 0, 0, 257, 258,
			6, 39, 2, 0, 258, 81, 1, 0, 0, 0, 14, 0, 1, 89, 108, 111, 124, 141, 156, 216, 222, 224, 232,
			241, 252, 3, 5, 1, 0, 4, 0, 0, 6, 0, 0
		};

		public static readonly ATN _ATN =
			new ATNDeserializer().Deserialize(_serializedATN);


	}
} // namespace Mindbox.Quokka.Generated
