// // Copyright 2022 Mindbox Ltd
// //
// // Licensed under the Apache License, Version 2.0 (the "License");
// // you may not use this file except in compliance with the License.
// // You may obtain a copy of the License at
// //
// //     http://www.apache.org/licenses/LICENSE-2.0
// //
// // Unless required by applicable law or agreed to in writing, software
// // distributed under the License is distributed on an "AS IS" BASIS,
// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// // See the License for the specific language governing permissions and
// // limitations under the License.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419
#pragma warning disable 0108

namespace Mindbox.Quokka.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
internal partial class QuokkaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		SingleInstructionComment=1, OutputInstructionStart=2, ControlInstructionStart=3, 
		Fluff=4, InstructionEnd=5, If=6, EndIf=7, End=8, Else=9, ElseIf=10, For=11, 
		In=12, EndFor=13, Null=14, MemberAccessOperator=15, Pipe=16, CommaSeparator=17, 
		LeftParen=18, RightParen=19, And=20, Or=21, Not=22, Set=23, Equals=24, 
		NotEquals=25, GreaterThan=26, LessThan=27, GreaterThanOrEquals=28, LessThanOrEquals=29, 
		Plus=30, Minus=31, Multiply=32, Divide=33, Number=34, Digit=35, DoubleQuotedString=36, 
		SingleQuotedString=37, Ampersand=38, Identifier=39, WhiteSpace=40;
	public const int
		RULE_template = 0, RULE_templateBlock = 1, RULE_staticBlock = 2, RULE_dynamicBlock = 3, 
		RULE_constantBlock = 4, RULE_commentBlock = 5, RULE_ifStatement = 6, RULE_ifCondition = 7, 
		RULE_elseCondition = 8, RULE_elseIfCondition = 9, RULE_ifInstruction = 10, 
		RULE_elseIfInstruction = 11, RULE_elseInstruction = 12, RULE_endIfInstruction = 13, 
		RULE_forStatement = 14, RULE_forInstruction = 15, RULE_iterationVariable = 16, 
		RULE_endForInstruction = 17, RULE_assignmentBlock = 18, RULE_outputBlock = 19, 
		RULE_filterChain = 20, RULE_expression = 21, RULE_variantValueExpression = 22, 
		RULE_rootVariantValueExpression = 23, RULE_variableValueExpression = 24, 
		RULE_memberValueExpression = 25, RULE_member = 26, RULE_field = 27, RULE_methodCall = 28, 
		RULE_functionCallExpression = 29, RULE_argumentList = 30, RULE_stringExpression = 31, 
		RULE_stringConstant = 32, RULE_stringConcatenation = 33, RULE_stringAtom = 34, 
		RULE_booleanExpression = 35, RULE_andExpression = 36, RULE_notExpression = 37, 
		RULE_parenthesizedBooleanExpression = 38, RULE_stringComparisonExpression = 39, 
		RULE_nullComparisonExpression = 40, RULE_arithmeticComparisonExpression = 41, 
		RULE_booleanAtom = 42, RULE_arithmeticExpression = 43, RULE_plusOperand = 44, 
		RULE_minusOperand = 45, RULE_multiplicationExpression = 46, RULE_multiplicationOperand = 47, 
		RULE_divisionOperand = 48, RULE_negationExpression = 49, RULE_parenthesizedArithmeticExpression = 50, 
		RULE_arithmeticAtom = 51;
	public static readonly string[] ruleNames = {
		"template", "templateBlock", "staticBlock", "dynamicBlock", "constantBlock", 
		"commentBlock", "ifStatement", "ifCondition", "elseCondition", "elseIfCondition", 
		"ifInstruction", "elseIfInstruction", "elseInstruction", "endIfInstruction", 
		"forStatement", "forInstruction", "iterationVariable", "endForInstruction", 
		"assignmentBlock", "outputBlock", "filterChain", "expression", "variantValueExpression", 
		"rootVariantValueExpression", "variableValueExpression", "memberValueExpression", 
		"member", "field", "methodCall", "functionCallExpression", "argumentList", 
		"stringExpression", "stringConstant", "stringConcatenation", "stringAtom", 
		"booleanExpression", "andExpression", "notExpression", "parenthesizedBooleanExpression", 
		"stringComparisonExpression", "nullComparisonExpression", "arithmeticComparisonExpression", 
		"booleanAtom", "arithmeticExpression", "plusOperand", "minusOperand", 
		"multiplicationExpression", "multiplicationOperand", "divisionOperand", 
		"negationExpression", "parenthesizedArithmeticExpression", "arithmeticAtom"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'${'", "'@{'", null, "'}'", null, null, null, null, null, 
		null, null, null, null, "'.'", "'|'", "','", "'('", "')'", null, null, 
		null, null, "'='", "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", "'-'", 
		"'*'", "'/'", null, null, null, null, "'&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleInstructionComment", "OutputInstructionStart", "ControlInstructionStart", 
		"Fluff", "InstructionEnd", "If", "EndIf", "End", "Else", "ElseIf", "For", 
		"In", "EndFor", "Null", "MemberAccessOperator", "Pipe", "CommaSeparator", 
		"LeftParen", "RightParen", "And", "Or", "Not", "Set", "Equals", "NotEquals", 
		"GreaterThan", "LessThan", "GreaterThanOrEquals", "LessThanOrEquals", 
		"Plus", "Minus", "Multiply", "Divide", "Number", "Digit", "DoubleQuotedString", 
		"SingleQuotedString", "Ampersand", "Identifier", "WhiteSpace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Quokka.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static QuokkaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QuokkaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QuokkaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TemplateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(QuokkaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 0, RULE_template);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 30L) != 0)) {
				{
				State = 104;
				templateBlock();
				}
			}

			State = 107;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StaticBlockContext[] staticBlock() {
			return GetRuleContexts<StaticBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StaticBlockContext staticBlock(int i) {
			return GetRuleContext<StaticBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DynamicBlockContext[] dynamicBlock() {
			return GetRuleContexts<DynamicBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DynamicBlockContext dynamicBlock(int i) {
			return GetRuleContext<DynamicBlockContext>(i);
		}
		public TemplateBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateBlockContext templateBlock() {
		TemplateBlockContext _localctx = new TemplateBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_templateBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 111;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 111;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OutputInstructionStart:
					case Fluff:
						{
						State = 109;
						staticBlock();
						}
						break;
					case SingleInstructionComment:
					case ControlInstructionStart:
						{
						State = 110;
						dynamicBlock();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 113;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantBlockContext[] constantBlock() {
			return GetRuleContexts<ConstantBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstantBlockContext constantBlock(int i) {
			return GetRuleContext<ConstantBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputBlockContext[] outputBlock() {
			return GetRuleContexts<OutputBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OutputBlockContext outputBlock(int i) {
			return GetRuleContext<OutputBlockContext>(i);
		}
		public StaticBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticBlockContext staticBlock() {
		StaticBlockContext _localctx = new StaticBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_staticBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 117;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case Fluff:
						{
						State = 115;
						constantBlock();
						}
						break;
					case OutputInstructionStart:
						{
						State = 116;
						outputBlock();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 119;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentBlockContext assignmentBlock() {
			return GetRuleContext<AssignmentBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommentBlockContext commentBlock() {
			return GetRuleContext<CommentBlockContext>(0);
		}
		public DynamicBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DynamicBlockContext dynamicBlock() {
		DynamicBlockContext _localctx = new DynamicBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_dynamicBlock);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				ifStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122;
				forStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 123;
				assignmentBlock();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 124;
				commentBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Fluff() { return GetTokens(QuokkaParser.Fluff); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fluff(int i) {
			return GetToken(QuokkaParser.Fluff, i);
		}
		public ConstantBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantBlockContext constantBlock() {
		ConstantBlockContext _localctx = new ConstantBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_constantBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 127;
					Match(Fluff);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 130;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SingleInstructionComment() { return GetToken(QuokkaParser.SingleInstructionComment, 0); }
		public CommentBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentBlockContext commentBlock() {
		CommentBlockContext _localctx = new CommentBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_commentBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(SingleInstructionComment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfConditionContext ifCondition() {
			return GetRuleContext<IfConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndIfInstructionContext endIfInstruction() {
			return GetRuleContext<EndIfInstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfConditionContext[] elseIfCondition() {
			return GetRuleContexts<ElseIfConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfConditionContext elseIfCondition(int i) {
			return GetRuleContext<ElseIfConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseConditionContext elseCondition() {
			return GetRuleContext<ElseConditionContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			ifCondition();
			State = 138;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 135;
					elseIfCondition();
					}
					} 
				}
				State = 140;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			State = 142;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 141;
				elseCondition();
				}
				break;
			}
			State = 144;
			endIfInstruction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfInstructionContext ifInstruction() {
			return GetRuleContext<IfInstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public IfConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionContext ifCondition() {
		IfConditionContext _localctx = new IfConditionContext(Context, State);
		EnterRule(_localctx, 14, RULE_ifCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			ifInstruction();
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				State = 147;
				templateBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElseInstructionContext elseInstruction() {
			return GetRuleContext<ElseInstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public ElseConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseConditionContext elseCondition() {
		ElseConditionContext _localctx = new ElseConditionContext(Context, State);
		EnterRule(_localctx, 16, RULE_elseCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			elseInstruction();
			State = 152;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 151;
				templateBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfInstructionContext elseIfInstruction() {
			return GetRuleContext<ElseIfInstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public ElseIfConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfConditionContext elseIfCondition() {
		ElseIfConditionContext _localctx = new ElseIfConditionContext(Context, State);
		EnterRule(_localctx, 18, RULE_elseIfCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154;
			elseIfInstruction();
			State = 156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 155;
				templateBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(QuokkaParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public IfInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfInstructionContext ifInstruction() {
		IfInstructionContext _localctx = new IfInstructionContext(Context, State);
		EnterRule(_localctx, 20, RULE_ifInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158;
			Match(ControlInstructionStart);
			State = 159;
			Match(If);
			State = 160;
			booleanExpression();
			State = 161;
			Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ElseIf() { return GetToken(QuokkaParser.ElseIf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public ElseIfInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfInstructionContext elseIfInstruction() {
		ElseIfInstructionContext _localctx = new ElseIfInstructionContext(Context, State);
		EnterRule(_localctx, 22, RULE_elseIfInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163;
			Match(ControlInstructionStart);
			State = 164;
			Match(ElseIf);
			State = 165;
			booleanExpression();
			State = 166;
			Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(QuokkaParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public ElseInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseInstructionContext elseInstruction() {
		ElseInstructionContext _localctx = new ElseInstructionContext(Context, State);
		EnterRule(_localctx, 24, RULE_elseInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(ControlInstructionStart);
			State = 169;
			Match(Else);
			State = 170;
			Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndIfInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndIf() { return GetToken(QuokkaParser.EndIf, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public EndIfInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endIfInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndIfInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndIfInstructionContext endIfInstruction() {
		EndIfInstructionContext _localctx = new EndIfInstructionContext(Context, State);
		EnterRule(_localctx, 26, RULE_endIfInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 172;
			Match(ControlInstructionStart);
			State = 173;
			Match(EndIf);
			State = 174;
			Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ForInstructionContext forInstruction() {
			return GetRuleContext<ForInstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndForInstructionContext endForInstruction() {
			return GetRuleContext<EndForInstructionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			forInstruction();
			State = 178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 177;
				templateBlock();
				}
				break;
			}
			State = 180;
			endForInstruction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(QuokkaParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IterationVariableContext iterationVariable() {
			return GetRuleContext<IterationVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode In() { return GetToken(QuokkaParser.In, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariantValueExpressionContext variantValueExpression() {
			return GetRuleContext<VariantValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public ForInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInstructionContext forInstruction() {
		ForInstructionContext _localctx = new ForInstructionContext(Context, State);
		EnterRule(_localctx, 30, RULE_forInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182;
			Match(ControlInstructionStart);
			State = 183;
			Match(For);
			State = 184;
			iterationVariable();
			State = 185;
			Match(In);
			State = 186;
			variantValueExpression();
			State = 187;
			Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(QuokkaParser.Identifier, 0); }
		public IterationVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationVariableContext iterationVariable() {
		IterationVariableContext _localctx = new IterationVariableContext(Context, State);
		EnterRule(_localctx, 32, RULE_iterationVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndForInstructionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EndFor() { return GetToken(QuokkaParser.EndFor, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public EndForInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endForInstruction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndForInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndForInstructionContext endForInstruction() {
		EndForInstructionContext _localctx = new EndForInstructionContext(Context, State);
		EnterRule(_localctx, 34, RULE_endForInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(ControlInstructionStart);
			State = 192;
			Match(EndFor);
			State = 193;
			Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Set() { return GetToken(QuokkaParser.Set, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(QuokkaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(QuokkaParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public AssignmentBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignmentBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentBlockContext assignmentBlock() {
		AssignmentBlockContext _localctx = new AssignmentBlockContext(Context, State);
		EnterRule(_localctx, 36, RULE_assignmentBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			Match(ControlInstructionStart);
			State = 196;
			Match(Set);
			State = 197;
			Match(Identifier);
			State = 198;
			Match(Equals);
			State = 199;
			expression();
			State = 200;
			Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OutputInstructionStart() { return GetToken(QuokkaParser.OutputInstructionStart, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterChainContext filterChain() {
			return GetRuleContext<FilterChainContext>(0);
		}
		public OutputBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputBlockContext outputBlock() {
		OutputBlockContext _localctx = new OutputBlockContext(Context, State);
		EnterRule(_localctx, 38, RULE_outputBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202;
			Match(OutputInstructionStart);
			State = 203;
			expression();
			State = 205;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Pipe) {
				{
				State = 204;
				filterChain();
				}
			}

			State = 207;
			Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterChainContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Pipe() { return GetTokens(QuokkaParser.Pipe); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Pipe(int i) {
			return GetToken(QuokkaParser.Pipe, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallExpressionContext[] functionCallExpression() {
			return GetRuleContexts<FunctionCallExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallExpressionContext functionCallExpression(int i) {
			return GetRuleContext<FunctionCallExpressionContext>(i);
		}
		public FilterChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterChain; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterChainContext filterChain() {
		FilterChainContext _localctx = new FilterChainContext(Context, State);
		EnterRule(_localctx, 40, RULE_filterChain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 209;
				Match(Pipe);
				State = 210;
				functionCallExpression();
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==Pipe );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariantValueExpressionContext variantValueExpression() {
			return GetRuleContext<VariantValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExpressionContext stringExpression() {
			return GetRuleContext<StringExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_expression);
		try {
			State = 219;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 215;
				variantValueExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 216;
				stringExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 217;
				booleanExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 218;
				arithmeticExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantValueExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RootVariantValueExpressionContext rootVariantValueExpression() {
			return GetRuleContext<RootVariantValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberValueExpressionContext memberValueExpression() {
			return GetRuleContext<MemberValueExpressionContext>(0);
		}
		public VariantValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantValueExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariantValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariantValueExpressionContext variantValueExpression() {
		VariantValueExpressionContext _localctx = new VariantValueExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_variantValueExpression);
		try {
			State = 223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 221;
				rootVariantValueExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 222;
				memberValueExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RootVariantValueExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableValueExpressionContext variableValueExpression() {
			return GetRuleContext<VariableValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallExpressionContext functionCallExpression() {
			return GetRuleContext<FunctionCallExpressionContext>(0);
		}
		public RootVariantValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rootVariantValueExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRootVariantValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootVariantValueExpressionContext rootVariantValueExpression() {
		RootVariantValueExpressionContext _localctx = new RootVariantValueExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_rootVariantValueExpression);
		try {
			State = 227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 225;
				variableValueExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 226;
				functionCallExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableValueExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(QuokkaParser.Identifier, 0); }
		public VariableValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableValueExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableValueExpressionContext variableValueExpression() {
		VariableValueExpressionContext _localctx = new VariableValueExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_variableValueExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberValueExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableValueExpressionContext variableValueExpression() {
			return GetRuleContext<VariableValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MemberAccessOperator() { return GetTokens(QuokkaParser.MemberAccessOperator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MemberAccessOperator(int i) {
			return GetToken(QuokkaParser.MemberAccessOperator, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext[] member() {
			return GetRuleContexts<MemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MemberContext member(int i) {
			return GetRuleContext<MemberContext>(i);
		}
		public MemberValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberValueExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberValueExpressionContext memberValueExpression() {
		MemberValueExpressionContext _localctx = new MemberValueExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_memberValueExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			variableValueExpression();
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 232;
				Match(MemberAccessOperator);
				State = 233;
				member();
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==MemberAccessOperator );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public MemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_member; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberContext member() {
		MemberContext _localctx = new MemberContext(Context, State);
		EnterRule(_localctx, 52, RULE_member);
		try {
			State = 240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 238;
				field();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 239;
				methodCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(QuokkaParser.Identifier, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 54, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 242;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(QuokkaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 56, RULE_methodCall);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244;
			Match(Identifier);
			State = 245;
			argumentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(QuokkaParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(QuokkaParser.If, 0); }
		public FunctionCallExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCallExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallExpressionContext functionCallExpression() {
		FunctionCallExpressionContext _localctx = new FunctionCallExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_functionCallExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247;
			_la = TokenStream.LA(1);
			if ( !(_la==If || _la==Identifier) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 248;
			argumentList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(QuokkaParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(QuokkaParser.RightParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CommaSeparator() { return GetTokens(QuokkaParser.CommaSeparator); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CommaSeparator(int i) {
			return GetToken(QuokkaParser.CommaSeparator, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext argumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 60, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 250;
			Match(LeftParen);
			State = 259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 775246053440L) != 0)) {
				{
				State = 251;
				expression();
				State = 256;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CommaSeparator) {
					{
					{
					State = 252;
					Match(CommaSeparator);
					State = 253;
					expression();
					}
					}
					State = 258;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 261;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringConstantContext stringConstant() {
			return GetRuleContext<StringConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringConcatenationContext stringConcatenation() {
			return GetRuleContext<StringConcatenationContext>(0);
		}
		public StringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExpressionContext stringExpression() {
		StringExpressionContext _localctx = new StringExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_stringExpression);
		try {
			State = 265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 263;
				stringConstant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 264;
				stringConcatenation();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DoubleQuotedString() { return GetToken(QuokkaParser.DoubleQuotedString, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SingleQuotedString() { return GetToken(QuokkaParser.SingleQuotedString, 0); }
		public StringConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringConstantContext stringConstant() {
		StringConstantContext _localctx = new StringConstantContext(Context, State);
		EnterRule(_localctx, 64, RULE_stringConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 267;
			_la = TokenStream.LA(1);
			if ( !(_la==DoubleQuotedString || _la==SingleQuotedString) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringConcatenationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringAtomContext stringAtom() {
			return GetRuleContext<StringAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ampersand() { return GetToken(QuokkaParser.Ampersand, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StringConcatenationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringConcatenation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringConcatenation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringConcatenationContext stringConcatenation() {
		StringConcatenationContext _localctx = new StringConcatenationContext(Context, State);
		EnterRule(_localctx, 66, RULE_stringConcatenation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269;
			stringAtom();
			State = 270;
			Match(Ampersand);
			State = 271;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariantValueExpressionContext variantValueExpression() {
			return GetRuleContext<VariantValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringConstantContext stringConstant() {
			return GetRuleContext<StringConstantContext>(0);
		}
		public StringAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringAtomContext stringAtom() {
		StringAtomContext _localctx = new StringAtomContext(Context, State);
		EnterRule(_localctx, 68, RULE_stringAtom);
		try {
			State = 275;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case If:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 273;
				variantValueExpression();
				}
				break;
			case DoubleQuotedString:
			case SingleQuotedString:
				EnterOuterAlt(_localctx, 2);
				{
				State = 274;
				stringConstant();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Or() { return GetTokens(QuokkaParser.Or); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or(int i) {
			return GetToken(QuokkaParser.Or, i);
		}
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		BooleanExpressionContext _localctx = new BooleanExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_booleanExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			andExpression();
			State = 282;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 278;
					Match(Or);
					State = 279;
					andExpression();
					}
					} 
				}
				State = 284;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BooleanAtomContext[] booleanAtom() {
			return GetRuleContexts<BooleanAtomContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BooleanAtomContext booleanAtom(int i) {
			return GetRuleContext<BooleanAtomContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] And() { return GetTokens(QuokkaParser.And); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And(int i) {
			return GetToken(QuokkaParser.And, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_andExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			booleanAtom();
			State = 290;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 286;
					Match(And);
					State = 287;
					booleanAtom();
					}
					} 
				}
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(QuokkaParser.Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanAtomContext booleanAtom() {
			return GetRuleContext<BooleanAtomContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_notExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			Match(Not);
			State = 294;
			booleanAtom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedBooleanExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(QuokkaParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(QuokkaParser.RightParen, 0); }
		public ParenthesizedBooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedBooleanExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedBooleanExpressionContext parenthesizedBooleanExpression() {
		ParenthesizedBooleanExpressionContext _localctx = new ParenthesizedBooleanExpressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_parenthesizedBooleanExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296;
			Match(LeftParen);
			State = 297;
			booleanExpression();
			State = 298;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringComparisonExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariantValueExpressionContext variantValueExpression() {
			return GetRuleContext<VariantValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringExpressionContext stringExpression() {
			return GetRuleContext<StringExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(QuokkaParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(QuokkaParser.NotEquals, 0); }
		public StringComparisonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringComparisonExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringComparisonExpressionContext stringComparisonExpression() {
		StringComparisonExpressionContext _localctx = new StringComparisonExpressionContext(Context, State);
		EnterRule(_localctx, 78, RULE_stringComparisonExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 300;
			variantValueExpression();
			State = 301;
			_la = TokenStream.LA(1);
			if ( !(_la==Equals || _la==NotEquals) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 302;
			stringExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullComparisonExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariantValueExpressionContext variantValueExpression() {
			return GetRuleContext<VariantValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Null() { return GetToken(QuokkaParser.Null, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(QuokkaParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(QuokkaParser.NotEquals, 0); }
		public NullComparisonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullComparisonExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullComparisonExpressionContext nullComparisonExpression() {
		NullComparisonExpressionContext _localctx = new NullComparisonExpressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_nullComparisonExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			variantValueExpression();
			State = 305;
			_la = TokenStream.LA(1);
			if ( !(_la==Equals || _la==NotEquals) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 306;
			Match(Null);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticComparisonExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext[] arithmeticExpression() {
			return GetRuleContexts<ArithmeticExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression(int i) {
			return GetRuleContext<ArithmeticExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals() { return GetToken(QuokkaParser.Equals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(QuokkaParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(QuokkaParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThan() { return GetToken(QuokkaParser.GreaterThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanOrEquals() { return GetToken(QuokkaParser.LessThanOrEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanOrEquals() { return GetToken(QuokkaParser.GreaterThanOrEquals, 0); }
		public ArithmeticComparisonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticComparisonExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticComparisonExpressionContext arithmeticComparisonExpression() {
		ArithmeticComparisonExpressionContext _localctx = new ArithmeticComparisonExpressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_arithmeticComparisonExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 308;
			arithmeticExpression();
			State = 309;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1056964608L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 310;
			arithmeticExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariantValueExpressionContext variantValueExpression() {
			return GetRuleContext<VariantValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedBooleanExpressionContext parenthesizedBooleanExpression() {
			return GetRuleContext<ParenthesizedBooleanExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringComparisonExpressionContext stringComparisonExpression() {
			return GetRuleContext<StringComparisonExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullComparisonExpressionContext nullComparisonExpression() {
			return GetRuleContext<NullComparisonExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticComparisonExpressionContext arithmeticComparisonExpression() {
			return GetRuleContext<ArithmeticComparisonExpressionContext>(0);
		}
		public BooleanAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanAtomContext booleanAtom() {
		BooleanAtomContext _localctx = new BooleanAtomContext(Context, State);
		EnterRule(_localctx, 84, RULE_booleanAtom);
		try {
			State = 318;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 312;
				variantValueExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313;
				notExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 314;
				parenthesizedBooleanExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 315;
				stringComparisonExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 316;
				nullComparisonExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 317;
				arithmeticComparisonExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationExpressionContext multiplicationExpression() {
			return GetRuleContext<MultiplicationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlusOperandContext[] plusOperand() {
			return GetRuleContexts<PlusOperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlusOperandContext plusOperand(int i) {
			return GetRuleContext<PlusOperandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinusOperandContext[] minusOperand() {
			return GetRuleContexts<MinusOperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MinusOperandContext minusOperand(int i) {
			return GetRuleContext<MinusOperandContext>(i);
		}
		public ArithmeticExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticExpressionContext arithmeticExpression() {
		ArithmeticExpressionContext _localctx = new ArithmeticExpressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_arithmeticExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 320;
			multiplicationExpression();
			State = 325;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Plus || _la==Minus) {
				{
				State = 323;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Plus:
					{
					State = 321;
					plusOperand();
					}
					break;
				case Minus:
					{
					State = 322;
					minusOperand();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlusOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(QuokkaParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationExpressionContext multiplicationExpression() {
			return GetRuleContext<MultiplicationExpressionContext>(0);
		}
		public PlusOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plusOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlusOperandContext plusOperand() {
		PlusOperandContext _localctx = new PlusOperandContext(Context, State);
		EnterRule(_localctx, 88, RULE_plusOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 328;
			Match(Plus);
			State = 329;
			multiplicationExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinusOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(QuokkaParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationExpressionContext multiplicationExpression() {
			return GetRuleContext<MultiplicationExpressionContext>(0);
		}
		public MinusOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minusOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinusOperandContext minusOperand() {
		MinusOperandContext _localctx = new MinusOperandContext(Context, State);
		EnterRule(_localctx, 90, RULE_minusOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			Match(Minus);
			State = 332;
			multiplicationExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticAtomContext arithmeticAtom() {
			return GetRuleContext<ArithmeticAtomContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationOperandContext[] multiplicationOperand() {
			return GetRuleContexts<MultiplicationOperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public MultiplicationOperandContext multiplicationOperand(int i) {
			return GetRuleContext<MultiplicationOperandContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DivisionOperandContext[] divisionOperand() {
			return GetRuleContexts<DivisionOperandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DivisionOperandContext divisionOperand(int i) {
			return GetRuleContext<DivisionOperandContext>(i);
		}
		public MultiplicationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicationExpressionContext multiplicationExpression() {
		MultiplicationExpressionContext _localctx = new MultiplicationExpressionContext(Context, State);
		EnterRule(_localctx, 92, RULE_multiplicationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 334;
			arithmeticAtom();
			State = 339;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Multiply || _la==Divide) {
				{
				State = 337;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case Multiply:
					{
					State = 335;
					multiplicationOperand();
					}
					break;
				case Divide:
					{
					State = 336;
					divisionOperand();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 341;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(QuokkaParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticAtomContext arithmeticAtom() {
			return GetRuleContext<ArithmeticAtomContext>(0);
		}
		public MultiplicationOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicationOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicationOperandContext multiplicationOperand() {
		MultiplicationOperandContext _localctx = new MultiplicationOperandContext(Context, State);
		EnterRule(_localctx, 94, RULE_multiplicationOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 342;
			Match(Multiply);
			State = 343;
			arithmeticAtom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivisionOperandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(QuokkaParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticAtomContext arithmeticAtom() {
			return GetRuleContext<ArithmeticAtomContext>(0);
		}
		public DivisionOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divisionOperand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivisionOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivisionOperandContext divisionOperand() {
		DivisionOperandContext _localctx = new DivisionOperandContext(Context, State);
		EnterRule(_localctx, 96, RULE_divisionOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(Divide);
			State = 346;
			arithmeticAtom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegationExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(QuokkaParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticAtomContext arithmeticAtom() {
			return GetRuleContext<ArithmeticAtomContext>(0);
		}
		public NegationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negationExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegationExpressionContext negationExpression() {
		NegationExpressionContext _localctx = new NegationExpressionContext(Context, State);
		EnterRule(_localctx, 98, RULE_negationExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 348;
			Match(Minus);
			State = 349;
			arithmeticAtom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedArithmeticExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftParen() { return GetToken(QuokkaParser.LeftParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightParen() { return GetToken(QuokkaParser.RightParen, 0); }
		public ParenthesizedArithmeticExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedArithmeticExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedArithmeticExpressionContext parenthesizedArithmeticExpression() {
		ParenthesizedArithmeticExpressionContext _localctx = new ParenthesizedArithmeticExpressionContext(Context, State);
		EnterRule(_localctx, 100, RULE_parenthesizedArithmeticExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 351;
			Match(LeftParen);
			State = 352;
			arithmeticExpression();
			State = 353;
			Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticAtomContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(QuokkaParser.Number, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariantValueExpressionContext variantValueExpression() {
			return GetRuleContext<VariantValueExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NegationExpressionContext negationExpression() {
			return GetRuleContext<NegationExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesizedArithmeticExpressionContext parenthesizedArithmeticExpression() {
			return GetRuleContext<ParenthesizedArithmeticExpressionContext>(0);
		}
		public ArithmeticAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticAtom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticAtomContext arithmeticAtom() {
		ArithmeticAtomContext _localctx = new ArithmeticAtomContext(Context, State);
		EnterRule(_localctx, 102, RULE_arithmeticAtom);
		try {
			State = 359;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 355;
				Match(Number);
				}
				break;
			case If:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 356;
				variantValueExpression();
				}
				break;
			case Minus:
				EnterOuterAlt(_localctx, 3);
				{
				State = 357;
				negationExpression();
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 4);
				{
				State = 358;
				parenthesizedArithmeticExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,40,362,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,1,0,3,0,106,8,0,1,0,1,0,1,1,1,1,4,1,112,8,1,11,1,12,
		1,113,1,2,1,2,4,2,118,8,2,11,2,12,2,119,1,3,1,3,1,3,1,3,3,3,126,8,3,1,
		4,4,4,129,8,4,11,4,12,4,130,1,5,1,5,1,6,1,6,5,6,137,8,6,10,6,12,6,140,
		9,6,1,6,3,6,143,8,6,1,6,1,6,1,7,1,7,3,7,149,8,7,1,8,1,8,3,8,153,8,8,1,
		9,1,9,3,9,157,8,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,
		12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,3,14,179,8,14,1,14,1,14,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,18,
		1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,3,19,206,8,19,1,19,1,19,1,
		20,1,20,4,20,212,8,20,11,20,12,20,213,1,21,1,21,1,21,1,21,3,21,220,8,21,
		1,22,1,22,3,22,224,8,22,1,23,1,23,3,23,228,8,23,1,24,1,24,1,25,1,25,1,
		25,4,25,235,8,25,11,25,12,25,236,1,26,1,26,3,26,241,8,26,1,27,1,27,1,28,
		1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,5,30,255,8,30,10,30,12,30,
		258,9,30,3,30,260,8,30,1,30,1,30,1,31,1,31,3,31,266,8,31,1,32,1,32,1,33,
		1,33,1,33,1,33,1,34,1,34,3,34,276,8,34,1,35,1,35,1,35,5,35,281,8,35,10,
		35,12,35,284,9,35,1,36,1,36,1,36,5,36,289,8,36,10,36,12,36,292,9,36,1,
		37,1,37,1,37,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,
		40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,3,42,319,8,42,1,43,
		1,43,1,43,5,43,324,8,43,10,43,12,43,327,9,43,1,44,1,44,1,44,1,45,1,45,
		1,45,1,46,1,46,1,46,5,46,338,8,46,10,46,12,46,341,9,46,1,47,1,47,1,47,
		1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,
		3,51,360,8,51,1,51,0,0,52,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,
		34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,
		82,84,86,88,90,92,94,96,98,100,102,0,4,2,0,6,6,39,39,1,0,36,37,1,0,24,
		25,1,0,24,29,351,0,105,1,0,0,0,2,111,1,0,0,0,4,117,1,0,0,0,6,125,1,0,0,
		0,8,128,1,0,0,0,10,132,1,0,0,0,12,134,1,0,0,0,14,146,1,0,0,0,16,150,1,
		0,0,0,18,154,1,0,0,0,20,158,1,0,0,0,22,163,1,0,0,0,24,168,1,0,0,0,26,172,
		1,0,0,0,28,176,1,0,0,0,30,182,1,0,0,0,32,189,1,0,0,0,34,191,1,0,0,0,36,
		195,1,0,0,0,38,202,1,0,0,0,40,211,1,0,0,0,42,219,1,0,0,0,44,223,1,0,0,
		0,46,227,1,0,0,0,48,229,1,0,0,0,50,231,1,0,0,0,52,240,1,0,0,0,54,242,1,
		0,0,0,56,244,1,0,0,0,58,247,1,0,0,0,60,250,1,0,0,0,62,265,1,0,0,0,64,267,
		1,0,0,0,66,269,1,0,0,0,68,275,1,0,0,0,70,277,1,0,0,0,72,285,1,0,0,0,74,
		293,1,0,0,0,76,296,1,0,0,0,78,300,1,0,0,0,80,304,1,0,0,0,82,308,1,0,0,
		0,84,318,1,0,0,0,86,320,1,0,0,0,88,328,1,0,0,0,90,331,1,0,0,0,92,334,1,
		0,0,0,94,342,1,0,0,0,96,345,1,0,0,0,98,348,1,0,0,0,100,351,1,0,0,0,102,
		359,1,0,0,0,104,106,3,2,1,0,105,104,1,0,0,0,105,106,1,0,0,0,106,107,1,
		0,0,0,107,108,5,0,0,1,108,1,1,0,0,0,109,112,3,4,2,0,110,112,3,6,3,0,111,
		109,1,0,0,0,111,110,1,0,0,0,112,113,1,0,0,0,113,111,1,0,0,0,113,114,1,
		0,0,0,114,3,1,0,0,0,115,118,3,8,4,0,116,118,3,38,19,0,117,115,1,0,0,0,
		117,116,1,0,0,0,118,119,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,5,
		1,0,0,0,121,126,3,12,6,0,122,126,3,28,14,0,123,126,3,36,18,0,124,126,3,
		10,5,0,125,121,1,0,0,0,125,122,1,0,0,0,125,123,1,0,0,0,125,124,1,0,0,0,
		126,7,1,0,0,0,127,129,5,4,0,0,128,127,1,0,0,0,129,130,1,0,0,0,130,128,
		1,0,0,0,130,131,1,0,0,0,131,9,1,0,0,0,132,133,5,1,0,0,133,11,1,0,0,0,134,
		138,3,14,7,0,135,137,3,18,9,0,136,135,1,0,0,0,137,140,1,0,0,0,138,136,
		1,0,0,0,138,139,1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,0,141,143,3,16,8,
		0,142,141,1,0,0,0,142,143,1,0,0,0,143,144,1,0,0,0,144,145,3,26,13,0,145,
		13,1,0,0,0,146,148,3,20,10,0,147,149,3,2,1,0,148,147,1,0,0,0,148,149,1,
		0,0,0,149,15,1,0,0,0,150,152,3,24,12,0,151,153,3,2,1,0,152,151,1,0,0,0,
		152,153,1,0,0,0,153,17,1,0,0,0,154,156,3,22,11,0,155,157,3,2,1,0,156,155,
		1,0,0,0,156,157,1,0,0,0,157,19,1,0,0,0,158,159,5,3,0,0,159,160,5,6,0,0,
		160,161,3,70,35,0,161,162,5,5,0,0,162,21,1,0,0,0,163,164,5,3,0,0,164,165,
		5,10,0,0,165,166,3,70,35,0,166,167,5,5,0,0,167,23,1,0,0,0,168,169,5,3,
		0,0,169,170,5,9,0,0,170,171,5,5,0,0,171,25,1,0,0,0,172,173,5,3,0,0,173,
		174,5,7,0,0,174,175,5,5,0,0,175,27,1,0,0,0,176,178,3,30,15,0,177,179,3,
		2,1,0,178,177,1,0,0,0,178,179,1,0,0,0,179,180,1,0,0,0,180,181,3,34,17,
		0,181,29,1,0,0,0,182,183,5,3,0,0,183,184,5,11,0,0,184,185,3,32,16,0,185,
		186,5,12,0,0,186,187,3,44,22,0,187,188,5,5,0,0,188,31,1,0,0,0,189,190,
		5,39,0,0,190,33,1,0,0,0,191,192,5,3,0,0,192,193,5,13,0,0,193,194,5,5,0,
		0,194,35,1,0,0,0,195,196,5,3,0,0,196,197,5,23,0,0,197,198,5,39,0,0,198,
		199,5,24,0,0,199,200,3,42,21,0,200,201,5,5,0,0,201,37,1,0,0,0,202,203,
		5,2,0,0,203,205,3,42,21,0,204,206,3,40,20,0,205,204,1,0,0,0,205,206,1,
		0,0,0,206,207,1,0,0,0,207,208,5,5,0,0,208,39,1,0,0,0,209,210,5,16,0,0,
		210,212,3,58,29,0,211,209,1,0,0,0,212,213,1,0,0,0,213,211,1,0,0,0,213,
		214,1,0,0,0,214,41,1,0,0,0,215,220,3,44,22,0,216,220,3,62,31,0,217,220,
		3,70,35,0,218,220,3,86,43,0,219,215,1,0,0,0,219,216,1,0,0,0,219,217,1,
		0,0,0,219,218,1,0,0,0,220,43,1,0,0,0,221,224,3,46,23,0,222,224,3,50,25,
		0,223,221,1,0,0,0,223,222,1,0,0,0,224,45,1,0,0,0,225,228,3,48,24,0,226,
		228,3,58,29,0,227,225,1,0,0,0,227,226,1,0,0,0,228,47,1,0,0,0,229,230,5,
		39,0,0,230,49,1,0,0,0,231,234,3,48,24,0,232,233,5,15,0,0,233,235,3,52,
		26,0,234,232,1,0,0,0,235,236,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,
		51,1,0,0,0,238,241,3,54,27,0,239,241,3,56,28,0,240,238,1,0,0,0,240,239,
		1,0,0,0,241,53,1,0,0,0,242,243,5,39,0,0,243,55,1,0,0,0,244,245,5,39,0,
		0,245,246,3,60,30,0,246,57,1,0,0,0,247,248,7,0,0,0,248,249,3,60,30,0,249,
		59,1,0,0,0,250,259,5,18,0,0,251,256,3,42,21,0,252,253,5,17,0,0,253,255,
		3,42,21,0,254,252,1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,
		0,0,257,260,1,0,0,0,258,256,1,0,0,0,259,251,1,0,0,0,259,260,1,0,0,0,260,
		261,1,0,0,0,261,262,5,19,0,0,262,61,1,0,0,0,263,266,3,64,32,0,264,266,
		3,66,33,0,265,263,1,0,0,0,265,264,1,0,0,0,266,63,1,0,0,0,267,268,7,1,0,
		0,268,65,1,0,0,0,269,270,3,68,34,0,270,271,5,38,0,0,271,272,3,42,21,0,
		272,67,1,0,0,0,273,276,3,44,22,0,274,276,3,64,32,0,275,273,1,0,0,0,275,
		274,1,0,0,0,276,69,1,0,0,0,277,282,3,72,36,0,278,279,5,21,0,0,279,281,
		3,72,36,0,280,278,1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,1,0,
		0,0,283,71,1,0,0,0,284,282,1,0,0,0,285,290,3,84,42,0,286,287,5,20,0,0,
		287,289,3,84,42,0,288,286,1,0,0,0,289,292,1,0,0,0,290,288,1,0,0,0,290,
		291,1,0,0,0,291,73,1,0,0,0,292,290,1,0,0,0,293,294,5,22,0,0,294,295,3,
		84,42,0,295,75,1,0,0,0,296,297,5,18,0,0,297,298,3,70,35,0,298,299,5,19,
		0,0,299,77,1,0,0,0,300,301,3,44,22,0,301,302,7,2,0,0,302,303,3,62,31,0,
		303,79,1,0,0,0,304,305,3,44,22,0,305,306,7,2,0,0,306,307,5,14,0,0,307,
		81,1,0,0,0,308,309,3,86,43,0,309,310,7,3,0,0,310,311,3,86,43,0,311,83,
		1,0,0,0,312,319,3,44,22,0,313,319,3,74,37,0,314,319,3,76,38,0,315,319,
		3,78,39,0,316,319,3,80,40,0,317,319,3,82,41,0,318,312,1,0,0,0,318,313,
		1,0,0,0,318,314,1,0,0,0,318,315,1,0,0,0,318,316,1,0,0,0,318,317,1,0,0,
		0,319,85,1,0,0,0,320,325,3,92,46,0,321,324,3,88,44,0,322,324,3,90,45,0,
		323,321,1,0,0,0,323,322,1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,
		1,0,0,0,326,87,1,0,0,0,327,325,1,0,0,0,328,329,5,30,0,0,329,330,3,92,46,
		0,330,89,1,0,0,0,331,332,5,31,0,0,332,333,3,92,46,0,333,91,1,0,0,0,334,
		339,3,102,51,0,335,338,3,94,47,0,336,338,3,96,48,0,337,335,1,0,0,0,337,
		336,1,0,0,0,338,341,1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,93,1,0,
		0,0,341,339,1,0,0,0,342,343,5,32,0,0,343,344,3,102,51,0,344,95,1,0,0,0,
		345,346,5,33,0,0,346,347,3,102,51,0,347,97,1,0,0,0,348,349,5,31,0,0,349,
		350,3,102,51,0,350,99,1,0,0,0,351,352,5,18,0,0,352,353,3,86,43,0,353,354,
		5,19,0,0,354,101,1,0,0,0,355,360,5,34,0,0,356,360,3,44,22,0,357,360,3,
		98,49,0,358,360,3,100,50,0,359,355,1,0,0,0,359,356,1,0,0,0,359,357,1,0,
		0,0,359,358,1,0,0,0,360,103,1,0,0,0,32,105,111,113,117,119,125,130,138,
		142,148,152,156,178,205,213,219,223,227,236,240,256,259,265,275,282,290,
		318,323,325,337,339,359
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Mindbox.Quokka.Generated
