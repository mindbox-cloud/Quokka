//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Code\Quokka\Grammar\Quokka\Quokka.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Quokka.Generated {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class QuokkaParser : Parser {
	public const int
		SingleInstructionComment=1, OutputInstructionStart=2, ControlInstructionStart=3, 
		Fluff=4, InstructionEnd=5, If=6, EndIf=7, End=8, Else=9, ElseIf=10, For=11, 
		In=12, EndFor=13, Comment=14, EndComment=15, MemberAccessOperator=16, 
		Pipe=17, CommaSeparator=18, LeftParen=19, RightParen=20, And=21, Or=22, 
		Not=23, Equals=24, NotEquals=25, GreaterThan=26, LessThan=27, GreaterThanOrEquals=28, 
		LessThanOrEquals=29, Plus=30, Minus=31, Multiply=32, Divide=33, Number=34, 
		Digit=35, DoubleQuotedString=36, Identifier=37, WhiteSpace=38;
	public const int
		RULE_template = 0, RULE_templateBlock = 1, RULE_staticBlock = 2, RULE_dynamicBlock = 3, 
		RULE_constantBlock = 4, RULE_outputBlock = 5, RULE_parameterValueExpression = 6, 
		RULE_parameterExpression = 7, RULE_memberAccessExpression = 8, RULE_filteredParameterValueExpression = 9, 
		RULE_filterChain = 10, RULE_filter = 11, RULE_filterArgumentList = 12, 
		RULE_filterArgumentValue = 13, RULE_ifStatement = 14, RULE_ifCondition = 15, 
		RULE_elseCondition = 16, RULE_elseIfCondition = 17, RULE_ifInstruction = 18, 
		RULE_elseIfInstruction = 19, RULE_elseInstruction = 20, RULE_endIfInstruction = 21, 
		RULE_forStatement = 22, RULE_forInstruction = 23, RULE_iterationVariable = 24, 
		RULE_endForInstruction = 25, RULE_commentBlock = 26, RULE_commentInstruction = 27, 
		RULE_endCommentInstruction = 28, RULE_booleanExpression = 29, RULE_andExpression = 30, 
		RULE_notExpression = 31, RULE_parenthesizedBooleanExpression = 32, RULE_booleanAtom = 33, 
		RULE_arithmeticComparisonExpression = 34, RULE_arithmeticExpression = 35, 
		RULE_plusOperand = 36, RULE_minusOperand = 37, RULE_multiplicationExpression = 38, 
		RULE_multiplicationOperand = 39, RULE_divisionOperand = 40, RULE_negationExpression = 41, 
		RULE_arithmeticAtom = 42;
	public static readonly string[] ruleNames = {
		"template", "templateBlock", "staticBlock", "dynamicBlock", "constantBlock", 
		"outputBlock", "parameterValueExpression", "parameterExpression", "memberAccessExpression", 
		"filteredParameterValueExpression", "filterChain", "filter", "filterArgumentList", 
		"filterArgumentValue", "ifStatement", "ifCondition", "elseCondition", 
		"elseIfCondition", "ifInstruction", "elseIfInstruction", "elseInstruction", 
		"endIfInstruction", "forStatement", "forInstruction", "iterationVariable", 
		"endForInstruction", "commentBlock", "commentInstruction", "endCommentInstruction", 
		"booleanExpression", "andExpression", "notExpression", "parenthesizedBooleanExpression", 
		"booleanAtom", "arithmeticComparisonExpression", "arithmeticExpression", 
		"plusOperand", "minusOperand", "multiplicationExpression", "multiplicationOperand", 
		"divisionOperand", "negationExpression", "arithmeticAtom"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'${'", "'@{'", null, "'}'", null, null, null, null, null, 
		null, null, null, null, null, "'.'", "'|'", "','", "'('", "')'", null, 
		null, null, "'='", "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", "'-'", 
		"'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleInstructionComment", "OutputInstructionStart", "ControlInstructionStart", 
		"Fluff", "InstructionEnd", "If", "EndIf", "End", "Else", "ElseIf", "For", 
		"In", "EndFor", "Comment", "EndComment", "MemberAccessOperator", "Pipe", 
		"CommaSeparator", "LeftParen", "RightParen", "And", "Or", "Not", "Equals", 
		"NotEquals", "GreaterThan", "LessThan", "GreaterThanOrEquals", "LessThanOrEquals", 
		"Plus", "Minus", "Multiply", "Divide", "Number", "Digit", "DoubleQuotedString", 
		"Identifier", "WhiteSpace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Quokka.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public QuokkaParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class TemplateContext : ParserRuleContext {
		public TemplateBlockContext[] templateBlock() {
			return GetRuleContexts<TemplateBlockContext>();
		}
		public TemplateBlockContext templateBlock(int i) {
			return GetRuleContext<TemplateBlockContext>(i);
		}
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 0, RULE_template);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SingleInstructionComment) | (1L << OutputInstructionStart) | (1L << ControlInstructionStart) | (1L << Fluff))) != 0)) {
				{
				{
				State = 86; templateBlock();
				}
				}
				State = 91;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateBlockContext : ParserRuleContext {
		public StaticBlockContext[] staticBlock() {
			return GetRuleContexts<StaticBlockContext>();
		}
		public StaticBlockContext staticBlock(int i) {
			return GetRuleContext<StaticBlockContext>(i);
		}
		public DynamicBlockContext[] dynamicBlock() {
			return GetRuleContexts<DynamicBlockContext>();
		}
		public DynamicBlockContext dynamicBlock(int i) {
			return GetRuleContext<DynamicBlockContext>(i);
		}
		public TemplateBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateBlockContext templateBlock() {
		TemplateBlockContext _localctx = new TemplateBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_templateBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 94;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 94;
					switch (TokenStream.La(1)) {
					case OutputInstructionStart:
					case Fluff:
						{
						State = 92; staticBlock();
						}
						break;
					case SingleInstructionComment:
					case ControlInstructionStart:
						{
						State = 93; dynamicBlock();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 96;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticBlockContext : ParserRuleContext {
		public ConstantBlockContext[] constantBlock() {
			return GetRuleContexts<ConstantBlockContext>();
		}
		public ConstantBlockContext constantBlock(int i) {
			return GetRuleContext<ConstantBlockContext>(i);
		}
		public OutputBlockContext[] outputBlock() {
			return GetRuleContexts<OutputBlockContext>();
		}
		public OutputBlockContext outputBlock(int i) {
			return GetRuleContext<OutputBlockContext>(i);
		}
		public StaticBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticBlockContext staticBlock() {
		StaticBlockContext _localctx = new StaticBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_staticBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 100;
					switch (TokenStream.La(1)) {
					case Fluff:
						{
						State = 98; constantBlock();
						}
						break;
					case OutputInstructionStart:
						{
						State = 99; outputBlock();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 102;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,4,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicBlockContext : ParserRuleContext {
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public CommentBlockContext commentBlock() {
			return GetRuleContext<CommentBlockContext>(0);
		}
		public DynamicBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DynamicBlockContext dynamicBlock() {
		DynamicBlockContext _localctx = new DynamicBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_dynamicBlock);
		try {
			State = 107;
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; ifStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105; forStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 106; commentBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantBlockContext : ParserRuleContext {
		public ITerminalNode[] Fluff() { return GetTokens(QuokkaParser.Fluff); }
		public ITerminalNode Fluff(int i) {
			return GetToken(QuokkaParser.Fluff, i);
		}
		public ConstantBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantBlockContext constantBlock() {
		ConstantBlockContext _localctx = new ConstantBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_constantBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 110;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 109; Match(Fluff);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 112;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputBlockContext : ParserRuleContext {
		public ITerminalNode OutputInstructionStart() { return GetToken(QuokkaParser.OutputInstructionStart, 0); }
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public FilteredParameterValueExpressionContext filteredParameterValueExpression() {
			return GetRuleContext<FilteredParameterValueExpressionContext>(0);
		}
		public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public OutputBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputBlockContext outputBlock() {
		OutputBlockContext _localctx = new OutputBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_outputBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114; Match(OutputInstructionStart);
			State = 117;
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				{
				State = 115; filteredParameterValueExpression();
				}
				break;
			case 2:
				{
				State = 116; arithmeticExpression();
				}
				break;
			}
			State = 119; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterValueExpressionContext : ParserRuleContext {
		public ParameterExpressionContext parameterExpression() {
			return GetRuleContext<ParameterExpressionContext>(0);
		}
		public MemberAccessExpressionContext memberAccessExpression() {
			return GetRuleContext<MemberAccessExpressionContext>(0);
		}
		public ParameterValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterValueExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterValueExpressionContext parameterValueExpression() {
		ParameterValueExpressionContext _localctx = new ParameterValueExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_parameterValueExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121; parameterExpression();
			State = 123;
			_la = TokenStream.La(1);
			if (_la==MemberAccessOperator) {
				{
				State = 122; memberAccessExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterExpressionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(QuokkaParser.Identifier, 0); }
		public ParameterExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterExpressionContext parameterExpression() {
		ParameterExpressionContext _localctx = new ParameterExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameterExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessExpressionContext : ParserRuleContext {
		public ITerminalNode MemberAccessOperator() { return GetToken(QuokkaParser.MemberAccessOperator, 0); }
		public ITerminalNode Identifier() { return GetToken(QuokkaParser.Identifier, 0); }
		public MemberAccessExpressionContext memberAccessExpression() {
			return GetRuleContext<MemberAccessExpressionContext>(0);
		}
		public MemberAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccessExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessExpressionContext memberAccessExpression() {
		MemberAccessExpressionContext _localctx = new MemberAccessExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_memberAccessExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(MemberAccessOperator);
			State = 128; Match(Identifier);
			State = 130;
			_la = TokenStream.La(1);
			if (_la==MemberAccessOperator) {
				{
				State = 129; memberAccessExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilteredParameterValueExpressionContext : ParserRuleContext {
		public ParameterValueExpressionContext parameterValueExpression() {
			return GetRuleContext<ParameterValueExpressionContext>(0);
		}
		public FilterChainContext filterChain() {
			return GetRuleContext<FilterChainContext>(0);
		}
		public FilteredParameterValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filteredParameterValueExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilteredParameterValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilteredParameterValueExpressionContext filteredParameterValueExpression() {
		FilteredParameterValueExpressionContext _localctx = new FilteredParameterValueExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_filteredParameterValueExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; parameterValueExpression();
			State = 134;
			_la = TokenStream.La(1);
			if (_la==Pipe) {
				{
				State = 133; filterChain();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterChainContext : ParserRuleContext {
		public ITerminalNode[] Pipe() { return GetTokens(QuokkaParser.Pipe); }
		public ITerminalNode Pipe(int i) {
			return GetToken(QuokkaParser.Pipe, i);
		}
		public FilterContext[] filter() {
			return GetRuleContexts<FilterContext>();
		}
		public FilterContext filter(int i) {
			return GetRuleContext<FilterContext>(i);
		}
		public FilterChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterChain; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterChainContext filterChain() {
		FilterChainContext _localctx = new FilterChainContext(Context, State);
		EnterRule(_localctx, 20, RULE_filterChain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 136; Match(Pipe);
				State = 137; filter();
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==Pipe );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(QuokkaParser.Identifier, 0); }
		public FilterArgumentListContext filterArgumentList() {
			return GetRuleContext<FilterArgumentListContext>(0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 22, RULE_filter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; Match(Identifier);
			State = 144;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 143; filterArgumentList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterArgumentListContext : ParserRuleContext {
		public ITerminalNode LeftParen() { return GetToken(QuokkaParser.LeftParen, 0); }
		public FilterArgumentValueContext[] filterArgumentValue() {
			return GetRuleContexts<FilterArgumentValueContext>();
		}
		public FilterArgumentValueContext filterArgumentValue(int i) {
			return GetRuleContext<FilterArgumentValueContext>(i);
		}
		public ITerminalNode RightParen() { return GetToken(QuokkaParser.RightParen, 0); }
		public ITerminalNode[] CommaSeparator() { return GetTokens(QuokkaParser.CommaSeparator); }
		public ITerminalNode CommaSeparator(int i) {
			return GetToken(QuokkaParser.CommaSeparator, i);
		}
		public FilterArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterArgumentList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterArgumentListContext filterArgumentList() {
		FilterArgumentListContext _localctx = new FilterArgumentListContext(Context, State);
		EnterRule(_localctx, 24, RULE_filterArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 146; Match(LeftParen);
			State = 147; filterArgumentValue();
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CommaSeparator) {
				{
				{
				State = 148; Match(CommaSeparator);
				State = 149; filterArgumentValue();
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 155; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterArgumentValueContext : ParserRuleContext {
		public ITerminalNode DoubleQuotedString() { return GetToken(QuokkaParser.DoubleQuotedString, 0); }
		public FilterArgumentValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterArgumentValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterArgumentValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterArgumentValueContext filterArgumentValue() {
		FilterArgumentValueContext _localctx = new FilterArgumentValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_filterArgumentValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(DoubleQuotedString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public IfConditionContext ifCondition() {
			return GetRuleContext<IfConditionContext>(0);
		}
		public EndIfInstructionContext endIfInstruction() {
			return GetRuleContext<EndIfInstructionContext>(0);
		}
		public ElseIfConditionContext[] elseIfCondition() {
			return GetRuleContexts<ElseIfConditionContext>();
		}
		public ElseIfConditionContext elseIfCondition(int i) {
			return GetRuleContext<ElseIfConditionContext>(i);
		}
		public ElseConditionContext elseCondition() {
			return GetRuleContext<ElseConditionContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; ifCondition();
			State = 163;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 160; elseIfCondition();
					}
					} 
				}
				State = 165;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 167;
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				State = 166; elseCondition();
				}
				break;
			}
			State = 169; endIfInstruction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionContext : ParserRuleContext {
		public IfInstructionContext ifInstruction() {
			return GetRuleContext<IfInstructionContext>(0);
		}
		public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public IfConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCondition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionContext ifCondition() {
		IfConditionContext _localctx = new IfConditionContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; ifInstruction();
			State = 173;
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				{
				State = 172; templateBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseConditionContext : ParserRuleContext {
		public ElseInstructionContext elseInstruction() {
			return GetRuleContext<ElseInstructionContext>(0);
		}
		public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public ElseConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseCondition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseConditionContext elseCondition() {
		ElseConditionContext _localctx = new ElseConditionContext(Context, State);
		EnterRule(_localctx, 32, RULE_elseCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; elseInstruction();
			State = 177;
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				{
				State = 176; templateBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfConditionContext : ParserRuleContext {
		public ElseIfInstructionContext elseIfInstruction() {
			return GetRuleContext<ElseIfInstructionContext>(0);
		}
		public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public ElseIfConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfCondition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfConditionContext elseIfCondition() {
		ElseIfConditionContext _localctx = new ElseIfConditionContext(Context, State);
		EnterRule(_localctx, 34, RULE_elseIfCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; elseIfInstruction();
			State = 181;
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				{
				State = 180; templateBlock();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode If() { return GetToken(QuokkaParser.If, 0); }
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public IfInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifInstruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfInstructionContext ifInstruction() {
		IfInstructionContext _localctx = new IfInstructionContext(Context, State);
		EnterRule(_localctx, 36, RULE_ifInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; Match(ControlInstructionStart);
			State = 184; Match(If);
			State = 185; booleanExpression();
			State = 186; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode ElseIf() { return GetToken(QuokkaParser.ElseIf, 0); }
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public ElseIfInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfInstruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfInstructionContext elseIfInstruction() {
		ElseIfInstructionContext _localctx = new ElseIfInstructionContext(Context, State);
		EnterRule(_localctx, 38, RULE_elseIfInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; Match(ControlInstructionStart);
			State = 189; Match(ElseIf);
			State = 190; booleanExpression();
			State = 191; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode Else() { return GetToken(QuokkaParser.Else, 0); }
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public ElseInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseInstruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseInstructionContext elseInstruction() {
		ElseInstructionContext _localctx = new ElseInstructionContext(Context, State);
		EnterRule(_localctx, 40, RULE_elseInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(ControlInstructionStart);
			State = 194; Match(Else);
			State = 195; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndIfInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode EndIf() { return GetToken(QuokkaParser.EndIf, 0); }
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public EndIfInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endIfInstruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndIfInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndIfInstructionContext endIfInstruction() {
		EndIfInstructionContext _localctx = new EndIfInstructionContext(Context, State);
		EnterRule(_localctx, 42, RULE_endIfInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(ControlInstructionStart);
			State = 198; Match(EndIf);
			State = 199; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ForInstructionContext forInstruction() {
			return GetRuleContext<ForInstructionContext>(0);
		}
		public EndForInstructionContext endForInstruction() {
			return GetRuleContext<EndForInstructionContext>(0);
		}
		public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 201; forInstruction();
			State = 203;
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 202; templateBlock();
				}
				break;
			}
			State = 205; endForInstruction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode For() { return GetToken(QuokkaParser.For, 0); }
		public IterationVariableContext iterationVariable() {
			return GetRuleContext<IterationVariableContext>(0);
		}
		public ITerminalNode In() { return GetToken(QuokkaParser.In, 0); }
		public ParameterValueExpressionContext parameterValueExpression() {
			return GetRuleContext<ParameterValueExpressionContext>(0);
		}
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public ForInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInstruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInstructionContext forInstruction() {
		ForInstructionContext _localctx = new ForInstructionContext(Context, State);
		EnterRule(_localctx, 46, RULE_forInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207; Match(ControlInstructionStart);
			State = 208; Match(For);
			State = 209; iterationVariable();
			State = 210; Match(In);
			State = 211; parameterValueExpression();
			State = 212; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationVariableContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(QuokkaParser.Identifier, 0); }
		public IterationVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationVariable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationVariableContext iterationVariable() {
		IterationVariableContext _localctx = new IterationVariableContext(Context, State);
		EnterRule(_localctx, 48, RULE_iterationVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndForInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode EndFor() { return GetToken(QuokkaParser.EndFor, 0); }
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public EndForInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endForInstruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndForInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndForInstructionContext endForInstruction() {
		EndForInstructionContext _localctx = new EndForInstructionContext(Context, State);
		EnterRule(_localctx, 50, RULE_endForInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; Match(ControlInstructionStart);
			State = 217; Match(EndFor);
			State = 218; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentBlockContext : ParserRuleContext {
		public ITerminalNode SingleInstructionComment() { return GetToken(QuokkaParser.SingleInstructionComment, 0); }
		public CommentInstructionContext commentInstruction() {
			return GetRuleContext<CommentInstructionContext>(0);
		}
		public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public EndCommentInstructionContext endCommentInstruction() {
			return GetRuleContext<EndCommentInstructionContext>(0);
		}
		public CommentBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentBlockContext commentBlock() {
		CommentBlockContext _localctx = new CommentBlockContext(Context, State);
		EnterRule(_localctx, 52, RULE_commentBlock);
		try {
			State = 225;
			switch (TokenStream.La(1)) {
			case SingleInstructionComment:
				EnterOuterAlt(_localctx, 1);
				{
				State = 220; Match(SingleInstructionComment);
				}
				break;
			case ControlInstructionStart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 221; commentInstruction();
				State = 222; templateBlock();
				State = 223; endCommentInstruction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode Comment() { return GetToken(QuokkaParser.Comment, 0); }
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public CommentInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentInstruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentInstructionContext commentInstruction() {
		CommentInstructionContext _localctx = new CommentInstructionContext(Context, State);
		EnterRule(_localctx, 54, RULE_commentInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 227; Match(ControlInstructionStart);
			State = 228; Match(Comment);
			State = 229; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndCommentInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode EndComment() { return GetToken(QuokkaParser.EndComment, 0); }
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public EndCommentInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endCommentInstruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndCommentInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndCommentInstructionContext endCommentInstruction() {
		EndCommentInstructionContext _localctx = new EndCommentInstructionContext(Context, State);
		EnterRule(_localctx, 56, RULE_endCommentInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(ControlInstructionStart);
			State = 232; Match(EndComment);
			State = 233; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		public ITerminalNode[] Or() { return GetTokens(QuokkaParser.Or); }
		public ITerminalNode Or(int i) {
			return GetToken(QuokkaParser.Or, i);
		}
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		BooleanExpressionContext _localctx = new BooleanExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_booleanExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; andExpression();
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Or) {
				{
				{
				State = 236; Match(Or);
				State = 237; andExpression();
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public BooleanAtomContext[] booleanAtom() {
			return GetRuleContexts<BooleanAtomContext>();
		}
		public BooleanAtomContext booleanAtom(int i) {
			return GetRuleContext<BooleanAtomContext>(i);
		}
		public ITerminalNode[] And() { return GetTokens(QuokkaParser.And); }
		public ITerminalNode And(int i) {
			return GetToken(QuokkaParser.And, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 243; booleanAtom();
			State = 248;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==And) {
				{
				{
				State = 244; Match(And);
				State = 245; booleanAtom();
				}
				}
				State = 250;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		public ITerminalNode Not() { return GetToken(QuokkaParser.Not, 0); }
		public BooleanAtomContext booleanAtom() {
			return GetRuleContext<BooleanAtomContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_notExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; Match(Not);
			State = 252; booleanAtom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedBooleanExpressionContext : ParserRuleContext {
		public ITerminalNode LeftParen() { return GetToken(QuokkaParser.LeftParen, 0); }
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(QuokkaParser.RightParen, 0); }
		public ParenthesizedBooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedBooleanExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedBooleanExpressionContext parenthesizedBooleanExpression() {
		ParenthesizedBooleanExpressionContext _localctx = new ParenthesizedBooleanExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_parenthesizedBooleanExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254; Match(LeftParen);
			State = 255; booleanExpression();
			State = 256; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanAtomContext : ParserRuleContext {
		public ParameterValueExpressionContext parameterValueExpression() {
			return GetRuleContext<ParameterValueExpressionContext>(0);
		}
		public ArithmeticComparisonExpressionContext arithmeticComparisonExpression() {
			return GetRuleContext<ArithmeticComparisonExpressionContext>(0);
		}
		public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		public ParenthesizedBooleanExpressionContext parenthesizedBooleanExpression() {
			return GetRuleContext<ParenthesizedBooleanExpressionContext>(0);
		}
		public BooleanAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanAtom; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanAtomContext booleanAtom() {
		BooleanAtomContext _localctx = new BooleanAtomContext(Context, State);
		EnterRule(_localctx, 66, RULE_booleanAtom);
		try {
			State = 262;
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258; parameterValueExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259; arithmeticComparisonExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 260; notExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 261; parenthesizedBooleanExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticComparisonExpressionContext : ParserRuleContext {
		public ArithmeticExpressionContext[] arithmeticExpression() {
			return GetRuleContexts<ArithmeticExpressionContext>();
		}
		public ArithmeticExpressionContext arithmeticExpression(int i) {
			return GetRuleContext<ArithmeticExpressionContext>(i);
		}
		public ITerminalNode Equals() { return GetToken(QuokkaParser.Equals, 0); }
		public ITerminalNode NotEquals() { return GetToken(QuokkaParser.NotEquals, 0); }
		public ITerminalNode LessThan() { return GetToken(QuokkaParser.LessThan, 0); }
		public ITerminalNode GreaterThan() { return GetToken(QuokkaParser.GreaterThan, 0); }
		public ITerminalNode LessThanOrEquals() { return GetToken(QuokkaParser.LessThanOrEquals, 0); }
		public ITerminalNode GreaterThanOrEquals() { return GetToken(QuokkaParser.GreaterThanOrEquals, 0); }
		public ArithmeticComparisonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticComparisonExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticComparisonExpressionContext arithmeticComparisonExpression() {
		ArithmeticComparisonExpressionContext _localctx = new ArithmeticComparisonExpressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_arithmeticComparisonExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; arithmeticExpression();
			State = 265;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equals) | (1L << NotEquals) | (1L << GreaterThan) | (1L << LessThan) | (1L << GreaterThanOrEquals) | (1L << LessThanOrEquals))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 266; arithmeticExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticExpressionContext : ParserRuleContext {
		public MultiplicationExpressionContext multiplicationExpression() {
			return GetRuleContext<MultiplicationExpressionContext>(0);
		}
		public PlusOperandContext[] plusOperand() {
			return GetRuleContexts<PlusOperandContext>();
		}
		public PlusOperandContext plusOperand(int i) {
			return GetRuleContext<PlusOperandContext>(i);
		}
		public MinusOperandContext[] minusOperand() {
			return GetRuleContexts<MinusOperandContext>();
		}
		public MinusOperandContext minusOperand(int i) {
			return GetRuleContext<MinusOperandContext>(i);
		}
		public ArithmeticExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticExpressionContext arithmeticExpression() {
		ArithmeticExpressionContext _localctx = new ArithmeticExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_arithmeticExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268; multiplicationExpression();
			State = 273;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Plus || _la==Minus) {
				{
				State = 271;
				switch (TokenStream.La(1)) {
				case Plus:
					{
					State = 269; plusOperand();
					}
					break;
				case Minus:
					{
					State = 270; minusOperand();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 275;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlusOperandContext : ParserRuleContext {
		public ITerminalNode Plus() { return GetToken(QuokkaParser.Plus, 0); }
		public MultiplicationExpressionContext multiplicationExpression() {
			return GetRuleContext<MultiplicationExpressionContext>(0);
		}
		public PlusOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plusOperand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlusOperandContext plusOperand() {
		PlusOperandContext _localctx = new PlusOperandContext(Context, State);
		EnterRule(_localctx, 72, RULE_plusOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276; Match(Plus);
			State = 277; multiplicationExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MinusOperandContext : ParserRuleContext {
		public ITerminalNode Minus() { return GetToken(QuokkaParser.Minus, 0); }
		public MultiplicationExpressionContext multiplicationExpression() {
			return GetRuleContext<MultiplicationExpressionContext>(0);
		}
		public MinusOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_minusOperand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MinusOperandContext minusOperand() {
		MinusOperandContext _localctx = new MinusOperandContext(Context, State);
		EnterRule(_localctx, 74, RULE_minusOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(Minus);
			State = 280; multiplicationExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationExpressionContext : ParserRuleContext {
		public ArithmeticAtomContext arithmeticAtom() {
			return GetRuleContext<ArithmeticAtomContext>(0);
		}
		public MultiplicationOperandContext[] multiplicationOperand() {
			return GetRuleContexts<MultiplicationOperandContext>();
		}
		public MultiplicationOperandContext multiplicationOperand(int i) {
			return GetRuleContext<MultiplicationOperandContext>(i);
		}
		public DivisionOperandContext[] divisionOperand() {
			return GetRuleContexts<DivisionOperandContext>();
		}
		public DivisionOperandContext divisionOperand(int i) {
			return GetRuleContext<DivisionOperandContext>(i);
		}
		public MultiplicationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicationExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicationExpressionContext multiplicationExpression() {
		MultiplicationExpressionContext _localctx = new MultiplicationExpressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_multiplicationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; arithmeticAtom();
			State = 287;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Multiply || _la==Divide) {
				{
				State = 285;
				switch (TokenStream.La(1)) {
				case Multiply:
					{
					State = 283; multiplicationOperand();
					}
					break;
				case Divide:
					{
					State = 284; divisionOperand();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 289;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationOperandContext : ParserRuleContext {
		public ITerminalNode Multiply() { return GetToken(QuokkaParser.Multiply, 0); }
		public ArithmeticAtomContext arithmeticAtom() {
			return GetRuleContext<ArithmeticAtomContext>(0);
		}
		public MultiplicationOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicationOperand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicationOperandContext multiplicationOperand() {
		MultiplicationOperandContext _localctx = new MultiplicationOperandContext(Context, State);
		EnterRule(_localctx, 78, RULE_multiplicationOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; Match(Multiply);
			State = 291; arithmeticAtom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DivisionOperandContext : ParserRuleContext {
		public ITerminalNode Divide() { return GetToken(QuokkaParser.Divide, 0); }
		public ArithmeticAtomContext arithmeticAtom() {
			return GetRuleContext<ArithmeticAtomContext>(0);
		}
		public DivisionOperandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_divisionOperand; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivisionOperand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DivisionOperandContext divisionOperand() {
		DivisionOperandContext _localctx = new DivisionOperandContext(Context, State);
		EnterRule(_localctx, 80, RULE_divisionOperand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(Divide);
			State = 294; arithmeticAtom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegationExpressionContext : ParserRuleContext {
		public ITerminalNode Minus() { return GetToken(QuokkaParser.Minus, 0); }
		public ArithmeticAtomContext arithmeticAtom() {
			return GetRuleContext<ArithmeticAtomContext>(0);
		}
		public NegationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negationExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegationExpressionContext negationExpression() {
		NegationExpressionContext _localctx = new NegationExpressionContext(Context, State);
		EnterRule(_localctx, 82, RULE_negationExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 296; Match(Minus);
			State = 297; arithmeticAtom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticAtomContext : ParserRuleContext {
		public ITerminalNode Number() { return GetToken(QuokkaParser.Number, 0); }
		public ParameterValueExpressionContext parameterValueExpression() {
			return GetRuleContext<ParameterValueExpressionContext>(0);
		}
		public NegationExpressionContext negationExpression() {
			return GetRuleContext<NegationExpressionContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(QuokkaParser.LeftParen, 0); }
		public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(QuokkaParser.RightParen, 0); }
		public ArithmeticAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticAtom; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticAtomContext arithmeticAtom() {
		ArithmeticAtomContext _localctx = new ArithmeticAtomContext(Context, State);
		EnterRule(_localctx, 84, RULE_arithmeticAtom);
		try {
			State = 306;
			switch (TokenStream.La(1)) {
			case Number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 299; Match(Number);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 300; parameterValueExpression();
				}
				break;
			case Minus:
				EnterOuterAlt(_localctx, 3);
				{
				State = 301; negationExpression();
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 4);
				{
				State = 302; Match(LeftParen);
				State = 303; arithmeticExpression();
				State = 304; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3(\x137\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x4)\t)\x4*\t"+
		"*\x4+\t+\x4,\t,\x3\x2\a\x2Z\n\x2\f\x2\xE\x2]\v\x2\x3\x3\x3\x3\x6\x3\x61"+
		"\n\x3\r\x3\xE\x3\x62\x3\x4\x3\x4\x6\x4g\n\x4\r\x4\xE\x4h\x3\x5\x3\x5\x3"+
		"\x5\x5\x5n\n\x5\x3\x6\x6\x6q\n\x6\r\x6\xE\x6r\x3\a\x3\a\x3\a\x5\ax\n\a"+
		"\x3\a\x3\a\x3\b\x3\b\x5\b~\n\b\x3\t\x3\t\x3\n\x3\n\x3\n\x5\n\x85\n\n\x3"+
		"\v\x3\v\x5\v\x89\n\v\x3\f\x3\f\x6\f\x8D\n\f\r\f\xE\f\x8E\x3\r\x3\r\x5"+
		"\r\x93\n\r\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x99\n\xE\f\xE\xE\xE\x9C\v\xE\x3"+
		"\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\a\x10\xA4\n\x10\f\x10\xE\x10\xA7\v"+
		"\x10\x3\x10\x5\x10\xAA\n\x10\x3\x10\x3\x10\x3\x11\x3\x11\x5\x11\xB0\n"+
		"\x11\x3\x12\x3\x12\x5\x12\xB4\n\x12\x3\x13\x3\x13\x5\x13\xB8\n\x13\x3"+
		"\x14\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3"+
		"\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x5"+
		"\x18\xCE\n\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19"+
		"\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1C\x3\x1C\x5\x1C\xE4\n\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\a\x1F\xF1\n\x1F\f\x1F\xE\x1F\xF4"+
		"\v\x1F\x3 \x3 \x3 \a \xF9\n \f \xE \xFC\v \x3!\x3!\x3!\x3\"\x3\"\x3\""+
		"\x3\"\x3#\x3#\x3#\x3#\x5#\x109\n#\x3$\x3$\x3$\x3$\x3%\x3%\x3%\a%\x112"+
		"\n%\f%\xE%\x115\v%\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3(\x3(\x3(\a(\x120\n(\f"+
		"(\xE(\x123\v(\x3)\x3)\x3)\x3*\x3*\x3*\x3+\x3+\x3+\x3,\x3,\x3,\x3,\x3,"+
		"\x3,\x3,\x5,\x135\n,\x3,\x2\x2-\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18"+
		"\x1A\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJLNPRTV\x2\x3"+
		"\x3\x2\x1A\x1F\x12D\x2[\x3\x2\x2\x2\x4`\x3\x2\x2\x2\x6\x66\x3\x2\x2\x2"+
		"\bm\x3\x2\x2\x2\np\x3\x2\x2\x2\ft\x3\x2\x2\x2\xE{\x3\x2\x2\x2\x10\x7F"+
		"\x3\x2\x2\x2\x12\x81\x3\x2\x2\x2\x14\x86\x3\x2\x2\x2\x16\x8C\x3\x2\x2"+
		"\x2\x18\x90\x3\x2\x2\x2\x1A\x94\x3\x2\x2\x2\x1C\x9F\x3\x2\x2\x2\x1E\xA1"+
		"\x3\x2\x2\x2 \xAD\x3\x2\x2\x2\"\xB1\x3\x2\x2\x2$\xB5\x3\x2\x2\x2&\xB9"+
		"\x3\x2\x2\x2(\xBE\x3\x2\x2\x2*\xC3\x3\x2\x2\x2,\xC7\x3\x2\x2\x2.\xCB\x3"+
		"\x2\x2\x2\x30\xD1\x3\x2\x2\x2\x32\xD8\x3\x2\x2\x2\x34\xDA\x3\x2\x2\x2"+
		"\x36\xE3\x3\x2\x2\x2\x38\xE5\x3\x2\x2\x2:\xE9\x3\x2\x2\x2<\xED\x3\x2\x2"+
		"\x2>\xF5\x3\x2\x2\x2@\xFD\x3\x2\x2\x2\x42\x100\x3\x2\x2\x2\x44\x108\x3"+
		"\x2\x2\x2\x46\x10A\x3\x2\x2\x2H\x10E\x3\x2\x2\x2J\x116\x3\x2\x2\x2L\x119"+
		"\x3\x2\x2\x2N\x11C\x3\x2\x2\x2P\x124\x3\x2\x2\x2R\x127\x3\x2\x2\x2T\x12A"+
		"\x3\x2\x2\x2V\x134\x3\x2\x2\x2XZ\x5\x4\x3\x2YX\x3\x2\x2\x2Z]\x3\x2\x2"+
		"\x2[Y\x3\x2\x2\x2[\\\x3\x2\x2\x2\\\x3\x3\x2\x2\x2][\x3\x2\x2\x2^\x61\x5"+
		"\x6\x4\x2_\x61\x5\b\x5\x2`^\x3\x2\x2\x2`_\x3\x2\x2\x2\x61\x62\x3\x2\x2"+
		"\x2\x62`\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\x5\x3\x2\x2\x2\x64g\x5\n"+
		"\x6\x2\x65g\x5\f\a\x2\x66\x64\x3\x2\x2\x2\x66\x65\x3\x2\x2\x2gh\x3\x2"+
		"\x2\x2h\x66\x3\x2\x2\x2hi\x3\x2\x2\x2i\a\x3\x2\x2\x2jn\x5\x1E\x10\x2k"+
		"n\x5.\x18\x2ln\x5\x36\x1C\x2mj\x3\x2\x2\x2mk\x3\x2\x2\x2ml\x3\x2\x2\x2"+
		"n\t\x3\x2\x2\x2oq\a\x6\x2\x2po\x3\x2\x2\x2qr\x3\x2\x2\x2rp\x3\x2\x2\x2"+
		"rs\x3\x2\x2\x2s\v\x3\x2\x2\x2tw\a\x4\x2\x2ux\x5\x14\v\x2vx\x5H%\x2wu\x3"+
		"\x2\x2\x2wv\x3\x2\x2\x2xy\x3\x2\x2\x2yz\a\a\x2\x2z\r\x3\x2\x2\x2{}\x5"+
		"\x10\t\x2|~\x5\x12\n\x2}|\x3\x2\x2\x2}~\x3\x2\x2\x2~\xF\x3\x2\x2\x2\x7F"+
		"\x80\a\'\x2\x2\x80\x11\x3\x2\x2\x2\x81\x82\a\x12\x2\x2\x82\x84\a\'\x2"+
		"\x2\x83\x85\x5\x12\n\x2\x84\x83\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85\x13"+
		"\x3\x2\x2\x2\x86\x88\x5\xE\b\x2\x87\x89\x5\x16\f\x2\x88\x87\x3\x2\x2\x2"+
		"\x88\x89\x3\x2\x2\x2\x89\x15\x3\x2\x2\x2\x8A\x8B\a\x13\x2\x2\x8B\x8D\x5"+
		"\x18\r\x2\x8C\x8A\x3\x2\x2\x2\x8D\x8E\x3\x2\x2\x2\x8E\x8C\x3\x2\x2\x2"+
		"\x8E\x8F\x3\x2\x2\x2\x8F\x17\x3\x2\x2\x2\x90\x92\a\'\x2\x2\x91\x93\x5"+
		"\x1A\xE\x2\x92\x91\x3\x2\x2\x2\x92\x93\x3\x2\x2\x2\x93\x19\x3\x2\x2\x2"+
		"\x94\x95\a\x15\x2\x2\x95\x9A\x5\x1C\xF\x2\x96\x97\a\x14\x2\x2\x97\x99"+
		"\x5\x1C\xF\x2\x98\x96\x3\x2\x2\x2\x99\x9C\x3\x2\x2\x2\x9A\x98\x3\x2\x2"+
		"\x2\x9A\x9B\x3\x2\x2\x2\x9B\x9D\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9D\x9E"+
		"\a\x16\x2\x2\x9E\x1B\x3\x2\x2\x2\x9F\xA0\a&\x2\x2\xA0\x1D\x3\x2\x2\x2"+
		"\xA1\xA5\x5 \x11\x2\xA2\xA4\x5$\x13\x2\xA3\xA2\x3\x2\x2\x2\xA4\xA7\x3"+
		"\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA5\xA6\x3\x2\x2\x2\xA6\xA9\x3\x2\x2\x2"+
		"\xA7\xA5\x3\x2\x2\x2\xA8\xAA\x5\"\x12\x2\xA9\xA8\x3\x2\x2\x2\xA9\xAA\x3"+
		"\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB\xAC\x5,\x17\x2\xAC\x1F\x3\x2\x2\x2\xAD"+
		"\xAF\x5&\x14\x2\xAE\xB0\x5\x4\x3\x2\xAF\xAE\x3\x2\x2\x2\xAF\xB0\x3\x2"+
		"\x2\x2\xB0!\x3\x2\x2\x2\xB1\xB3\x5*\x16\x2\xB2\xB4\x5\x4\x3\x2\xB3\xB2"+
		"\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4#\x3\x2\x2\x2\xB5\xB7\x5(\x15\x2\xB6"+
		"\xB8\x5\x4\x3\x2\xB7\xB6\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8%\x3\x2\x2"+
		"\x2\xB9\xBA\a\x5\x2\x2\xBA\xBB\a\b\x2\x2\xBB\xBC\x5<\x1F\x2\xBC\xBD\a"+
		"\a\x2\x2\xBD\'\x3\x2\x2\x2\xBE\xBF\a\x5\x2\x2\xBF\xC0\a\f\x2\x2\xC0\xC1"+
		"\x5<\x1F\x2\xC1\xC2\a\a\x2\x2\xC2)\x3\x2\x2\x2\xC3\xC4\a\x5\x2\x2\xC4"+
		"\xC5\a\v\x2\x2\xC5\xC6\a\a\x2\x2\xC6+\x3\x2\x2\x2\xC7\xC8\a\x5\x2\x2\xC8"+
		"\xC9\a\t\x2\x2\xC9\xCA\a\a\x2\x2\xCA-\x3\x2\x2\x2\xCB\xCD\x5\x30\x19\x2"+
		"\xCC\xCE\x5\x4\x3\x2\xCD\xCC\x3\x2\x2\x2\xCD\xCE\x3\x2\x2\x2\xCE\xCF\x3"+
		"\x2\x2\x2\xCF\xD0\x5\x34\x1B\x2\xD0/\x3\x2\x2\x2\xD1\xD2\a\x5\x2\x2\xD2"+
		"\xD3\a\r\x2\x2\xD3\xD4\x5\x32\x1A\x2\xD4\xD5\a\xE\x2\x2\xD5\xD6\x5\xE"+
		"\b\x2\xD6\xD7\a\a\x2\x2\xD7\x31\x3\x2\x2\x2\xD8\xD9\a\'\x2\x2\xD9\x33"+
		"\x3\x2\x2\x2\xDA\xDB\a\x5\x2\x2\xDB\xDC\a\xF\x2\x2\xDC\xDD\a\a\x2\x2\xDD"+
		"\x35\x3\x2\x2\x2\xDE\xE4\a\x3\x2\x2\xDF\xE0\x5\x38\x1D\x2\xE0\xE1\x5\x4"+
		"\x3\x2\xE1\xE2\x5:\x1E\x2\xE2\xE4\x3\x2\x2\x2\xE3\xDE\x3\x2\x2\x2\xE3"+
		"\xDF\x3\x2\x2\x2\xE4\x37\x3\x2\x2\x2\xE5\xE6\a\x5\x2\x2\xE6\xE7\a\x10"+
		"\x2\x2\xE7\xE8\a\a\x2\x2\xE8\x39\x3\x2\x2\x2\xE9\xEA\a\x5\x2\x2\xEA\xEB"+
		"\a\x11\x2\x2\xEB\xEC\a\a\x2\x2\xEC;\x3\x2\x2\x2\xED\xF2\x5> \x2\xEE\xEF"+
		"\a\x18\x2\x2\xEF\xF1\x5> \x2\xF0\xEE\x3\x2\x2\x2\xF1\xF4\x3\x2\x2\x2\xF2"+
		"\xF0\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2\xF3=\x3\x2\x2\x2\xF4\xF2\x3\x2\x2"+
		"\x2\xF5\xFA\x5\x44#\x2\xF6\xF7\a\x17\x2\x2\xF7\xF9\x5\x44#\x2\xF8\xF6"+
		"\x3\x2\x2\x2\xF9\xFC\x3\x2\x2\x2\xFA\xF8\x3\x2\x2\x2\xFA\xFB\x3\x2\x2"+
		"\x2\xFB?\x3\x2\x2\x2\xFC\xFA\x3\x2\x2\x2\xFD\xFE\a\x19\x2\x2\xFE\xFF\x5"+
		"\x44#\x2\xFF\x41\x3\x2\x2\x2\x100\x101\a\x15\x2\x2\x101\x102\x5<\x1F\x2"+
		"\x102\x103\a\x16\x2\x2\x103\x43\x3\x2\x2\x2\x104\x109\x5\xE\b\x2\x105"+
		"\x109\x5\x46$\x2\x106\x109\x5@!\x2\x107\x109\x5\x42\"\x2\x108\x104\x3"+
		"\x2\x2\x2\x108\x105\x3\x2\x2\x2\x108\x106\x3\x2\x2\x2\x108\x107\x3\x2"+
		"\x2\x2\x109\x45\x3\x2\x2\x2\x10A\x10B\x5H%\x2\x10B\x10C\t\x2\x2\x2\x10C"+
		"\x10D\x5H%\x2\x10DG\x3\x2\x2\x2\x10E\x113\x5N(\x2\x10F\x112\x5J&\x2\x110"+
		"\x112\x5L\'\x2\x111\x10F\x3\x2\x2\x2\x111\x110\x3\x2\x2\x2\x112\x115\x3"+
		"\x2\x2\x2\x113\x111\x3\x2\x2\x2\x113\x114\x3\x2\x2\x2\x114I\x3\x2\x2\x2"+
		"\x115\x113\x3\x2\x2\x2\x116\x117\a \x2\x2\x117\x118\x5N(\x2\x118K\x3\x2"+
		"\x2\x2\x119\x11A\a!\x2\x2\x11A\x11B\x5N(\x2\x11BM\x3\x2\x2\x2\x11C\x121"+
		"\x5V,\x2\x11D\x120\x5P)\x2\x11E\x120\x5R*\x2\x11F\x11D\x3\x2\x2\x2\x11F"+
		"\x11E\x3\x2\x2\x2\x120\x123\x3\x2\x2\x2\x121\x11F\x3\x2\x2\x2\x121\x122"+
		"\x3\x2\x2\x2\x122O\x3\x2\x2\x2\x123\x121\x3\x2\x2\x2\x124\x125\a\"\x2"+
		"\x2\x125\x126\x5V,\x2\x126Q\x3\x2\x2\x2\x127\x128\a#\x2\x2\x128\x129\x5"+
		"V,\x2\x129S\x3\x2\x2\x2\x12A\x12B\a!\x2\x2\x12B\x12C\x5V,\x2\x12CU\x3"+
		"\x2\x2\x2\x12D\x135\a$\x2\x2\x12E\x135\x5\xE\b\x2\x12F\x135\x5T+\x2\x130"+
		"\x131\a\x15\x2\x2\x131\x132\x5H%\x2\x132\x133\a\x16\x2\x2\x133\x135\x3"+
		"\x2\x2\x2\x134\x12D\x3\x2\x2\x2\x134\x12E\x3\x2\x2\x2\x134\x12F\x3\x2"+
		"\x2\x2\x134\x130\x3\x2\x2\x2\x135W\x3\x2\x2\x2\x1F[`\x62\x66hmrw}\x84"+
		"\x88\x8E\x92\x9A\xA5\xA9\xAF\xB3\xB7\xCD\xE3\xF2\xFA\x108\x111\x113\x11F"+
		"\x121\x134";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Quokka.Generated
