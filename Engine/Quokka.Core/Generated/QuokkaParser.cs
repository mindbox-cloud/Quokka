//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\code\Quokka\Grammar\Quokka\Quokka.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Quokka.Generated {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class QuokkaParser : Parser {
	public const int
		SingleInstructionComment=1, OutputInstructionStart=2, ControlInstructionStart=3, 
		Fluff=4, InstructionEnd=5, If=6, EndIf=7, End=8, Else=9, ElseIf=10, For=11, 
		In=12, EndFor=13, Comment=14, EndComment=15, MemberAccessOperator=16, 
		Pipe=17, CommaSeparator=18, LeftParen=19, RightParen=20, And=21, Or=22, 
		Not=23, Equals=24, NotEquals=25, GreaterThan=26, LessThan=27, GreaterThanOrEquals=28, 
		LessThanOrEquals=29, Plus=30, Minus=31, Multiply=32, Divide=33, Number=34, 
		Digit=35, DoubleQuotedString=36, Identifier=37, WhiteSpace=38;
	public const int
		RULE_template = 0, RULE_templateBlock = 1, RULE_staticBlock = 2, RULE_dynamicBlock = 3, 
		RULE_constantBlock = 4, RULE_outputInstruction = 5, RULE_parameterValueExpression = 6, 
		RULE_filteredParameterValueExpression = 7, RULE_filterChain = 8, RULE_filter = 9, 
		RULE_filterArgumentList = 10, RULE_filterArgumentValue = 11, RULE_parameterExpression = 12, 
		RULE_parameterMemberExpression = 13, RULE_memberAccessExpression = 14, 
		RULE_ifStatement = 15, RULE_ifCondition = 16, RULE_elseCondition = 17, 
		RULE_elseIfCondition = 18, RULE_ifInstruction = 19, RULE_elseIfInstruction = 20, 
		RULE_elseInstruction = 21, RULE_endIfInstruction = 22, RULE_forStatement = 23, 
		RULE_forInstruction = 24, RULE_iterationVariable = 25, RULE_endForInstruction = 26, 
		RULE_commentBlock = 27, RULE_commentInstruction = 28, RULE_endCommentInstruction = 29, 
		RULE_booleanExpression = 30, RULE_andExpression = 31, RULE_notExpression = 32, 
		RULE_booleanAtom = 33, RULE_arithmeticComparisonExpression = 34, RULE_arithmeticExpression = 35, 
		RULE_multiplicationExpression = 36, RULE_negationExpression = 37, RULE_arithmeticAtom = 38;
	public static readonly string[] ruleNames = {
		"template", "templateBlock", "staticBlock", "dynamicBlock", "constantBlock", 
		"outputInstruction", "parameterValueExpression", "filteredParameterValueExpression", 
		"filterChain", "filter", "filterArgumentList", "filterArgumentValue", 
		"parameterExpression", "parameterMemberExpression", "memberAccessExpression", 
		"ifStatement", "ifCondition", "elseCondition", "elseIfCondition", "ifInstruction", 
		"elseIfInstruction", "elseInstruction", "endIfInstruction", "forStatement", 
		"forInstruction", "iterationVariable", "endForInstruction", "commentBlock", 
		"commentInstruction", "endCommentInstruction", "booleanExpression", "andExpression", 
		"notExpression", "booleanAtom", "arithmeticComparisonExpression", "arithmeticExpression", 
		"multiplicationExpression", "negationExpression", "arithmeticAtom"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'${'", "'@{'", null, "'}'", null, null, null, null, null, 
		null, null, null, null, null, "'.'", "'|'", "','", "'('", "')'", null, 
		null, null, "'='", "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", "'-'", 
		"'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleInstructionComment", "OutputInstructionStart", "ControlInstructionStart", 
		"Fluff", "InstructionEnd", "If", "EndIf", "End", "Else", "ElseIf", "For", 
		"In", "EndFor", "Comment", "EndComment", "MemberAccessOperator", "Pipe", 
		"CommaSeparator", "LeftParen", "RightParen", "And", "Or", "Not", "Equals", 
		"NotEquals", "GreaterThan", "LessThan", "GreaterThanOrEquals", "LessThanOrEquals", 
		"Plus", "Minus", "Multiply", "Divide", "Number", "Digit", "DoubleQuotedString", 
		"Identifier", "WhiteSpace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Quokka.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public QuokkaParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class TemplateContext : ParserRuleContext {
		public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterTemplate(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitTemplate(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 0, RULE_template);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; templateBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateBlockContext : ParserRuleContext {
		public StaticBlockContext[] staticBlock() {
			return GetRuleContexts<StaticBlockContext>();
		}
		public StaticBlockContext staticBlock(int i) {
			return GetRuleContext<StaticBlockContext>(i);
		}
		public DynamicBlockContext[] dynamicBlock() {
			return GetRuleContexts<DynamicBlockContext>();
		}
		public DynamicBlockContext dynamicBlock(int i) {
			return GetRuleContext<DynamicBlockContext>(i);
		}
		public TemplateBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterTemplateBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitTemplateBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateBlockContext templateBlock() {
		TemplateBlockContext _localctx = new TemplateBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_templateBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 82;
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						State = 80; staticBlock();
						}
						break;
					case 2:
						{
						State = 81; dynamicBlock();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 84;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticBlockContext : ParserRuleContext {
		public ConstantBlockContext[] constantBlock() {
			return GetRuleContexts<ConstantBlockContext>();
		}
		public ConstantBlockContext constantBlock(int i) {
			return GetRuleContext<ConstantBlockContext>(i);
		}
		public OutputInstructionContext[] outputInstruction() {
			return GetRuleContexts<OutputInstructionContext>();
		}
		public OutputInstructionContext outputInstruction(int i) {
			return GetRuleContext<OutputInstructionContext>(i);
		}
		public CommentBlockContext[] commentBlock() {
			return GetRuleContexts<CommentBlockContext>();
		}
		public CommentBlockContext commentBlock(int i) {
			return GetRuleContext<CommentBlockContext>(i);
		}
		public StaticBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterStaticBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitStaticBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticBlockContext staticBlock() {
		StaticBlockContext _localctx = new StaticBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_staticBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 89;
					switch (TokenStream.La(1)) {
					case Fluff:
						{
						State = 86; constantBlock();
						}
						break;
					case OutputInstructionStart:
						{
						State = 87; outputInstruction();
						}
						break;
					case SingleInstructionComment:
					case ControlInstructionStart:
						{
						State = 88; commentBlock();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 91;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicBlockContext : ParserRuleContext {
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public DynamicBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterDynamicBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitDynamicBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DynamicBlockContext dynamicBlock() {
		DynamicBlockContext _localctx = new DynamicBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_dynamicBlock);
		try {
			State = 95;
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; ifStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; forStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantBlockContext : ParserRuleContext {
		public ITerminalNode[] Fluff() { return GetTokens(QuokkaParser.Fluff); }
		public ITerminalNode Fluff(int i) {
			return GetToken(QuokkaParser.Fluff, i);
		}
		public ConstantBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterConstantBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitConstantBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantBlockContext constantBlock() {
		ConstantBlockContext _localctx = new ConstantBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_constantBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 97; Match(Fluff);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 100;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputInstructionContext : ParserRuleContext {
		public ITerminalNode OutputInstructionStart() { return GetToken(QuokkaParser.OutputInstructionStart, 0); }
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public FilteredParameterValueExpressionContext filteredParameterValueExpression() {
			return GetRuleContext<FilteredParameterValueExpressionContext>(0);
		}
		public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public OutputInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputInstruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterOutputInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitOutputInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputInstructionContext outputInstruction() {
		OutputInstructionContext _localctx = new OutputInstructionContext(Context, State);
		EnterRule(_localctx, 10, RULE_outputInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102; Match(OutputInstructionStart);
			State = 105;
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 103; filteredParameterValueExpression();
				}
				break;
			case 2:
				{
				State = 104; arithmeticExpression();
				}
				break;
			}
			State = 107; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterValueExpressionContext : ParserRuleContext {
		public ParameterExpressionContext parameterExpression() {
			return GetRuleContext<ParameterExpressionContext>(0);
		}
		public ParameterMemberExpressionContext parameterMemberExpression() {
			return GetRuleContext<ParameterMemberExpressionContext>(0);
		}
		public ParameterValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterValueExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterParameterValueExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitParameterValueExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterValueExpressionContext parameterValueExpression() {
		ParameterValueExpressionContext _localctx = new ParameterValueExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_parameterValueExpression);
		try {
			State = 111;
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109; parameterExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110; parameterMemberExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilteredParameterValueExpressionContext : ParserRuleContext {
		public ParameterValueExpressionContext parameterValueExpression() {
			return GetRuleContext<ParameterValueExpressionContext>(0);
		}
		public FilterChainContext filterChain() {
			return GetRuleContext<FilterChainContext>(0);
		}
		public FilteredParameterValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filteredParameterValueExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterFilteredParameterValueExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitFilteredParameterValueExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilteredParameterValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilteredParameterValueExpressionContext filteredParameterValueExpression() {
		FilteredParameterValueExpressionContext _localctx = new FilteredParameterValueExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_filteredParameterValueExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; parameterValueExpression();
			State = 115;
			_la = TokenStream.La(1);
			if (_la==Pipe) {
				{
				State = 114; filterChain();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterChainContext : ParserRuleContext {
		public ITerminalNode[] Pipe() { return GetTokens(QuokkaParser.Pipe); }
		public ITerminalNode Pipe(int i) {
			return GetToken(QuokkaParser.Pipe, i);
		}
		public FilterContext[] filter() {
			return GetRuleContexts<FilterContext>();
		}
		public FilterContext filter(int i) {
			return GetRuleContext<FilterContext>(i);
		}
		public FilterChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterChain; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterFilterChain(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitFilterChain(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterChainContext filterChain() {
		FilterChainContext _localctx = new FilterChainContext(Context, State);
		EnterRule(_localctx, 16, RULE_filterChain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 117; Match(Pipe);
				State = 118; filter();
				}
				}
				State = 121;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==Pipe );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(QuokkaParser.Identifier, 0); }
		public FilterArgumentListContext filterArgumentList() {
			return GetRuleContext<FilterArgumentListContext>(0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitFilter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 18, RULE_filter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 123; Match(Identifier);
			State = 125;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 124; filterArgumentList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterArgumentListContext : ParserRuleContext {
		public ITerminalNode LeftParen() { return GetToken(QuokkaParser.LeftParen, 0); }
		public FilterArgumentValueContext[] filterArgumentValue() {
			return GetRuleContexts<FilterArgumentValueContext>();
		}
		public FilterArgumentValueContext filterArgumentValue(int i) {
			return GetRuleContext<FilterArgumentValueContext>(i);
		}
		public ITerminalNode RightParen() { return GetToken(QuokkaParser.RightParen, 0); }
		public ITerminalNode[] CommaSeparator() { return GetTokens(QuokkaParser.CommaSeparator); }
		public ITerminalNode CommaSeparator(int i) {
			return GetToken(QuokkaParser.CommaSeparator, i);
		}
		public FilterArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterArgumentList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterFilterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitFilterArgumentList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterArgumentListContext filterArgumentList() {
		FilterArgumentListContext _localctx = new FilterArgumentListContext(Context, State);
		EnterRule(_localctx, 20, RULE_filterArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(LeftParen);
			State = 128; filterArgumentValue();
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CommaSeparator) {
				{
				{
				State = 129; Match(CommaSeparator);
				State = 130; filterArgumentValue();
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 136; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterArgumentValueContext : ParserRuleContext {
		public ITerminalNode DoubleQuotedString() { return GetToken(QuokkaParser.DoubleQuotedString, 0); }
		public FilterArgumentValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterArgumentValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterFilterArgumentValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitFilterArgumentValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterArgumentValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterArgumentValueContext filterArgumentValue() {
		FilterArgumentValueContext _localctx = new FilterArgumentValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_filterArgumentValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; Match(DoubleQuotedString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterExpressionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(QuokkaParser.Identifier, 0); }
		public ParameterExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterParameterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitParameterExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterExpressionContext parameterExpression() {
		ParameterExpressionContext _localctx = new ParameterExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_parameterExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterMemberExpressionContext : ParserRuleContext {
		public ParameterExpressionContext parameterExpression() {
			return GetRuleContext<ParameterExpressionContext>(0);
		}
		public MemberAccessExpressionContext memberAccessExpression() {
			return GetRuleContext<MemberAccessExpressionContext>(0);
		}
		public ParameterMemberExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterMemberExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterParameterMemberExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitParameterMemberExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterMemberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterMemberExpressionContext parameterMemberExpression() {
		ParameterMemberExpressionContext _localctx = new ParameterMemberExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_parameterMemberExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 142; parameterExpression();
			State = 143; memberAccessExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessExpressionContext : ParserRuleContext {
		public ITerminalNode MemberAccessOperator() { return GetToken(QuokkaParser.MemberAccessOperator, 0); }
		public ITerminalNode Identifier() { return GetToken(QuokkaParser.Identifier, 0); }
		public MemberAccessExpressionContext memberAccessExpression() {
			return GetRuleContext<MemberAccessExpressionContext>(0);
		}
		public MemberAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccessExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessExpressionContext memberAccessExpression() {
		MemberAccessExpressionContext _localctx = new MemberAccessExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_memberAccessExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; Match(MemberAccessOperator);
			State = 146; Match(Identifier);
			State = 148;
			_la = TokenStream.La(1);
			if (_la==MemberAccessOperator) {
				{
				State = 147; memberAccessExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public IfConditionContext ifCondition() {
			return GetRuleContext<IfConditionContext>(0);
		}
		public EndIfInstructionContext endIfInstruction() {
			return GetRuleContext<EndIfInstructionContext>(0);
		}
		public ElseIfConditionContext[] elseIfCondition() {
			return GetRuleContexts<ElseIfConditionContext>();
		}
		public ElseIfConditionContext elseIfCondition(int i) {
			return GetRuleContext<ElseIfConditionContext>(i);
		}
		public ElseConditionContext elseCondition() {
			return GetRuleContext<ElseConditionContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 150; ifCondition();
			State = 154;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 151; elseIfCondition();
					}
					} 
				}
				State = 156;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 158;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 157; elseCondition();
				}
				break;
			}
			State = 160; endIfInstruction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionContext : ParserRuleContext {
		public IfInstructionContext ifInstruction() {
			return GetRuleContext<IfInstructionContext>(0);
		}
		public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public IfConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterIfCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitIfCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionContext ifCondition() {
		IfConditionContext _localctx = new IfConditionContext(Context, State);
		EnterRule(_localctx, 32, RULE_ifCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; ifInstruction();
			State = 163; templateBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseConditionContext : ParserRuleContext {
		public ElseInstructionContext elseInstruction() {
			return GetRuleContext<ElseInstructionContext>(0);
		}
		public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public ElseConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterElseCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitElseCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseConditionContext elseCondition() {
		ElseConditionContext _localctx = new ElseConditionContext(Context, State);
		EnterRule(_localctx, 34, RULE_elseCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165; elseInstruction();
			State = 166; templateBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfConditionContext : ParserRuleContext {
		public ElseIfInstructionContext elseIfInstruction() {
			return GetRuleContext<ElseIfInstructionContext>(0);
		}
		public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public ElseIfConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfCondition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterElseIfCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitElseIfCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfConditionContext elseIfCondition() {
		ElseIfConditionContext _localctx = new ElseIfConditionContext(Context, State);
		EnterRule(_localctx, 36, RULE_elseIfCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; elseIfInstruction();
			State = 169; templateBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode If() { return GetToken(QuokkaParser.If, 0); }
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public IfInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifInstruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterIfInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitIfInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfInstructionContext ifInstruction() {
		IfInstructionContext _localctx = new IfInstructionContext(Context, State);
		EnterRule(_localctx, 38, RULE_ifInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(ControlInstructionStart);
			State = 172; Match(If);
			State = 173; booleanExpression();
			State = 174; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode ElseIf() { return GetToken(QuokkaParser.ElseIf, 0); }
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public ElseIfInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfInstruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterElseIfInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitElseIfInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfInstructionContext elseIfInstruction() {
		ElseIfInstructionContext _localctx = new ElseIfInstructionContext(Context, State);
		EnterRule(_localctx, 40, RULE_elseIfInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; Match(ControlInstructionStart);
			State = 177; Match(ElseIf);
			State = 178; booleanExpression();
			State = 179; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode Else() { return GetToken(QuokkaParser.Else, 0); }
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public ElseInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseInstruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterElseInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitElseInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseInstructionContext elseInstruction() {
		ElseInstructionContext _localctx = new ElseInstructionContext(Context, State);
		EnterRule(_localctx, 42, RULE_elseInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(ControlInstructionStart);
			State = 182; Match(Else);
			State = 183; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndIfInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode EndIf() { return GetToken(QuokkaParser.EndIf, 0); }
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public EndIfInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endIfInstruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterEndIfInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitEndIfInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndIfInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndIfInstructionContext endIfInstruction() {
		EndIfInstructionContext _localctx = new EndIfInstructionContext(Context, State);
		EnterRule(_localctx, 44, RULE_endIfInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; Match(ControlInstructionStart);
			State = 186; Match(EndIf);
			State = 187; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ForInstructionContext forInstruction() {
			return GetRuleContext<ForInstructionContext>(0);
		}
		public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public EndForInstructionContext endForInstruction() {
			return GetRuleContext<EndForInstructionContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; forInstruction();
			State = 190; templateBlock();
			State = 191; endForInstruction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode For() { return GetToken(QuokkaParser.For, 0); }
		public IterationVariableContext iterationVariable() {
			return GetRuleContext<IterationVariableContext>(0);
		}
		public ITerminalNode In() { return GetToken(QuokkaParser.In, 0); }
		public ParameterValueExpressionContext parameterValueExpression() {
			return GetRuleContext<ParameterValueExpressionContext>(0);
		}
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public ForInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInstruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterForInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitForInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInstructionContext forInstruction() {
		ForInstructionContext _localctx = new ForInstructionContext(Context, State);
		EnterRule(_localctx, 48, RULE_forInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(ControlInstructionStart);
			State = 194; Match(For);
			State = 195; iterationVariable();
			State = 196; Match(In);
			State = 197; parameterValueExpression();
			State = 198; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationVariableContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(QuokkaParser.Identifier, 0); }
		public IterationVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationVariable; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterIterationVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitIterationVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationVariableContext iterationVariable() {
		IterationVariableContext _localctx = new IterationVariableContext(Context, State);
		EnterRule(_localctx, 50, RULE_iterationVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndForInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode EndFor() { return GetToken(QuokkaParser.EndFor, 0); }
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public EndForInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endForInstruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterEndForInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitEndForInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndForInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndForInstructionContext endForInstruction() {
		EndForInstructionContext _localctx = new EndForInstructionContext(Context, State);
		EnterRule(_localctx, 52, RULE_endForInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 202; Match(ControlInstructionStart);
			State = 203; Match(EndFor);
			State = 204; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentBlockContext : ParserRuleContext {
		public ITerminalNode SingleInstructionComment() { return GetToken(QuokkaParser.SingleInstructionComment, 0); }
		public CommentInstructionContext commentInstruction() {
			return GetRuleContext<CommentInstructionContext>(0);
		}
		public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public EndCommentInstructionContext endCommentInstruction() {
			return GetRuleContext<EndCommentInstructionContext>(0);
		}
		public CommentBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterCommentBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitCommentBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentBlockContext commentBlock() {
		CommentBlockContext _localctx = new CommentBlockContext(Context, State);
		EnterRule(_localctx, 54, RULE_commentBlock);
		try {
			State = 211;
			switch (TokenStream.La(1)) {
			case SingleInstructionComment:
				EnterOuterAlt(_localctx, 1);
				{
				State = 206; Match(SingleInstructionComment);
				}
				break;
			case ControlInstructionStart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207; commentInstruction();
				State = 208; templateBlock();
				State = 209; endCommentInstruction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode Comment() { return GetToken(QuokkaParser.Comment, 0); }
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public CommentInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentInstruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterCommentInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitCommentInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentInstructionContext commentInstruction() {
		CommentInstructionContext _localctx = new CommentInstructionContext(Context, State);
		EnterRule(_localctx, 56, RULE_commentInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 213; Match(ControlInstructionStart);
			State = 214; Match(Comment);
			State = 215; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndCommentInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode EndComment() { return GetToken(QuokkaParser.EndComment, 0); }
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public EndCommentInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endCommentInstruction; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterEndCommentInstruction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitEndCommentInstruction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndCommentInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndCommentInstructionContext endCommentInstruction() {
		EndCommentInstructionContext _localctx = new EndCommentInstructionContext(Context, State);
		EnterRule(_localctx, 58, RULE_endCommentInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(ControlInstructionStart);
			State = 218; Match(EndComment);
			State = 219; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		public ITerminalNode[] Or() { return GetTokens(QuokkaParser.Or); }
		public ITerminalNode Or(int i) {
			return GetToken(QuokkaParser.Or, i);
		}
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterBooleanExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitBooleanExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		BooleanExpressionContext _localctx = new BooleanExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_booleanExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; andExpression();
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Or) {
				{
				{
				State = 222; Match(Or);
				State = 223; andExpression();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public BooleanAtomContext[] booleanAtom() {
			return GetRuleContexts<BooleanAtomContext>();
		}
		public BooleanAtomContext booleanAtom(int i) {
			return GetRuleContext<BooleanAtomContext>(i);
		}
		public ITerminalNode[] And() { return GetTokens(QuokkaParser.And); }
		public ITerminalNode And(int i) {
			return GetToken(QuokkaParser.And, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229; booleanAtom();
			State = 234;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==And) {
				{
				{
				State = 230; Match(And);
				State = 231; booleanAtom();
				}
				}
				State = 236;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		public ITerminalNode Not() { return GetToken(QuokkaParser.Not, 0); }
		public BooleanAtomContext booleanAtom() {
			return GetRuleContext<BooleanAtomContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterNotExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitNotExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 64, RULE_notExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(Not);
			State = 238; booleanAtom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanAtomContext : ParserRuleContext {
		public ParameterValueExpressionContext parameterValueExpression() {
			return GetRuleContext<ParameterValueExpressionContext>(0);
		}
		public ArithmeticComparisonExpressionContext arithmeticComparisonExpression() {
			return GetRuleContext<ArithmeticComparisonExpressionContext>(0);
		}
		public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(QuokkaParser.LeftParen, 0); }
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(QuokkaParser.RightParen, 0); }
		public BooleanAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterBooleanAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitBooleanAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanAtomContext booleanAtom() {
		BooleanAtomContext _localctx = new BooleanAtomContext(Context, State);
		EnterRule(_localctx, 66, RULE_booleanAtom);
		try {
			State = 247;
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 240; parameterValueExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 241; arithmeticComparisonExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 242; notExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 243; Match(LeftParen);
				State = 244; booleanExpression();
				State = 245; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticComparisonExpressionContext : ParserRuleContext {
		public ArithmeticExpressionContext[] arithmeticExpression() {
			return GetRuleContexts<ArithmeticExpressionContext>();
		}
		public ArithmeticExpressionContext arithmeticExpression(int i) {
			return GetRuleContext<ArithmeticExpressionContext>(i);
		}
		public ITerminalNode Equals() { return GetToken(QuokkaParser.Equals, 0); }
		public ITerminalNode NotEquals() { return GetToken(QuokkaParser.NotEquals, 0); }
		public ITerminalNode LessThan() { return GetToken(QuokkaParser.LessThan, 0); }
		public ITerminalNode GreaterThan() { return GetToken(QuokkaParser.GreaterThan, 0); }
		public ITerminalNode LessThanOrEquals() { return GetToken(QuokkaParser.LessThanOrEquals, 0); }
		public ITerminalNode GreaterThanOrEquals() { return GetToken(QuokkaParser.GreaterThanOrEquals, 0); }
		public ArithmeticComparisonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticComparisonExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterArithmeticComparisonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitArithmeticComparisonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticComparisonExpressionContext arithmeticComparisonExpression() {
		ArithmeticComparisonExpressionContext _localctx = new ArithmeticComparisonExpressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_arithmeticComparisonExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; arithmeticExpression();
			State = 250;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equals) | (1L << NotEquals) | (1L << GreaterThan) | (1L << LessThan) | (1L << GreaterThanOrEquals) | (1L << LessThanOrEquals))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 251; arithmeticExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticExpressionContext : ParserRuleContext {
		public MultiplicationExpressionContext[] multiplicationExpression() {
			return GetRuleContexts<MultiplicationExpressionContext>();
		}
		public MultiplicationExpressionContext multiplicationExpression(int i) {
			return GetRuleContext<MultiplicationExpressionContext>(i);
		}
		public ITerminalNode[] Plus() { return GetTokens(QuokkaParser.Plus); }
		public ITerminalNode Plus(int i) {
			return GetToken(QuokkaParser.Plus, i);
		}
		public ITerminalNode[] Minus() { return GetTokens(QuokkaParser.Minus); }
		public ITerminalNode Minus(int i) {
			return GetToken(QuokkaParser.Minus, i);
		}
		public ArithmeticExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterArithmeticExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitArithmeticExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticExpressionContext arithmeticExpression() {
		ArithmeticExpressionContext _localctx = new ArithmeticExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_arithmeticExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 253; multiplicationExpression();
			State = 258;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Plus || _la==Minus) {
				{
				{
				State = 254;
				_la = TokenStream.La(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 255; multiplicationExpression();
				}
				}
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationExpressionContext : ParserRuleContext {
		public ArithmeticAtomContext[] arithmeticAtom() {
			return GetRuleContexts<ArithmeticAtomContext>();
		}
		public ArithmeticAtomContext arithmeticAtom(int i) {
			return GetRuleContext<ArithmeticAtomContext>(i);
		}
		public ITerminalNode[] Multiply() { return GetTokens(QuokkaParser.Multiply); }
		public ITerminalNode Multiply(int i) {
			return GetToken(QuokkaParser.Multiply, i);
		}
		public ITerminalNode[] Divide() { return GetTokens(QuokkaParser.Divide); }
		public ITerminalNode Divide(int i) {
			return GetToken(QuokkaParser.Divide, i);
		}
		public MultiplicationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicationExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicationExpressionContext multiplicationExpression() {
		MultiplicationExpressionContext _localctx = new MultiplicationExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_multiplicationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 261; arithmeticAtom();
			State = 266;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Multiply || _la==Divide) {
				{
				{
				State = 262;
				_la = TokenStream.La(1);
				if ( !(_la==Multiply || _la==Divide) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 263; arithmeticAtom();
				}
				}
				State = 268;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegationExpressionContext : ParserRuleContext {
		public ITerminalNode Minus() { return GetToken(QuokkaParser.Minus, 0); }
		public ArithmeticAtomContext arithmeticAtom() {
			return GetRuleContext<ArithmeticAtomContext>(0);
		}
		public NegationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negationExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterNegationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitNegationExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegationExpressionContext negationExpression() {
		NegationExpressionContext _localctx = new NegationExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_negationExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269; Match(Minus);
			State = 270; arithmeticAtom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticAtomContext : ParserRuleContext {
		public ITerminalNode Number() { return GetToken(QuokkaParser.Number, 0); }
		public ParameterValueExpressionContext parameterValueExpression() {
			return GetRuleContext<ParameterValueExpressionContext>(0);
		}
		public NegationExpressionContext negationExpression() {
			return GetRuleContext<NegationExpressionContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(QuokkaParser.LeftParen, 0); }
		public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(QuokkaParser.RightParen, 0); }
		public ArithmeticAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticAtom; } }
		public override void EnterRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.EnterArithmeticAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IQuokkaListener typedListener = listener as IQuokkaListener;
			if (typedListener != null) typedListener.ExitArithmeticAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticAtomContext arithmeticAtom() {
		ArithmeticAtomContext _localctx = new ArithmeticAtomContext(Context, State);
		EnterRule(_localctx, 76, RULE_arithmeticAtom);
		try {
			State = 279;
			switch (TokenStream.La(1)) {
			case Number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272; Match(Number);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273; parameterValueExpression();
				}
				break;
			case Minus:
				EnterOuterAlt(_localctx, 3);
				{
				State = 274; negationExpression();
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 4);
				{
				State = 275; Match(LeftParen);
				State = 276; arithmeticExpression();
				State = 277; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3(\x11C\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x4(\t(\x3\x2\x3\x2\x3"+
		"\x3\x3\x3\x6\x3U\n\x3\r\x3\xE\x3V\x3\x4\x3\x4\x3\x4\x6\x4\\\n\x4\r\x4"+
		"\xE\x4]\x3\x5\x3\x5\x5\x5\x62\n\x5\x3\x6\x6\x6\x65\n\x6\r\x6\xE\x6\x66"+
		"\x3\a\x3\a\x3\a\x5\al\n\a\x3\a\x3\a\x3\b\x3\b\x5\br\n\b\x3\t\x3\t\x5\t"+
		"v\n\t\x3\n\x3\n\x6\nz\n\n\r\n\xE\n{\x3\v\x3\v\x5\v\x80\n\v\x3\f\x3\f\x3"+
		"\f\x3\f\a\f\x86\n\f\f\f\xE\f\x89\v\f\x3\f\x3\f\x3\r\x3\r\x3\xE\x3\xE\x3"+
		"\xF\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x5\x10\x97\n\x10\x3\x11\x3\x11\a"+
		"\x11\x9B\n\x11\f\x11\xE\x11\x9E\v\x11\x3\x11\x5\x11\xA1\n\x11\x3\x11\x3"+
		"\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3"+
		"\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x16\x3"+
		"\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3"+
		"\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3"+
		"\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x5"+
		"\x1D\xD6\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3 \x3 \x3 \a \xE3\n \f \xE \xE6\v \x3!\x3!\x3!\a!\xEB\n!\f!\xE!\xEE"+
		"\v!\x3\"\x3\"\x3\"\x3#\x3#\x3#\x3#\x3#\x3#\x3#\x5#\xFA\n#\x3$\x3$\x3$"+
		"\x3$\x3%\x3%\x3%\a%\x103\n%\f%\xE%\x106\v%\x3&\x3&\x3&\a&\x10B\n&\f&\xE"+
		"&\x10E\v&\x3\'\x3\'\x3\'\x3(\x3(\x3(\x3(\x3(\x3(\x3(\x5(\x11A\n(\x3(\x2"+
		"\x2)\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E \"$&(*,.\x30\x32"+
		"\x34\x36\x38:<>@\x42\x44\x46HJLN\x2\x5\x3\x2\x1A\x1F\x3\x2 !\x3\x2\"#"+
		"\x10F\x2P\x3\x2\x2\x2\x4T\x3\x2\x2\x2\x6[\x3\x2\x2\x2\b\x61\x3\x2\x2\x2"+
		"\n\x64\x3\x2\x2\x2\fh\x3\x2\x2\x2\xEq\x3\x2\x2\x2\x10s\x3\x2\x2\x2\x12"+
		"y\x3\x2\x2\x2\x14}\x3\x2\x2\x2\x16\x81\x3\x2\x2\x2\x18\x8C\x3\x2\x2\x2"+
		"\x1A\x8E\x3\x2\x2\x2\x1C\x90\x3\x2\x2\x2\x1E\x93\x3\x2\x2\x2 \x98\x3\x2"+
		"\x2\x2\"\xA4\x3\x2\x2\x2$\xA7\x3\x2\x2\x2&\xAA\x3\x2\x2\x2(\xAD\x3\x2"+
		"\x2\x2*\xB2\x3\x2\x2\x2,\xB7\x3\x2\x2\x2.\xBB\x3\x2\x2\x2\x30\xBF\x3\x2"+
		"\x2\x2\x32\xC3\x3\x2\x2\x2\x34\xCA\x3\x2\x2\x2\x36\xCC\x3\x2\x2\x2\x38"+
		"\xD5\x3\x2\x2\x2:\xD7\x3\x2\x2\x2<\xDB\x3\x2\x2\x2>\xDF\x3\x2\x2\x2@\xE7"+
		"\x3\x2\x2\x2\x42\xEF\x3\x2\x2\x2\x44\xF9\x3\x2\x2\x2\x46\xFB\x3\x2\x2"+
		"\x2H\xFF\x3\x2\x2\x2J\x107\x3\x2\x2\x2L\x10F\x3\x2\x2\x2N\x119\x3\x2\x2"+
		"\x2PQ\x5\x4\x3\x2Q\x3\x3\x2\x2\x2RU\x5\x6\x4\x2SU\x5\b\x5\x2TR\x3\x2\x2"+
		"\x2TS\x3\x2\x2\x2UV\x3\x2\x2\x2VT\x3\x2\x2\x2VW\x3\x2\x2\x2W\x5\x3\x2"+
		"\x2\x2X\\\x5\n\x6\x2Y\\\x5\f\a\x2Z\\\x5\x38\x1D\x2[X\x3\x2\x2\x2[Y\x3"+
		"\x2\x2\x2[Z\x3\x2\x2\x2\\]\x3\x2\x2\x2][\x3\x2\x2\x2]^\x3\x2\x2\x2^\a"+
		"\x3\x2\x2\x2_\x62\x5 \x11\x2`\x62\x5\x30\x19\x2\x61_\x3\x2\x2\x2\x61`"+
		"\x3\x2\x2\x2\x62\t\x3\x2\x2\x2\x63\x65\a\x6\x2\x2\x64\x63\x3\x2\x2\x2"+
		"\x65\x66\x3\x2\x2\x2\x66\x64\x3\x2\x2\x2\x66g\x3\x2\x2\x2g\v\x3\x2\x2"+
		"\x2hk\a\x4\x2\x2il\x5\x10\t\x2jl\x5H%\x2ki\x3\x2\x2\x2kj\x3\x2\x2\x2l"+
		"m\x3\x2\x2\x2mn\a\a\x2\x2n\r\x3\x2\x2\x2or\x5\x1A\xE\x2pr\x5\x1C\xF\x2"+
		"qo\x3\x2\x2\x2qp\x3\x2\x2\x2r\xF\x3\x2\x2\x2su\x5\xE\b\x2tv\x5\x12\n\x2"+
		"ut\x3\x2\x2\x2uv\x3\x2\x2\x2v\x11\x3\x2\x2\x2wx\a\x13\x2\x2xz\x5\x14\v"+
		"\x2yw\x3\x2\x2\x2z{\x3\x2\x2\x2{y\x3\x2\x2\x2{|\x3\x2\x2\x2|\x13\x3\x2"+
		"\x2\x2}\x7F\a\'\x2\x2~\x80\x5\x16\f\x2\x7F~\x3\x2\x2\x2\x7F\x80\x3\x2"+
		"\x2\x2\x80\x15\x3\x2\x2\x2\x81\x82\a\x15\x2\x2\x82\x87\x5\x18\r\x2\x83"+
		"\x84\a\x14\x2\x2\x84\x86\x5\x18\r\x2\x85\x83\x3\x2\x2\x2\x86\x89\x3\x2"+
		"\x2\x2\x87\x85\x3\x2\x2\x2\x87\x88\x3\x2\x2\x2\x88\x8A\x3\x2\x2\x2\x89"+
		"\x87\x3\x2\x2\x2\x8A\x8B\a\x16\x2\x2\x8B\x17\x3\x2\x2\x2\x8C\x8D\a&\x2"+
		"\x2\x8D\x19\x3\x2\x2\x2\x8E\x8F\a\'\x2\x2\x8F\x1B\x3\x2\x2\x2\x90\x91"+
		"\x5\x1A\xE\x2\x91\x92\x5\x1E\x10\x2\x92\x1D\x3\x2\x2\x2\x93\x94\a\x12"+
		"\x2\x2\x94\x96\a\'\x2\x2\x95\x97\x5\x1E\x10\x2\x96\x95\x3\x2\x2\x2\x96"+
		"\x97\x3\x2\x2\x2\x97\x1F\x3\x2\x2\x2\x98\x9C\x5\"\x12\x2\x99\x9B\x5&\x14"+
		"\x2\x9A\x99\x3\x2\x2\x2\x9B\x9E\x3\x2\x2\x2\x9C\x9A\x3\x2\x2\x2\x9C\x9D"+
		"\x3\x2\x2\x2\x9D\xA0\x3\x2\x2\x2\x9E\x9C\x3\x2\x2\x2\x9F\xA1\x5$\x13\x2"+
		"\xA0\x9F\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA2\x3\x2\x2\x2\xA2\xA3\x5"+
		".\x18\x2\xA3!\x3\x2\x2\x2\xA4\xA5\x5(\x15\x2\xA5\xA6\x5\x4\x3\x2\xA6#"+
		"\x3\x2\x2\x2\xA7\xA8\x5,\x17\x2\xA8\xA9\x5\x4\x3\x2\xA9%\x3\x2\x2\x2\xAA"+
		"\xAB\x5*\x16\x2\xAB\xAC\x5\x4\x3\x2\xAC\'\x3\x2\x2\x2\xAD\xAE\a\x5\x2"+
		"\x2\xAE\xAF\a\b\x2\x2\xAF\xB0\x5> \x2\xB0\xB1\a\a\x2\x2\xB1)\x3\x2\x2"+
		"\x2\xB2\xB3\a\x5\x2\x2\xB3\xB4\a\f\x2\x2\xB4\xB5\x5> \x2\xB5\xB6\a\a\x2"+
		"\x2\xB6+\x3\x2\x2\x2\xB7\xB8\a\x5\x2\x2\xB8\xB9\a\v\x2\x2\xB9\xBA\a\a"+
		"\x2\x2\xBA-\x3\x2\x2\x2\xBB\xBC\a\x5\x2\x2\xBC\xBD\a\t\x2\x2\xBD\xBE\a"+
		"\a\x2\x2\xBE/\x3\x2\x2\x2\xBF\xC0\x5\x32\x1A\x2\xC0\xC1\x5\x4\x3\x2\xC1"+
		"\xC2\x5\x36\x1C\x2\xC2\x31\x3\x2\x2\x2\xC3\xC4\a\x5\x2\x2\xC4\xC5\a\r"+
		"\x2\x2\xC5\xC6\x5\x34\x1B\x2\xC6\xC7\a\xE\x2\x2\xC7\xC8\x5\xE\b\x2\xC8"+
		"\xC9\a\a\x2\x2\xC9\x33\x3\x2\x2\x2\xCA\xCB\a\'\x2\x2\xCB\x35\x3\x2\x2"+
		"\x2\xCC\xCD\a\x5\x2\x2\xCD\xCE\a\xF\x2\x2\xCE\xCF\a\a\x2\x2\xCF\x37\x3"+
		"\x2\x2\x2\xD0\xD6\a\x3\x2\x2\xD1\xD2\x5:\x1E\x2\xD2\xD3\x5\x4\x3\x2\xD3"+
		"\xD4\x5<\x1F\x2\xD4\xD6\x3\x2\x2\x2\xD5\xD0\x3\x2\x2\x2\xD5\xD1\x3\x2"+
		"\x2\x2\xD6\x39\x3\x2\x2\x2\xD7\xD8\a\x5\x2\x2\xD8\xD9\a\x10\x2\x2\xD9"+
		"\xDA\a\a\x2\x2\xDA;\x3\x2\x2\x2\xDB\xDC\a\x5\x2\x2\xDC\xDD\a\x11\x2\x2"+
		"\xDD\xDE\a\a\x2\x2\xDE=\x3\x2\x2\x2\xDF\xE4\x5@!\x2\xE0\xE1\a\x18\x2\x2"+
		"\xE1\xE3\x5@!\x2\xE2\xE0\x3\x2\x2\x2\xE3\xE6\x3\x2\x2\x2\xE4\xE2\x3\x2"+
		"\x2\x2\xE4\xE5\x3\x2\x2\x2\xE5?\x3\x2\x2\x2\xE6\xE4\x3\x2\x2\x2\xE7\xEC"+
		"\x5\x44#\x2\xE8\xE9\a\x17\x2\x2\xE9\xEB\x5\x44#\x2\xEA\xE8\x3\x2\x2\x2"+
		"\xEB\xEE\x3\x2\x2\x2\xEC\xEA\x3\x2\x2\x2\xEC\xED\x3\x2\x2\x2\xED\x41\x3"+
		"\x2\x2\x2\xEE\xEC\x3\x2\x2\x2\xEF\xF0\a\x19\x2\x2\xF0\xF1\x5\x44#\x2\xF1"+
		"\x43\x3\x2\x2\x2\xF2\xFA\x5\xE\b\x2\xF3\xFA\x5\x46$\x2\xF4\xFA\x5\x42"+
		"\"\x2\xF5\xF6\a\x15\x2\x2\xF6\xF7\x5> \x2\xF7\xF8\a\x16\x2\x2\xF8\xFA"+
		"\x3\x2\x2\x2\xF9\xF2\x3\x2\x2\x2\xF9\xF3\x3\x2\x2\x2\xF9\xF4\x3\x2\x2"+
		"\x2\xF9\xF5\x3\x2\x2\x2\xFA\x45\x3\x2\x2\x2\xFB\xFC\x5H%\x2\xFC\xFD\t"+
		"\x2\x2\x2\xFD\xFE\x5H%\x2\xFEG\x3\x2\x2\x2\xFF\x104\x5J&\x2\x100\x101"+
		"\t\x3\x2\x2\x101\x103\x5J&\x2\x102\x100\x3\x2\x2\x2\x103\x106\x3\x2\x2"+
		"\x2\x104\x102\x3\x2\x2\x2\x104\x105\x3\x2\x2\x2\x105I\x3\x2\x2\x2\x106"+
		"\x104\x3\x2\x2\x2\x107\x10C\x5N(\x2\x108\x109\t\x4\x2\x2\x109\x10B\x5"+
		"N(\x2\x10A\x108\x3\x2\x2\x2\x10B\x10E\x3\x2\x2\x2\x10C\x10A\x3\x2\x2\x2"+
		"\x10C\x10D\x3\x2\x2\x2\x10DK\x3\x2\x2\x2\x10E\x10C\x3\x2\x2\x2\x10F\x110"+
		"\a!\x2\x2\x110\x111\x5N(\x2\x111M\x3\x2\x2\x2\x112\x11A\a$\x2\x2\x113"+
		"\x11A\x5\xE\b\x2\x114\x11A\x5L\'\x2\x115\x116\a\x15\x2\x2\x116\x117\x5"+
		"H%\x2\x117\x118\a\x16\x2\x2\x118\x11A\x3\x2\x2\x2\x119\x112\x3\x2\x2\x2"+
		"\x119\x113\x3\x2\x2\x2\x119\x114\x3\x2\x2\x2\x119\x115\x3\x2\x2\x2\x11A"+
		"O\x3\x2\x2\x2\x18TV[]\x61\x66kqu{\x7F\x87\x96\x9C\xA0\xD5\xE4\xEC\xF9"+
		"\x104\x10C\x119";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Quokka.Generated
