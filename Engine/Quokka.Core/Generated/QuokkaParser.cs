//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Code\Quokka\Grammar\Quokka\Quokka.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Quokka.Generated {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
public partial class QuokkaParser : Parser {
	public const int
		SingleInstructionComment=1, OutputInstructionStart=2, ControlInstructionStart=3, 
		Fluff=4, InstructionEnd=5, If=6, EndIf=7, End=8, Else=9, ElseIf=10, For=11, 
		In=12, EndFor=13, Comment=14, EndComment=15, MemberAccessOperator=16, 
		Pipe=17, CommaSeparator=18, LeftParen=19, RightParen=20, And=21, Or=22, 
		Not=23, Equals=24, NotEquals=25, GreaterThan=26, LessThan=27, GreaterThanOrEquals=28, 
		LessThanOrEquals=29, Plus=30, Minus=31, Multiply=32, Divide=33, Number=34, 
		Digit=35, DoubleQuotedString=36, Identifier=37, WhiteSpace=38;
	public const int
		RULE_template = 0, RULE_templateBlock = 1, RULE_staticBlock = 2, RULE_dynamicBlock = 3, 
		RULE_constantBlock = 4, RULE_outputBlock = 5, RULE_parameterValueExpression = 6, 
		RULE_parameterExpression = 7, RULE_memberAccessExpression = 8, RULE_filteredParameterValueExpression = 9, 
		RULE_filterChain = 10, RULE_filter = 11, RULE_filterArgumentList = 12, 
		RULE_filterArgumentValue = 13, RULE_ifStatement = 14, RULE_ifCondition = 15, 
		RULE_elseCondition = 16, RULE_elseIfCondition = 17, RULE_ifInstruction = 18, 
		RULE_elseIfInstruction = 19, RULE_elseInstruction = 20, RULE_endIfInstruction = 21, 
		RULE_forStatement = 22, RULE_forInstruction = 23, RULE_iterationVariable = 24, 
		RULE_endForInstruction = 25, RULE_commentBlock = 26, RULE_commentInstruction = 27, 
		RULE_endCommentInstruction = 28, RULE_booleanExpression = 29, RULE_andExpression = 30, 
		RULE_notExpression = 31, RULE_booleanAtom = 32, RULE_arithmeticComparisonExpression = 33, 
		RULE_arithmeticExpression = 34, RULE_multiplicationExpression = 35, RULE_negationExpression = 36, 
		RULE_arithmeticAtom = 37;
	public static readonly string[] ruleNames = {
		"template", "templateBlock", "staticBlock", "dynamicBlock", "constantBlock", 
		"outputBlock", "parameterValueExpression", "parameterExpression", "memberAccessExpression", 
		"filteredParameterValueExpression", "filterChain", "filter", "filterArgumentList", 
		"filterArgumentValue", "ifStatement", "ifCondition", "elseCondition", 
		"elseIfCondition", "ifInstruction", "elseIfInstruction", "elseInstruction", 
		"endIfInstruction", "forStatement", "forInstruction", "iterationVariable", 
		"endForInstruction", "commentBlock", "commentInstruction", "endCommentInstruction", 
		"booleanExpression", "andExpression", "notExpression", "booleanAtom", 
		"arithmeticComparisonExpression", "arithmeticExpression", "multiplicationExpression", 
		"negationExpression", "arithmeticAtom"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'${'", "'@{'", null, "'}'", null, null, null, null, null, 
		null, null, null, null, null, "'.'", "'|'", "','", "'('", "')'", null, 
		null, null, "'='", "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", "'-'", 
		"'*'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "SingleInstructionComment", "OutputInstructionStart", "ControlInstructionStart", 
		"Fluff", "InstructionEnd", "If", "EndIf", "End", "Else", "ElseIf", "For", 
		"In", "EndFor", "Comment", "EndComment", "MemberAccessOperator", "Pipe", 
		"CommaSeparator", "LeftParen", "RightParen", "And", "Or", "Not", "Equals", 
		"NotEquals", "GreaterThan", "LessThan", "GreaterThanOrEquals", "LessThanOrEquals", 
		"Plus", "Minus", "Multiply", "Divide", "Number", "Digit", "DoubleQuotedString", 
		"Identifier", "WhiteSpace"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Quokka.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public QuokkaParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class TemplateContext : ParserRuleContext {
		public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public TemplateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_template; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateContext template() {
		TemplateContext _localctx = new TemplateContext(Context, State);
		EnterRule(_localctx, 0, RULE_template);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76; templateBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateBlockContext : ParserRuleContext {
		public StaticBlockContext[] staticBlock() {
			return GetRuleContexts<StaticBlockContext>();
		}
		public StaticBlockContext staticBlock(int i) {
			return GetRuleContext<StaticBlockContext>(i);
		}
		public DynamicBlockContext[] dynamicBlock() {
			return GetRuleContexts<DynamicBlockContext>();
		}
		public DynamicBlockContext dynamicBlock(int i) {
			return GetRuleContext<DynamicBlockContext>(i);
		}
		public TemplateBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTemplateBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TemplateBlockContext templateBlock() {
		TemplateBlockContext _localctx = new TemplateBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_templateBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 80;
					switch (TokenStream.La(1)) {
					case OutputInstructionStart:
					case Fluff:
						{
						State = 78; staticBlock();
						}
						break;
					case SingleInstructionComment:
					case ControlInstructionStart:
						{
						State = 79; dynamicBlock();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 82;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticBlockContext : ParserRuleContext {
		public ConstantBlockContext[] constantBlock() {
			return GetRuleContexts<ConstantBlockContext>();
		}
		public ConstantBlockContext constantBlock(int i) {
			return GetRuleContext<ConstantBlockContext>(i);
		}
		public OutputBlockContext[] outputBlock() {
			return GetRuleContexts<OutputBlockContext>();
		}
		public OutputBlockContext outputBlock(int i) {
			return GetRuleContext<OutputBlockContext>(i);
		}
		public StaticBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStaticBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StaticBlockContext staticBlock() {
		StaticBlockContext _localctx = new StaticBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_staticBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 86;
					switch (TokenStream.La(1)) {
					case Fluff:
						{
						State = 84; constantBlock();
						}
						break;
					case OutputInstructionStart:
						{
						State = 85; outputBlock();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 88;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicBlockContext : ParserRuleContext {
		public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public CommentBlockContext commentBlock() {
			return GetRuleContext<CommentBlockContext>(0);
		}
		public DynamicBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDynamicBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DynamicBlockContext dynamicBlock() {
		DynamicBlockContext _localctx = new DynamicBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_dynamicBlock);
		try {
			State = 93;
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90; ifStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 91; forStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 92; commentBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantBlockContext : ParserRuleContext {
		public ITerminalNode[] Fluff() { return GetTokens(QuokkaParser.Fluff); }
		public ITerminalNode Fluff(int i) {
			return GetToken(QuokkaParser.Fluff, i);
		}
		public ConstantBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantBlockContext constantBlock() {
		ConstantBlockContext _localctx = new ConstantBlockContext(Context, State);
		EnterRule(_localctx, 8, RULE_constantBlock);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 95; Match(Fluff);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 98;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputBlockContext : ParserRuleContext {
		public ITerminalNode OutputInstructionStart() { return GetToken(QuokkaParser.OutputInstructionStart, 0); }
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public FilteredParameterValueExpressionContext filteredParameterValueExpression() {
			return GetRuleContext<FilteredParameterValueExpressionContext>(0);
		}
		public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public OutputBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outputBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutputBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputBlockContext outputBlock() {
		OutputBlockContext _localctx = new OutputBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_outputBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(OutputInstructionStart);
			State = 103;
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 101; filteredParameterValueExpression();
				}
				break;
			case 2:
				{
				State = 102; arithmeticExpression();
				}
				break;
			}
			State = 105; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterValueExpressionContext : ParserRuleContext {
		public ParameterExpressionContext parameterExpression() {
			return GetRuleContext<ParameterExpressionContext>(0);
		}
		public MemberAccessExpressionContext memberAccessExpression() {
			return GetRuleContext<MemberAccessExpressionContext>(0);
		}
		public ParameterValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterValueExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterValueExpressionContext parameterValueExpression() {
		ParameterValueExpressionContext _localctx = new ParameterValueExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_parameterValueExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 107; parameterExpression();
			State = 109;
			_la = TokenStream.La(1);
			if (_la==MemberAccessOperator) {
				{
				State = 108; memberAccessExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterExpressionContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(QuokkaParser.Identifier, 0); }
		public ParameterExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameterExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterExpressionContext parameterExpression() {
		ParameterExpressionContext _localctx = new ParameterExpressionContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameterExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessExpressionContext : ParserRuleContext {
		public ITerminalNode MemberAccessOperator() { return GetToken(QuokkaParser.MemberAccessOperator, 0); }
		public ITerminalNode Identifier() { return GetToken(QuokkaParser.Identifier, 0); }
		public MemberAccessExpressionContext memberAccessExpression() {
			return GetRuleContext<MemberAccessExpressionContext>(0);
		}
		public MemberAccessExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccessExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberAccessExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessExpressionContext memberAccessExpression() {
		MemberAccessExpressionContext _localctx = new MemberAccessExpressionContext(Context, State);
		EnterRule(_localctx, 16, RULE_memberAccessExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; Match(MemberAccessOperator);
			State = 114; Match(Identifier);
			State = 116;
			_la = TokenStream.La(1);
			if (_la==MemberAccessOperator) {
				{
				State = 115; memberAccessExpression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilteredParameterValueExpressionContext : ParserRuleContext {
		public ParameterValueExpressionContext parameterValueExpression() {
			return GetRuleContext<ParameterValueExpressionContext>(0);
		}
		public FilterChainContext filterChain() {
			return GetRuleContext<FilterChainContext>(0);
		}
		public FilteredParameterValueExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filteredParameterValueExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilteredParameterValueExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilteredParameterValueExpressionContext filteredParameterValueExpression() {
		FilteredParameterValueExpressionContext _localctx = new FilteredParameterValueExpressionContext(Context, State);
		EnterRule(_localctx, 18, RULE_filteredParameterValueExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; parameterValueExpression();
			State = 120;
			_la = TokenStream.La(1);
			if (_la==Pipe) {
				{
				State = 119; filterChain();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterChainContext : ParserRuleContext {
		public ITerminalNode[] Pipe() { return GetTokens(QuokkaParser.Pipe); }
		public ITerminalNode Pipe(int i) {
			return GetToken(QuokkaParser.Pipe, i);
		}
		public FilterContext[] filter() {
			return GetRuleContexts<FilterContext>();
		}
		public FilterContext filter(int i) {
			return GetRuleContext<FilterContext>(i);
		}
		public FilterChainContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterChain; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterChain(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterChainContext filterChain() {
		FilterChainContext _localctx = new FilterChainContext(Context, State);
		EnterRule(_localctx, 20, RULE_filterChain);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				{
				State = 122; Match(Pipe);
				State = 123; filter();
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( _la==Pipe );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(QuokkaParser.Identifier, 0); }
		public FilterArgumentListContext filterArgumentList() {
			return GetRuleContext<FilterArgumentListContext>(0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 22, RULE_filter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(Identifier);
			State = 130;
			_la = TokenStream.La(1);
			if (_la==LeftParen) {
				{
				State = 129; filterArgumentList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterArgumentListContext : ParserRuleContext {
		public ITerminalNode LeftParen() { return GetToken(QuokkaParser.LeftParen, 0); }
		public FilterArgumentValueContext[] filterArgumentValue() {
			return GetRuleContexts<FilterArgumentValueContext>();
		}
		public FilterArgumentValueContext filterArgumentValue(int i) {
			return GetRuleContext<FilterArgumentValueContext>(i);
		}
		public ITerminalNode RightParen() { return GetToken(QuokkaParser.RightParen, 0); }
		public ITerminalNode[] CommaSeparator() { return GetTokens(QuokkaParser.CommaSeparator); }
		public ITerminalNode CommaSeparator(int i) {
			return GetToken(QuokkaParser.CommaSeparator, i);
		}
		public FilterArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterArgumentList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterArgumentList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterArgumentListContext filterArgumentList() {
		FilterArgumentListContext _localctx = new FilterArgumentListContext(Context, State);
		EnterRule(_localctx, 24, RULE_filterArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(LeftParen);
			State = 133; filterArgumentValue();
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==CommaSeparator) {
				{
				{
				State = 134; Match(CommaSeparator);
				State = 135; filterArgumentValue();
				}
				}
				State = 140;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 141; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterArgumentValueContext : ParserRuleContext {
		public ITerminalNode DoubleQuotedString() { return GetToken(QuokkaParser.DoubleQuotedString, 0); }
		public FilterArgumentValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterArgumentValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterArgumentValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterArgumentValueContext filterArgumentValue() {
		FilterArgumentValueContext _localctx = new FilterArgumentValueContext(Context, State);
		EnterRule(_localctx, 26, RULE_filterArgumentValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143; Match(DoubleQuotedString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		public IfConditionContext ifCondition() {
			return GetRuleContext<IfConditionContext>(0);
		}
		public EndIfInstructionContext endIfInstruction() {
			return GetRuleContext<EndIfInstructionContext>(0);
		}
		public ElseIfConditionContext[] elseIfCondition() {
			return GetRuleContexts<ElseIfConditionContext>();
		}
		public ElseIfConditionContext elseIfCondition(int i) {
			return GetRuleContext<ElseIfConditionContext>(i);
		}
		public ElseConditionContext elseCondition() {
			return GetRuleContext<ElseConditionContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_ifStatement);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 145; ifCondition();
			State = 149;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 146; elseIfCondition();
					}
					} 
				}
				State = 151;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			State = 153;
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				{
				State = 152; elseCondition();
				}
				break;
			}
			State = 155; endIfInstruction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfConditionContext : ParserRuleContext {
		public IfInstructionContext ifInstruction() {
			return GetRuleContext<IfInstructionContext>(0);
		}
		public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public IfConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifCondition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfConditionContext ifCondition() {
		IfConditionContext _localctx = new IfConditionContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; ifInstruction();
			State = 158; templateBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseConditionContext : ParserRuleContext {
		public ElseInstructionContext elseInstruction() {
			return GetRuleContext<ElseInstructionContext>(0);
		}
		public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public ElseConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseCondition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseConditionContext elseCondition() {
		ElseConditionContext _localctx = new ElseConditionContext(Context, State);
		EnterRule(_localctx, 32, RULE_elseCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160; elseInstruction();
			State = 161; templateBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfConditionContext : ParserRuleContext {
		public ElseIfInstructionContext elseIfInstruction() {
			return GetRuleContext<ElseIfInstructionContext>(0);
		}
		public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public ElseIfConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfCondition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfConditionContext elseIfCondition() {
		ElseIfConditionContext _localctx = new ElseIfConditionContext(Context, State);
		EnterRule(_localctx, 34, RULE_elseIfCondition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 163; elseIfInstruction();
			State = 164; templateBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode If() { return GetToken(QuokkaParser.If, 0); }
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public IfInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifInstruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfInstructionContext ifInstruction() {
		IfInstructionContext _localctx = new IfInstructionContext(Context, State);
		EnterRule(_localctx, 36, RULE_ifInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 166; Match(ControlInstructionStart);
			State = 167; Match(If);
			State = 168; booleanExpression();
			State = 169; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode ElseIf() { return GetToken(QuokkaParser.ElseIf, 0); }
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public ElseIfInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfInstruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfInstructionContext elseIfInstruction() {
		ElseIfInstructionContext _localctx = new ElseIfInstructionContext(Context, State);
		EnterRule(_localctx, 38, RULE_elseIfInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 171; Match(ControlInstructionStart);
			State = 172; Match(ElseIf);
			State = 173; booleanExpression();
			State = 174; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode Else() { return GetToken(QuokkaParser.Else, 0); }
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public ElseInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseInstruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseInstructionContext elseInstruction() {
		ElseInstructionContext _localctx = new ElseInstructionContext(Context, State);
		EnterRule(_localctx, 40, RULE_elseInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; Match(ControlInstructionStart);
			State = 177; Match(Else);
			State = 178; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndIfInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode EndIf() { return GetToken(QuokkaParser.EndIf, 0); }
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public EndIfInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endIfInstruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndIfInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndIfInstructionContext endIfInstruction() {
		EndIfInstructionContext _localctx = new EndIfInstructionContext(Context, State);
		EnterRule(_localctx, 42, RULE_endIfInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 180; Match(ControlInstructionStart);
			State = 181; Match(EndIf);
			State = 182; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		public ForInstructionContext forInstruction() {
			return GetRuleContext<ForInstructionContext>(0);
		}
		public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public EndForInstructionContext endForInstruction() {
			return GetRuleContext<EndForInstructionContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; forInstruction();
			State = 185; templateBlock();
			State = 186; endForInstruction();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode For() { return GetToken(QuokkaParser.For, 0); }
		public IterationVariableContext iterationVariable() {
			return GetRuleContext<IterationVariableContext>(0);
		}
		public ITerminalNode In() { return GetToken(QuokkaParser.In, 0); }
		public ParameterValueExpressionContext parameterValueExpression() {
			return GetRuleContext<ParameterValueExpressionContext>(0);
		}
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public ForInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInstruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInstructionContext forInstruction() {
		ForInstructionContext _localctx = new ForInstructionContext(Context, State);
		EnterRule(_localctx, 46, RULE_forInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 188; Match(ControlInstructionStart);
			State = 189; Match(For);
			State = 190; iterationVariable();
			State = 191; Match(In);
			State = 192; parameterValueExpression();
			State = 193; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationVariableContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(QuokkaParser.Identifier, 0); }
		public IterationVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationVariable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIterationVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationVariableContext iterationVariable() {
		IterationVariableContext _localctx = new IterationVariableContext(Context, State);
		EnterRule(_localctx, 48, RULE_iterationVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndForInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode EndFor() { return GetToken(QuokkaParser.EndFor, 0); }
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public EndForInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endForInstruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndForInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndForInstructionContext endForInstruction() {
		EndForInstructionContext _localctx = new EndForInstructionContext(Context, State);
		EnterRule(_localctx, 50, RULE_endForInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197; Match(ControlInstructionStart);
			State = 198; Match(EndFor);
			State = 199; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentBlockContext : ParserRuleContext {
		public ITerminalNode SingleInstructionComment() { return GetToken(QuokkaParser.SingleInstructionComment, 0); }
		public CommentInstructionContext commentInstruction() {
			return GetRuleContext<CommentInstructionContext>(0);
		}
		public TemplateBlockContext templateBlock() {
			return GetRuleContext<TemplateBlockContext>(0);
		}
		public EndCommentInstructionContext endCommentInstruction() {
			return GetRuleContext<EndCommentInstructionContext>(0);
		}
		public CommentBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentBlockContext commentBlock() {
		CommentBlockContext _localctx = new CommentBlockContext(Context, State);
		EnterRule(_localctx, 52, RULE_commentBlock);
		try {
			State = 206;
			switch (TokenStream.La(1)) {
			case SingleInstructionComment:
				EnterOuterAlt(_localctx, 1);
				{
				State = 201; Match(SingleInstructionComment);
				}
				break;
			case ControlInstructionStart:
				EnterOuterAlt(_localctx, 2);
				{
				State = 202; commentInstruction();
				State = 203; templateBlock();
				State = 204; endCommentInstruction();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommentInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode Comment() { return GetToken(QuokkaParser.Comment, 0); }
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public CommentInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commentInstruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommentInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommentInstructionContext commentInstruction() {
		CommentInstructionContext _localctx = new CommentInstructionContext(Context, State);
		EnterRule(_localctx, 54, RULE_commentInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208; Match(ControlInstructionStart);
			State = 209; Match(Comment);
			State = 210; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndCommentInstructionContext : ParserRuleContext {
		public ITerminalNode ControlInstructionStart() { return GetToken(QuokkaParser.ControlInstructionStart, 0); }
		public ITerminalNode EndComment() { return GetToken(QuokkaParser.EndComment, 0); }
		public ITerminalNode InstructionEnd() { return GetToken(QuokkaParser.InstructionEnd, 0); }
		public EndCommentInstructionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endCommentInstruction; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEndCommentInstruction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndCommentInstructionContext endCommentInstruction() {
		EndCommentInstructionContext _localctx = new EndCommentInstructionContext(Context, State);
		EnterRule(_localctx, 56, RULE_endCommentInstruction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 212; Match(ControlInstructionStart);
			State = 213; Match(EndComment);
			State = 214; Match(InstructionEnd);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanExpressionContext : ParserRuleContext {
		public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		public ITerminalNode[] Or() { return GetTokens(QuokkaParser.Or); }
		public ITerminalNode Or(int i) {
			return GetToken(QuokkaParser.Or, i);
		}
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanExpressionContext booleanExpression() {
		BooleanExpressionContext _localctx = new BooleanExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_booleanExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216; andExpression();
			State = 221;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Or) {
				{
				{
				State = 217; Match(Or);
				State = 218; andExpression();
				}
				}
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public BooleanAtomContext[] booleanAtom() {
			return GetRuleContexts<BooleanAtomContext>();
		}
		public BooleanAtomContext booleanAtom(int i) {
			return GetRuleContext<BooleanAtomContext>(i);
		}
		public ITerminalNode[] And() { return GetTokens(QuokkaParser.And); }
		public ITerminalNode And(int i) {
			return GetToken(QuokkaParser.And, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext andExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_andExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; booleanAtom();
			State = 229;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==And) {
				{
				{
				State = 225; Match(And);
				State = 226; booleanAtom();
				}
				}
				State = 231;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotExpressionContext : ParserRuleContext {
		public ITerminalNode Not() { return GetToken(QuokkaParser.Not, 0); }
		public BooleanAtomContext booleanAtom() {
			return GetRuleContext<BooleanAtomContext>(0);
		}
		public NotExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NotExpressionContext notExpression() {
		NotExpressionContext _localctx = new NotExpressionContext(Context, State);
		EnterRule(_localctx, 62, RULE_notExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232; Match(Not);
			State = 233; booleanAtom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanAtomContext : ParserRuleContext {
		public ParameterValueExpressionContext parameterValueExpression() {
			return GetRuleContext<ParameterValueExpressionContext>(0);
		}
		public ArithmeticComparisonExpressionContext arithmeticComparisonExpression() {
			return GetRuleContext<ArithmeticComparisonExpressionContext>(0);
		}
		public NotExpressionContext notExpression() {
			return GetRuleContext<NotExpressionContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(QuokkaParser.LeftParen, 0); }
		public BooleanExpressionContext booleanExpression() {
			return GetRuleContext<BooleanExpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(QuokkaParser.RightParen, 0); }
		public BooleanAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanAtom; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BooleanAtomContext booleanAtom() {
		BooleanAtomContext _localctx = new BooleanAtomContext(Context, State);
		EnterRule(_localctx, 64, RULE_booleanAtom);
		try {
			State = 242;
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235; parameterValueExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236; arithmeticComparisonExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 237; notExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 238; Match(LeftParen);
				State = 239; booleanExpression();
				State = 240; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticComparisonExpressionContext : ParserRuleContext {
		public ArithmeticExpressionContext[] arithmeticExpression() {
			return GetRuleContexts<ArithmeticExpressionContext>();
		}
		public ArithmeticExpressionContext arithmeticExpression(int i) {
			return GetRuleContext<ArithmeticExpressionContext>(i);
		}
		public ITerminalNode Equals() { return GetToken(QuokkaParser.Equals, 0); }
		public ITerminalNode NotEquals() { return GetToken(QuokkaParser.NotEquals, 0); }
		public ITerminalNode LessThan() { return GetToken(QuokkaParser.LessThan, 0); }
		public ITerminalNode GreaterThan() { return GetToken(QuokkaParser.GreaterThan, 0); }
		public ITerminalNode LessThanOrEquals() { return GetToken(QuokkaParser.LessThanOrEquals, 0); }
		public ITerminalNode GreaterThanOrEquals() { return GetToken(QuokkaParser.GreaterThanOrEquals, 0); }
		public ArithmeticComparisonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticComparisonExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticComparisonExpressionContext arithmeticComparisonExpression() {
		ArithmeticComparisonExpressionContext _localctx = new ArithmeticComparisonExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_arithmeticComparisonExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; arithmeticExpression();
			State = 245;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equals) | (1L << NotEquals) | (1L << GreaterThan) | (1L << LessThan) | (1L << GreaterThanOrEquals) | (1L << LessThanOrEquals))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			State = 246; arithmeticExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticExpressionContext : ParserRuleContext {
		public MultiplicationExpressionContext[] multiplicationExpression() {
			return GetRuleContexts<MultiplicationExpressionContext>();
		}
		public MultiplicationExpressionContext multiplicationExpression(int i) {
			return GetRuleContext<MultiplicationExpressionContext>(i);
		}
		public ITerminalNode[] Plus() { return GetTokens(QuokkaParser.Plus); }
		public ITerminalNode Plus(int i) {
			return GetToken(QuokkaParser.Plus, i);
		}
		public ITerminalNode[] Minus() { return GetTokens(QuokkaParser.Minus); }
		public ITerminalNode Minus(int i) {
			return GetToken(QuokkaParser.Minus, i);
		}
		public ArithmeticExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticExpressionContext arithmeticExpression() {
		ArithmeticExpressionContext _localctx = new ArithmeticExpressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_arithmeticExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; multiplicationExpression();
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Plus || _la==Minus) {
				{
				{
				State = 249;
				_la = TokenStream.La(1);
				if ( !(_la==Plus || _la==Minus) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 250; multiplicationExpression();
				}
				}
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicationExpressionContext : ParserRuleContext {
		public ArithmeticAtomContext[] arithmeticAtom() {
			return GetRuleContexts<ArithmeticAtomContext>();
		}
		public ArithmeticAtomContext arithmeticAtom(int i) {
			return GetRuleContext<ArithmeticAtomContext>(i);
		}
		public ITerminalNode[] Multiply() { return GetTokens(QuokkaParser.Multiply); }
		public ITerminalNode Multiply(int i) {
			return GetToken(QuokkaParser.Multiply, i);
		}
		public ITerminalNode[] Divide() { return GetTokens(QuokkaParser.Divide); }
		public ITerminalNode Divide(int i) {
			return GetToken(QuokkaParser.Divide, i);
		}
		public MultiplicationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicationExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicationExpressionContext multiplicationExpression() {
		MultiplicationExpressionContext _localctx = new MultiplicationExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_multiplicationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; arithmeticAtom();
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==Multiply || _la==Divide) {
				{
				{
				State = 257;
				_la = TokenStream.La(1);
				if ( !(_la==Multiply || _la==Divide) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 258; arithmeticAtom();
				}
				}
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NegationExpressionContext : ParserRuleContext {
		public ITerminalNode Minus() { return GetToken(QuokkaParser.Minus, 0); }
		public ArithmeticAtomContext arithmeticAtom() {
			return GetRuleContext<ArithmeticAtomContext>(0);
		}
		public NegationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_negationExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NegationExpressionContext negationExpression() {
		NegationExpressionContext _localctx = new NegationExpressionContext(Context, State);
		EnterRule(_localctx, 72, RULE_negationExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; Match(Minus);
			State = 265; arithmeticAtom();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArithmeticAtomContext : ParserRuleContext {
		public ITerminalNode Number() { return GetToken(QuokkaParser.Number, 0); }
		public ParameterValueExpressionContext parameterValueExpression() {
			return GetRuleContext<ParameterValueExpressionContext>(0);
		}
		public NegationExpressionContext negationExpression() {
			return GetRuleContext<NegationExpressionContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(QuokkaParser.LeftParen, 0); }
		public ArithmeticExpressionContext arithmeticExpression() {
			return GetRuleContext<ArithmeticExpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(QuokkaParser.RightParen, 0); }
		public ArithmeticAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmeticAtom; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaVisitor<TResult> typedVisitor = visitor as IQuokkaVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArithmeticAtomContext arithmeticAtom() {
		ArithmeticAtomContext _localctx = new ArithmeticAtomContext(Context, State);
		EnterRule(_localctx, 74, RULE_arithmeticAtom);
		try {
			State = 274;
			switch (TokenStream.La(1)) {
			case Number:
				EnterOuterAlt(_localctx, 1);
				{
				State = 267; Match(Number);
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 268; parameterValueExpression();
				}
				break;
			case Minus:
				EnterOuterAlt(_localctx, 3);
				{
				State = 269; negationExpression();
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 4);
				{
				State = 270; Match(LeftParen);
				State = 271; arithmeticExpression();
				State = 272; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3(\x117\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x4&\t&\x4\'\t\'\x3\x2\x3\x2\x3\x3\x3"+
		"\x3\x6\x3S\n\x3\r\x3\xE\x3T\x3\x4\x3\x4\x6\x4Y\n\x4\r\x4\xE\x4Z\x3\x5"+
		"\x3\x5\x3\x5\x5\x5`\n\x5\x3\x6\x6\x6\x63\n\x6\r\x6\xE\x6\x64\x3\a\x3\a"+
		"\x3\a\x5\aj\n\a\x3\a\x3\a\x3\b\x3\b\x5\bp\n\b\x3\t\x3\t\x3\n\x3\n\x3\n"+
		"\x5\nw\n\n\x3\v\x3\v\x5\v{\n\v\x3\f\x3\f\x6\f\x7F\n\f\r\f\xE\f\x80\x3"+
		"\r\x3\r\x5\r\x85\n\r\x3\xE\x3\xE\x3\xE\x3\xE\a\xE\x8B\n\xE\f\xE\xE\xE"+
		"\x8E\v\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\a\x10\x96\n\x10\f\x10"+
		"\xE\x10\x99\v\x10\x3\x10\x5\x10\x9C\n\x10\x3\x10\x3\x10\x3\x11\x3\x11"+
		"\x3\x11\x3\x12\x3\x12\x3\x12\x3\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14"+
		"\x3\x14\x3\x14\x3\x15\x3\x15\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16"+
		"\x3\x16\x3\x17\x3\x17\x3\x17\x3\x17\x3\x18\x3\x18\x3\x18\x3\x18\x3\x19"+
		"\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x5\x1C\xD1\n\x1C\x3"+
		"\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3\x1F\x3"+
		"\x1F\a\x1F\xDE\n\x1F\f\x1F\xE\x1F\xE1\v\x1F\x3 \x3 \x3 \a \xE6\n \f \xE"+
		" \xE9\v \x3!\x3!\x3!\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x3\"\x5\"\xF5\n\"\x3"+
		"#\x3#\x3#\x3#\x3$\x3$\x3$\a$\xFE\n$\f$\xE$\x101\v$\x3%\x3%\x3%\a%\x106"+
		"\n%\f%\xE%\x109\v%\x3&\x3&\x3&\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x3\'\x5\'"+
		"\x115\n\'\x3\'\x2\x2(\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C\x1E"+
		" \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46HJL\x2\x5\x3\x2\x1A\x1F\x3"+
		"\x2 !\x3\x2\"#\x10B\x2N\x3\x2\x2\x2\x4R\x3\x2\x2\x2\x6X\x3\x2\x2\x2\b"+
		"_\x3\x2\x2\x2\n\x62\x3\x2\x2\x2\f\x66\x3\x2\x2\x2\xEm\x3\x2\x2\x2\x10"+
		"q\x3\x2\x2\x2\x12s\x3\x2\x2\x2\x14x\x3\x2\x2\x2\x16~\x3\x2\x2\x2\x18\x82"+
		"\x3\x2\x2\x2\x1A\x86\x3\x2\x2\x2\x1C\x91\x3\x2\x2\x2\x1E\x93\x3\x2\x2"+
		"\x2 \x9F\x3\x2\x2\x2\"\xA2\x3\x2\x2\x2$\xA5\x3\x2\x2\x2&\xA8\x3\x2\x2"+
		"\x2(\xAD\x3\x2\x2\x2*\xB2\x3\x2\x2\x2,\xB6\x3\x2\x2\x2.\xBA\x3\x2\x2\x2"+
		"\x30\xBE\x3\x2\x2\x2\x32\xC5\x3\x2\x2\x2\x34\xC7\x3\x2\x2\x2\x36\xD0\x3"+
		"\x2\x2\x2\x38\xD2\x3\x2\x2\x2:\xD6\x3\x2\x2\x2<\xDA\x3\x2\x2\x2>\xE2\x3"+
		"\x2\x2\x2@\xEA\x3\x2\x2\x2\x42\xF4\x3\x2\x2\x2\x44\xF6\x3\x2\x2\x2\x46"+
		"\xFA\x3\x2\x2\x2H\x102\x3\x2\x2\x2J\x10A\x3\x2\x2\x2L\x114\x3\x2\x2\x2"+
		"NO\x5\x4\x3\x2O\x3\x3\x2\x2\x2PS\x5\x6\x4\x2QS\x5\b\x5\x2RP\x3\x2\x2\x2"+
		"RQ\x3\x2\x2\x2ST\x3\x2\x2\x2TR\x3\x2\x2\x2TU\x3\x2\x2\x2U\x5\x3\x2\x2"+
		"\x2VY\x5\n\x6\x2WY\x5\f\a\x2XV\x3\x2\x2\x2XW\x3\x2\x2\x2YZ\x3\x2\x2\x2"+
		"ZX\x3\x2\x2\x2Z[\x3\x2\x2\x2[\a\x3\x2\x2\x2\\`\x5\x1E\x10\x2]`\x5.\x18"+
		"\x2^`\x5\x36\x1C\x2_\\\x3\x2\x2\x2_]\x3\x2\x2\x2_^\x3\x2\x2\x2`\t\x3\x2"+
		"\x2\x2\x61\x63\a\x6\x2\x2\x62\x61\x3\x2\x2\x2\x63\x64\x3\x2\x2\x2\x64"+
		"\x62\x3\x2\x2\x2\x64\x65\x3\x2\x2\x2\x65\v\x3\x2\x2\x2\x66i\a\x4\x2\x2"+
		"gj\x5\x14\v\x2hj\x5\x46$\x2ig\x3\x2\x2\x2ih\x3\x2\x2\x2jk\x3\x2\x2\x2"+
		"kl\a\a\x2\x2l\r\x3\x2\x2\x2mo\x5\x10\t\x2np\x5\x12\n\x2on\x3\x2\x2\x2"+
		"op\x3\x2\x2\x2p\xF\x3\x2\x2\x2qr\a\'\x2\x2r\x11\x3\x2\x2\x2st\a\x12\x2"+
		"\x2tv\a\'\x2\x2uw\x5\x12\n\x2vu\x3\x2\x2\x2vw\x3\x2\x2\x2w\x13\x3\x2\x2"+
		"\x2xz\x5\xE\b\x2y{\x5\x16\f\x2zy\x3\x2\x2\x2z{\x3\x2\x2\x2{\x15\x3\x2"+
		"\x2\x2|}\a\x13\x2\x2}\x7F\x5\x18\r\x2~|\x3\x2\x2\x2\x7F\x80\x3\x2\x2\x2"+
		"\x80~\x3\x2\x2\x2\x80\x81\x3\x2\x2\x2\x81\x17\x3\x2\x2\x2\x82\x84\a\'"+
		"\x2\x2\x83\x85\x5\x1A\xE\x2\x84\x83\x3\x2\x2\x2\x84\x85\x3\x2\x2\x2\x85"+
		"\x19\x3\x2\x2\x2\x86\x87\a\x15\x2\x2\x87\x8C\x5\x1C\xF\x2\x88\x89\a\x14"+
		"\x2\x2\x89\x8B\x5\x1C\xF\x2\x8A\x88\x3\x2\x2\x2\x8B\x8E\x3\x2\x2\x2\x8C"+
		"\x8A\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x8F\x3\x2\x2\x2\x8E\x8C\x3\x2"+
		"\x2\x2\x8F\x90\a\x16\x2\x2\x90\x1B\x3\x2\x2\x2\x91\x92\a&\x2\x2\x92\x1D"+
		"\x3\x2\x2\x2\x93\x97\x5 \x11\x2\x94\x96\x5$\x13\x2\x95\x94\x3\x2\x2\x2"+
		"\x96\x99\x3\x2\x2\x2\x97\x95\x3\x2\x2\x2\x97\x98\x3\x2\x2\x2\x98\x9B\x3"+
		"\x2\x2\x2\x99\x97\x3\x2\x2\x2\x9A\x9C\x5\"\x12\x2\x9B\x9A\x3\x2\x2\x2"+
		"\x9B\x9C\x3\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x9E\x5,\x17\x2\x9E\x1F\x3"+
		"\x2\x2\x2\x9F\xA0\x5&\x14\x2\xA0\xA1\x5\x4\x3\x2\xA1!\x3\x2\x2\x2\xA2"+
		"\xA3\x5*\x16\x2\xA3\xA4\x5\x4\x3\x2\xA4#\x3\x2\x2\x2\xA5\xA6\x5(\x15\x2"+
		"\xA6\xA7\x5\x4\x3\x2\xA7%\x3\x2\x2\x2\xA8\xA9\a\x5\x2\x2\xA9\xAA\a\b\x2"+
		"\x2\xAA\xAB\x5<\x1F\x2\xAB\xAC\a\a\x2\x2\xAC\'\x3\x2\x2\x2\xAD\xAE\a\x5"+
		"\x2\x2\xAE\xAF\a\f\x2\x2\xAF\xB0\x5<\x1F\x2\xB0\xB1\a\a\x2\x2\xB1)\x3"+
		"\x2\x2\x2\xB2\xB3\a\x5\x2\x2\xB3\xB4\a\v\x2\x2\xB4\xB5\a\a\x2\x2\xB5+"+
		"\x3\x2\x2\x2\xB6\xB7\a\x5\x2\x2\xB7\xB8\a\t\x2\x2\xB8\xB9\a\a\x2\x2\xB9"+
		"-\x3\x2\x2\x2\xBA\xBB\x5\x30\x19\x2\xBB\xBC\x5\x4\x3\x2\xBC\xBD\x5\x34"+
		"\x1B\x2\xBD/\x3\x2\x2\x2\xBE\xBF\a\x5\x2\x2\xBF\xC0\a\r\x2\x2\xC0\xC1"+
		"\x5\x32\x1A\x2\xC1\xC2\a\xE\x2\x2\xC2\xC3\x5\xE\b\x2\xC3\xC4\a\a\x2\x2"+
		"\xC4\x31\x3\x2\x2\x2\xC5\xC6\a\'\x2\x2\xC6\x33\x3\x2\x2\x2\xC7\xC8\a\x5"+
		"\x2\x2\xC8\xC9\a\xF\x2\x2\xC9\xCA\a\a\x2\x2\xCA\x35\x3\x2\x2\x2\xCB\xD1"+
		"\a\x3\x2\x2\xCC\xCD\x5\x38\x1D\x2\xCD\xCE\x5\x4\x3\x2\xCE\xCF\x5:\x1E"+
		"\x2\xCF\xD1\x3\x2\x2\x2\xD0\xCB\x3\x2\x2\x2\xD0\xCC\x3\x2\x2\x2\xD1\x37"+
		"\x3\x2\x2\x2\xD2\xD3\a\x5\x2\x2\xD3\xD4\a\x10\x2\x2\xD4\xD5\a\a\x2\x2"+
		"\xD5\x39\x3\x2\x2\x2\xD6\xD7\a\x5\x2\x2\xD7\xD8\a\x11\x2\x2\xD8\xD9\a"+
		"\a\x2\x2\xD9;\x3\x2\x2\x2\xDA\xDF\x5> \x2\xDB\xDC\a\x18\x2\x2\xDC\xDE"+
		"\x5> \x2\xDD\xDB\x3\x2\x2\x2\xDE\xE1\x3\x2\x2\x2\xDF\xDD\x3\x2\x2\x2\xDF"+
		"\xE0\x3\x2\x2\x2\xE0=\x3\x2\x2\x2\xE1\xDF\x3\x2\x2\x2\xE2\xE7\x5\x42\""+
		"\x2\xE3\xE4\a\x17\x2\x2\xE4\xE6\x5\x42\"\x2\xE5\xE3\x3\x2\x2\x2\xE6\xE9"+
		"\x3\x2\x2\x2\xE7\xE5\x3\x2\x2\x2\xE7\xE8\x3\x2\x2\x2\xE8?\x3\x2\x2\x2"+
		"\xE9\xE7\x3\x2\x2\x2\xEA\xEB\a\x19\x2\x2\xEB\xEC\x5\x42\"\x2\xEC\x41\x3"+
		"\x2\x2\x2\xED\xF5\x5\xE\b\x2\xEE\xF5\x5\x44#\x2\xEF\xF5\x5@!\x2\xF0\xF1"+
		"\a\x15\x2\x2\xF1\xF2\x5<\x1F\x2\xF2\xF3\a\x16\x2\x2\xF3\xF5\x3\x2\x2\x2"+
		"\xF4\xED\x3\x2\x2\x2\xF4\xEE\x3\x2\x2\x2\xF4\xEF\x3\x2\x2\x2\xF4\xF0\x3"+
		"\x2\x2\x2\xF5\x43\x3\x2\x2\x2\xF6\xF7\x5\x46$\x2\xF7\xF8\t\x2\x2\x2\xF8"+
		"\xF9\x5\x46$\x2\xF9\x45\x3\x2\x2\x2\xFA\xFF\x5H%\x2\xFB\xFC\t\x3\x2\x2"+
		"\xFC\xFE\x5H%\x2\xFD\xFB\x3\x2\x2\x2\xFE\x101\x3\x2\x2\x2\xFF\xFD\x3\x2"+
		"\x2\x2\xFF\x100\x3\x2\x2\x2\x100G\x3\x2\x2\x2\x101\xFF\x3\x2\x2\x2\x102"+
		"\x107\x5L\'\x2\x103\x104\t\x4\x2\x2\x104\x106\x5L\'\x2\x105\x103\x3\x2"+
		"\x2\x2\x106\x109\x3\x2\x2\x2\x107\x105\x3\x2\x2\x2\x107\x108\x3\x2\x2"+
		"\x2\x108I\x3\x2\x2\x2\x109\x107\x3\x2\x2\x2\x10A\x10B\a!\x2\x2\x10B\x10C"+
		"\x5L\'\x2\x10CK\x3\x2\x2\x2\x10D\x115\a$\x2\x2\x10E\x115\x5\xE\b\x2\x10F"+
		"\x115\x5J&\x2\x110\x111\a\x15\x2\x2\x111\x112\x5\x46$\x2\x112\x113\a\x16"+
		"\x2\x2\x113\x115\x3\x2\x2\x2\x114\x10D\x3\x2\x2\x2\x114\x10E\x3\x2\x2"+
		"\x2\x114\x10F\x3\x2\x2\x2\x114\x110\x3\x2\x2\x2\x115M\x3\x2\x2\x2\x18"+
		"RTXZ_\x64iovz\x80\x84\x8C\x97\x9B\xD0\xDF\xE7\xF4\xFF\x107\x114";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Quokka.Generated
