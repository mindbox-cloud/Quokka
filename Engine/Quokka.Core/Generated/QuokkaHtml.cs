//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\Ivonin\Code\Quokka\Grammar\Quokka\QuokkaHtml.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Quokka.Generated {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
internal partial class QuokkaHtml : Parser {
	public const int
		HtmlComment=1, HtmlDtd=2, CDATA=3, LeftAngularBracket=4, OutputBlock=5, 
		Fluff=6, RightAngularBracket=7, Slash=8, TAG_EQUALS=9, TAG_NAME=10, TAG_WHITESPACE=11, 
		SCRIPT_BODY=12, SCRIPT_SHORT_BODY=13, STYLE_BODY=14, STYLE_SHORT_BODY=15, 
		UNQUOTED_ATTRIBUTE=16, OpeningDoubleQuotes=17, OpeningSingleQuotes=18, 
		UnquotedOutputBlock=19, ClosingDoubleQuotes=20, DQS_OUTPUTBLOCK=21, DQS_FLUFF=22, 
		ClosingSingleQuotes=23, SQS_OUTPUTBLOCK=24, SQS_FLUFF=25;
	public const int
		RULE_htmlBlock = 0, RULE_nonImportantHtml = 1, RULE_plainText = 2, RULE_attribute = 3, 
		RULE_attributeValue = 4, RULE_unquotedValue = 5, RULE_singleQuotedValue = 6, 
		RULE_doubleQuotedValue = 7, RULE_insideAttributeOutputBlock = 8, RULE_insideAttributeConstant = 9, 
		RULE_openingTag = 10, RULE_closingTag = 11, RULE_selfClosingTag = 12;
	public static readonly string[] ruleNames = {
		"htmlBlock", "nonImportantHtml", "plainText", "attribute", "attributeValue", 
		"unquotedValue", "singleQuotedValue", "doubleQuotedValue", "insideAttributeOutputBlock", 
		"insideAttributeConstant", "openingTag", "closingTag", "selfClosingTag"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'<'", null, null, "'>'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HtmlComment", "HtmlDtd", "CDATA", "LeftAngularBracket", "OutputBlock", 
		"Fluff", "RightAngularBracket", "Slash", "TAG_EQUALS", "TAG_NAME", "TAG_WHITESPACE", 
		"SCRIPT_BODY", "SCRIPT_SHORT_BODY", "STYLE_BODY", "STYLE_SHORT_BODY", 
		"UNQUOTED_ATTRIBUTE", "OpeningDoubleQuotes", "OpeningSingleQuotes", "UnquotedOutputBlock", 
		"ClosingDoubleQuotes", "DQS_OUTPUTBLOCK", "DQS_FLUFF", "ClosingSingleQuotes", 
		"SQS_OUTPUTBLOCK", "SQS_FLUFF"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QuokkaHtml.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public QuokkaHtml(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class HtmlBlockContext : ParserRuleContext {
		public OpeningTagContext[] openingTag() {
			return GetRuleContexts<OpeningTagContext>();
		}
		public OpeningTagContext openingTag(int i) {
			return GetRuleContext<OpeningTagContext>(i);
		}
		public ClosingTagContext[] closingTag() {
			return GetRuleContexts<ClosingTagContext>();
		}
		public ClosingTagContext closingTag(int i) {
			return GetRuleContext<ClosingTagContext>(i);
		}
		public SelfClosingTagContext[] selfClosingTag() {
			return GetRuleContexts<SelfClosingTagContext>();
		}
		public SelfClosingTagContext selfClosingTag(int i) {
			return GetRuleContext<SelfClosingTagContext>(i);
		}
		public PlainTextContext[] plainText() {
			return GetRuleContexts<PlainTextContext>();
		}
		public PlainTextContext plainText(int i) {
			return GetRuleContext<PlainTextContext>(i);
		}
		public NonImportantHtmlContext[] nonImportantHtml() {
			return GetRuleContexts<NonImportantHtmlContext>();
		}
		public NonImportantHtmlContext nonImportantHtml(int i) {
			return GetRuleContext<NonImportantHtmlContext>(i);
		}
		public HtmlBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlBlockContext htmlBlock() {
		HtmlBlockContext _localctx = new HtmlBlockContext(Context, State);
		EnterRule(_localctx, 0, RULE_htmlBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				State = 31;
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 26; openingTag();
					}
					break;
				case 2:
					{
					State = 27; closingTag();
					}
					break;
				case 3:
					{
					State = 28; selfClosingTag();
					}
					break;
				case 4:
					{
					State = 29; plainText();
					}
					break;
				case 5:
					{
					State = 30; nonImportantHtml();
					}
					break;
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HtmlComment) | (1L << HtmlDtd) | (1L << CDATA) | (1L << LeftAngularBracket) | (1L << OutputBlock) | (1L << Fluff))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonImportantHtmlContext : ParserRuleContext {
		public ITerminalNode HtmlComment() { return GetToken(QuokkaHtml.HtmlComment, 0); }
		public ITerminalNode HtmlDtd() { return GetToken(QuokkaHtml.HtmlDtd, 0); }
		public ITerminalNode CDATA() { return GetToken(QuokkaHtml.CDATA, 0); }
		public NonImportantHtmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonImportantHtml; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonImportantHtml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonImportantHtmlContext nonImportantHtml() {
		NonImportantHtmlContext _localctx = new NonImportantHtmlContext(Context, State);
		EnterRule(_localctx, 2, RULE_nonImportantHtml);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HtmlComment) | (1L << HtmlDtd) | (1L << CDATA))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlainTextContext : ParserRuleContext {
		public ITerminalNode[] Fluff() { return GetTokens(QuokkaHtml.Fluff); }
		public ITerminalNode Fluff(int i) {
			return GetToken(QuokkaHtml.Fluff, i);
		}
		public ITerminalNode[] OutputBlock() { return GetTokens(QuokkaHtml.OutputBlock); }
		public ITerminalNode OutputBlock(int i) {
			return GetToken(QuokkaHtml.OutputBlock, i);
		}
		public PlainTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plainText; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlainText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlainTextContext plainText() {
		PlainTextContext _localctx = new PlainTextContext(Context, State);
		EnterRule(_localctx, 4, RULE_plainText);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 37;
					_la = TokenStream.La(1);
					if ( !(_la==OutputBlock || _la==Fluff) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 40;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode TAG_NAME() { return GetToken(QuokkaHtml.TAG_NAME, 0); }
		public ITerminalNode TAG_EQUALS() { return GetToken(QuokkaHtml.TAG_EQUALS, 0); }
		public AttributeValueContext attributeValue() {
			return GetRuleContext<AttributeValueContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 6, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(TAG_NAME);
			State = 45;
			_la = TokenStream.La(1);
			if (_la==TAG_EQUALS) {
				{
				State = 43; Match(TAG_EQUALS);
				State = 44; attributeValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeValueContext : ParserRuleContext {
		public DoubleQuotedValueContext doubleQuotedValue() {
			return GetRuleContext<DoubleQuotedValueContext>(0);
		}
		public SingleQuotedValueContext singleQuotedValue() {
			return GetRuleContext<SingleQuotedValueContext>(0);
		}
		public UnquotedValueContext unquotedValue() {
			return GetRuleContext<UnquotedValueContext>(0);
		}
		public AttributeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeValueContext attributeValue() {
		AttributeValueContext _localctx = new AttributeValueContext(Context, State);
		EnterRule(_localctx, 8, RULE_attributeValue);
		try {
			State = 50;
			switch (TokenStream.La(1)) {
			case OpeningDoubleQuotes:
				EnterOuterAlt(_localctx, 1);
				{
				State = 47; doubleQuotedValue();
				}
				break;
			case OpeningSingleQuotes:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48; singleQuotedValue();
				}
				break;
			case UNQUOTED_ATTRIBUTE:
			case UnquotedOutputBlock:
			case DQS_OUTPUTBLOCK:
			case DQS_FLUFF:
			case SQS_OUTPUTBLOCK:
			case SQS_FLUFF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 49; unquotedValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnquotedValueContext : ParserRuleContext {
		public InsideAttributeConstantContext insideAttributeConstant() {
			return GetRuleContext<InsideAttributeConstantContext>(0);
		}
		public InsideAttributeOutputBlockContext insideAttributeOutputBlock() {
			return GetRuleContext<InsideAttributeOutputBlockContext>(0);
		}
		public UnquotedValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unquotedValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnquotedValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnquotedValueContext unquotedValue() {
		UnquotedValueContext _localctx = new UnquotedValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_unquotedValue);
		try {
			State = 54;
			switch (TokenStream.La(1)) {
			case UNQUOTED_ATTRIBUTE:
			case DQS_FLUFF:
			case SQS_FLUFF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52; insideAttributeConstant();
				}
				break;
			case UnquotedOutputBlock:
			case DQS_OUTPUTBLOCK:
			case SQS_OUTPUTBLOCK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 53; insideAttributeOutputBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleQuotedValueContext : ParserRuleContext {
		public ITerminalNode OpeningSingleQuotes() { return GetToken(QuokkaHtml.OpeningSingleQuotes, 0); }
		public ITerminalNode ClosingSingleQuotes() { return GetToken(QuokkaHtml.ClosingSingleQuotes, 0); }
		public InsideAttributeOutputBlockContext[] insideAttributeOutputBlock() {
			return GetRuleContexts<InsideAttributeOutputBlockContext>();
		}
		public InsideAttributeOutputBlockContext insideAttributeOutputBlock(int i) {
			return GetRuleContext<InsideAttributeOutputBlockContext>(i);
		}
		public InsideAttributeConstantContext[] insideAttributeConstant() {
			return GetRuleContexts<InsideAttributeConstantContext>();
		}
		public InsideAttributeConstantContext insideAttributeConstant(int i) {
			return GetRuleContext<InsideAttributeConstantContext>(i);
		}
		public SingleQuotedValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleQuotedValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleQuotedValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleQuotedValueContext singleQuotedValue() {
		SingleQuotedValueContext _localctx = new SingleQuotedValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_singleQuotedValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56; Match(OpeningSingleQuotes);
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UNQUOTED_ATTRIBUTE) | (1L << UnquotedOutputBlock) | (1L << DQS_OUTPUTBLOCK) | (1L << DQS_FLUFF) | (1L << SQS_OUTPUTBLOCK) | (1L << SQS_FLUFF))) != 0)) {
				{
				State = 59;
				switch (TokenStream.La(1)) {
				case UnquotedOutputBlock:
				case DQS_OUTPUTBLOCK:
				case SQS_OUTPUTBLOCK:
					{
					State = 57; insideAttributeOutputBlock();
					}
					break;
				case UNQUOTED_ATTRIBUTE:
				case DQS_FLUFF:
				case SQS_FLUFF:
					{
					State = 58; insideAttributeConstant();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 64; Match(ClosingSingleQuotes);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleQuotedValueContext : ParserRuleContext {
		public ITerminalNode OpeningDoubleQuotes() { return GetToken(QuokkaHtml.OpeningDoubleQuotes, 0); }
		public ITerminalNode ClosingDoubleQuotes() { return GetToken(QuokkaHtml.ClosingDoubleQuotes, 0); }
		public InsideAttributeOutputBlockContext[] insideAttributeOutputBlock() {
			return GetRuleContexts<InsideAttributeOutputBlockContext>();
		}
		public InsideAttributeOutputBlockContext insideAttributeOutputBlock(int i) {
			return GetRuleContext<InsideAttributeOutputBlockContext>(i);
		}
		public InsideAttributeConstantContext[] insideAttributeConstant() {
			return GetRuleContexts<InsideAttributeConstantContext>();
		}
		public InsideAttributeConstantContext insideAttributeConstant(int i) {
			return GetRuleContext<InsideAttributeConstantContext>(i);
		}
		public DoubleQuotedValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleQuotedValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleQuotedValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleQuotedValueContext doubleQuotedValue() {
		DoubleQuotedValueContext _localctx = new DoubleQuotedValueContext(Context, State);
		EnterRule(_localctx, 14, RULE_doubleQuotedValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66; Match(OpeningDoubleQuotes);
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UNQUOTED_ATTRIBUTE) | (1L << UnquotedOutputBlock) | (1L << DQS_OUTPUTBLOCK) | (1L << DQS_FLUFF) | (1L << SQS_OUTPUTBLOCK) | (1L << SQS_FLUFF))) != 0)) {
				{
				State = 69;
				switch (TokenStream.La(1)) {
				case UnquotedOutputBlock:
				case DQS_OUTPUTBLOCK:
				case SQS_OUTPUTBLOCK:
					{
					State = 67; insideAttributeOutputBlock();
					}
					break;
				case UNQUOTED_ATTRIBUTE:
				case DQS_FLUFF:
				case SQS_FLUFF:
					{
					State = 68; insideAttributeConstant();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 74; Match(ClosingDoubleQuotes);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsideAttributeOutputBlockContext : ParserRuleContext {
		public ITerminalNode SQS_OUTPUTBLOCK() { return GetToken(QuokkaHtml.SQS_OUTPUTBLOCK, 0); }
		public ITerminalNode DQS_OUTPUTBLOCK() { return GetToken(QuokkaHtml.DQS_OUTPUTBLOCK, 0); }
		public ITerminalNode UnquotedOutputBlock() { return GetToken(QuokkaHtml.UnquotedOutputBlock, 0); }
		public InsideAttributeOutputBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insideAttributeOutputBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsideAttributeOutputBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsideAttributeOutputBlockContext insideAttributeOutputBlock() {
		InsideAttributeOutputBlockContext _localctx = new InsideAttributeOutputBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_insideAttributeOutputBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UnquotedOutputBlock) | (1L << DQS_OUTPUTBLOCK) | (1L << SQS_OUTPUTBLOCK))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsideAttributeConstantContext : ParserRuleContext {
		public ITerminalNode SQS_FLUFF() { return GetToken(QuokkaHtml.SQS_FLUFF, 0); }
		public ITerminalNode DQS_FLUFF() { return GetToken(QuokkaHtml.DQS_FLUFF, 0); }
		public ITerminalNode UNQUOTED_ATTRIBUTE() { return GetToken(QuokkaHtml.UNQUOTED_ATTRIBUTE, 0); }
		public InsideAttributeConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insideAttributeConstant; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsideAttributeConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsideAttributeConstantContext insideAttributeConstant() {
		InsideAttributeConstantContext _localctx = new InsideAttributeConstantContext(Context, State);
		EnterRule(_localctx, 18, RULE_insideAttributeConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << UNQUOTED_ATTRIBUTE) | (1L << DQS_FLUFF) | (1L << SQS_FLUFF))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpeningTagContext : ParserRuleContext {
		public ITerminalNode LeftAngularBracket() { return GetToken(QuokkaHtml.LeftAngularBracket, 0); }
		public ITerminalNode TAG_NAME() { return GetToken(QuokkaHtml.TAG_NAME, 0); }
		public ITerminalNode RightAngularBracket() { return GetToken(QuokkaHtml.RightAngularBracket, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public OpeningTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openingTag; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpeningTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpeningTagContext openingTag() {
		OpeningTagContext _localctx = new OpeningTagContext(Context, State);
		EnterRule(_localctx, 20, RULE_openingTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80; Match(LeftAngularBracket);
			State = 81; Match(TAG_NAME);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TAG_NAME) {
				{
				{
				State = 82; attribute();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 88; Match(RightAngularBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosingTagContext : ParserRuleContext {
		public ITerminalNode LeftAngularBracket() { return GetToken(QuokkaHtml.LeftAngularBracket, 0); }
		public ITerminalNode Slash() { return GetToken(QuokkaHtml.Slash, 0); }
		public ITerminalNode TAG_NAME() { return GetToken(QuokkaHtml.TAG_NAME, 0); }
		public ITerminalNode RightAngularBracket() { return GetToken(QuokkaHtml.RightAngularBracket, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ClosingTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closingTag; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosingTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClosingTagContext closingTag() {
		ClosingTagContext _localctx = new ClosingTagContext(Context, State);
		EnterRule(_localctx, 22, RULE_closingTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90; Match(LeftAngularBracket);
			State = 91; Match(Slash);
			State = 92; Match(TAG_NAME);
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TAG_NAME) {
				{
				{
				State = 93; attribute();
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 99; Match(RightAngularBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelfClosingTagContext : ParserRuleContext {
		public ITerminalNode LeftAngularBracket() { return GetToken(QuokkaHtml.LeftAngularBracket, 0); }
		public ITerminalNode TAG_NAME() { return GetToken(QuokkaHtml.TAG_NAME, 0); }
		public ITerminalNode Slash() { return GetToken(QuokkaHtml.Slash, 0); }
		public ITerminalNode RightAngularBracket() { return GetToken(QuokkaHtml.RightAngularBracket, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SelfClosingTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selfClosingTag; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfClosingTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelfClosingTagContext selfClosingTag() {
		SelfClosingTagContext _localctx = new SelfClosingTagContext(Context, State);
		EnterRule(_localctx, 24, RULE_selfClosingTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101; Match(LeftAngularBracket);
			State = 102; Match(TAG_NAME);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TAG_NAME) {
				{
				{
				State = 103; attribute();
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 109; Match(Slash);
			State = 110; Match(RightAngularBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x1Bs\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x3\x2\x3\x2\x3\x2\x3"+
		"\x2\x3\x2\x6\x2\"\n\x2\r\x2\xE\x2#\x3\x3\x3\x3\x3\x4\x6\x4)\n\x4\r\x4"+
		"\xE\x4*\x3\x5\x3\x5\x3\x5\x5\x5\x30\n\x5\x3\x6\x3\x6\x3\x6\x5\x6\x35\n"+
		"\x6\x3\a\x3\a\x5\a\x39\n\a\x3\b\x3\b\x3\b\a\b>\n\b\f\b\xE\b\x41\v\b\x3"+
		"\b\x3\b\x3\t\x3\t\x3\t\a\tH\n\t\f\t\xE\tK\v\t\x3\t\x3\t\x3\n\x3\n\x3\v"+
		"\x3\v\x3\f\x3\f\x3\f\a\fV\n\f\f\f\xE\fY\v\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3"+
		"\r\a\r\x61\n\r\f\r\xE\r\x64\v\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\a\xEk\n\xE"+
		"\f\xE\xE\xEn\v\xE\x3\xE\x3\xE\x3\xE\x3\xE\x2\x2\xF\x2\x4\x6\b\n\f\xE\x10"+
		"\x12\x14\x16\x18\x1A\x2\x6\x3\x2\x3\x5\x3\x2\a\b\x5\x2\x15\x15\x17\x17"+
		"\x1A\x1A\x5\x2\x12\x12\x18\x18\x1B\x1Bv\x2!\x3\x2\x2\x2\x4%\x3\x2\x2\x2"+
		"\x6(\x3\x2\x2\x2\b,\x3\x2\x2\x2\n\x34\x3\x2\x2\x2\f\x38\x3\x2\x2\x2\xE"+
		":\x3\x2\x2\x2\x10\x44\x3\x2\x2\x2\x12N\x3\x2\x2\x2\x14P\x3\x2\x2\x2\x16"+
		"R\x3\x2\x2\x2\x18\\\x3\x2\x2\x2\x1Ag\x3\x2\x2\x2\x1C\"\x5\x16\f\x2\x1D"+
		"\"\x5\x18\r\x2\x1E\"\x5\x1A\xE\x2\x1F\"\x5\x6\x4\x2 \"\x5\x4\x3\x2!\x1C"+
		"\x3\x2\x2\x2!\x1D\x3\x2\x2\x2!\x1E\x3\x2\x2\x2!\x1F\x3\x2\x2\x2! \x3\x2"+
		"\x2\x2\"#\x3\x2\x2\x2#!\x3\x2\x2\x2#$\x3\x2\x2\x2$\x3\x3\x2\x2\x2%&\t"+
		"\x2\x2\x2&\x5\x3\x2\x2\x2\')\t\x3\x2\x2(\'\x3\x2\x2\x2)*\x3\x2\x2\x2*"+
		"(\x3\x2\x2\x2*+\x3\x2\x2\x2+\a\x3\x2\x2\x2,/\a\f\x2\x2-.\a\v\x2\x2.\x30"+
		"\x5\n\x6\x2/-\x3\x2\x2\x2/\x30\x3\x2\x2\x2\x30\t\x3\x2\x2\x2\x31\x35\x5"+
		"\x10\t\x2\x32\x35\x5\xE\b\x2\x33\x35\x5\f\a\x2\x34\x31\x3\x2\x2\x2\x34"+
		"\x32\x3\x2\x2\x2\x34\x33\x3\x2\x2\x2\x35\v\x3\x2\x2\x2\x36\x39\x5\x14"+
		"\v\x2\x37\x39\x5\x12\n\x2\x38\x36\x3\x2\x2\x2\x38\x37\x3\x2\x2\x2\x39"+
		"\r\x3\x2\x2\x2:?\a\x14\x2\x2;>\x5\x12\n\x2<>\x5\x14\v\x2=;\x3\x2\x2\x2"+
		"=<\x3\x2\x2\x2>\x41\x3\x2\x2\x2?=\x3\x2\x2\x2?@\x3\x2\x2\x2@\x42\x3\x2"+
		"\x2\x2\x41?\x3\x2\x2\x2\x42\x43\a\x19\x2\x2\x43\xF\x3\x2\x2\x2\x44I\a"+
		"\x13\x2\x2\x45H\x5\x12\n\x2\x46H\x5\x14\v\x2G\x45\x3\x2\x2\x2G\x46\x3"+
		"\x2\x2\x2HK\x3\x2\x2\x2IG\x3\x2\x2\x2IJ\x3\x2\x2\x2JL\x3\x2\x2\x2KI\x3"+
		"\x2\x2\x2LM\a\x16\x2\x2M\x11\x3\x2\x2\x2NO\t\x4\x2\x2O\x13\x3\x2\x2\x2"+
		"PQ\t\x5\x2\x2Q\x15\x3\x2\x2\x2RS\a\x6\x2\x2SW\a\f\x2\x2TV\x5\b\x5\x2U"+
		"T\x3\x2\x2\x2VY\x3\x2\x2\x2WU\x3\x2\x2\x2WX\x3\x2\x2\x2XZ\x3\x2\x2\x2"+
		"YW\x3\x2\x2\x2Z[\a\t\x2\x2[\x17\x3\x2\x2\x2\\]\a\x6\x2\x2]^\a\n\x2\x2"+
		"^\x62\a\f\x2\x2_\x61\x5\b\x5\x2`_\x3\x2\x2\x2\x61\x64\x3\x2\x2\x2\x62"+
		"`\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2\x63\x65\x3\x2\x2\x2\x64\x62\x3\x2\x2"+
		"\x2\x65\x66\a\t\x2\x2\x66\x19\x3\x2\x2\x2gh\a\x6\x2\x2hl\a\f\x2\x2ik\x5"+
		"\b\x5\x2ji\x3\x2\x2\x2kn\x3\x2\x2\x2lj\x3\x2\x2\x2lm\x3\x2\x2\x2mo\x3"+
		"\x2\x2\x2nl\x3\x2\x2\x2op\a\n\x2\x2pq\a\t\x2\x2q\x1B\x3\x2\x2\x2\xF!#"+
		"*/\x34\x38=?GIW\x62l";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Quokka.Generated
