//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Code\Quokka\Grammar\Quokka\QuokkaHtml.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace Quokka.Generated {
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
[System.CLSCompliant(false)]
internal partial class QuokkaHtml : Parser {
	public const int
		HtmlComment=1, HtmlDtd=2, CDATA=3, LeftAngularBracket=4, Fluff=5, RightAngularBracket=6, 
		Slash=7, TAG_EQUALS=8, TAG_NAME=9, TAG_WHITESPACE=10, SCRIPT_BODY=11, 
		SCRIPT_SHORT_BODY=12, STYLE_BODY=13, STYLE_SHORT_BODY=14, UNQUOTED_ATTRIBUTE=15, 
		OpeningDoubleQuotes=16, OpeningSingleQuotes=17, ClosingDoubleQuotes=18, 
		DQS_OUTPUTBLOCK=19, DQS_FLUFF=20, ClosingSingleQuotes=21, SQS_OUTPUTBLOCK=22, 
		SQS_FLUFF=23;
	public const int
		RULE_htmlBlock = 0, RULE_nonImportantHtml = 1, RULE_plainText = 2, RULE_attribute = 3, 
		RULE_attributeValue = 4, RULE_unquotedValue = 5, RULE_singleQuotedValue = 6, 
		RULE_doubleQuotedValue = 7, RULE_openingTag = 8, RULE_closingTag = 9, 
		RULE_selfClosingTag = 10;
	public static readonly string[] ruleNames = {
		"htmlBlock", "nonImportantHtml", "plainText", "attribute", "attributeValue", 
		"unquotedValue", "singleQuotedValue", "doubleQuotedValue", "openingTag", 
		"closingTag", "selfClosingTag"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'<'", null, "'>'", "'/'", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HtmlComment", "HtmlDtd", "CDATA", "LeftAngularBracket", "Fluff", 
		"RightAngularBracket", "Slash", "TAG_EQUALS", "TAG_NAME", "TAG_WHITESPACE", 
		"SCRIPT_BODY", "SCRIPT_SHORT_BODY", "STYLE_BODY", "STYLE_SHORT_BODY", 
		"UNQUOTED_ATTRIBUTE", "OpeningDoubleQuotes", "OpeningSingleQuotes", "ClosingDoubleQuotes", 
		"DQS_OUTPUTBLOCK", "DQS_FLUFF", "ClosingSingleQuotes", "SQS_OUTPUTBLOCK", 
		"SQS_FLUFF"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QuokkaHtml.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public QuokkaHtml(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class HtmlBlockContext : ParserRuleContext {
		public OpeningTagContext[] openingTag() {
			return GetRuleContexts<OpeningTagContext>();
		}
		public OpeningTagContext openingTag(int i) {
			return GetRuleContext<OpeningTagContext>(i);
		}
		public ClosingTagContext[] closingTag() {
			return GetRuleContexts<ClosingTagContext>();
		}
		public ClosingTagContext closingTag(int i) {
			return GetRuleContext<ClosingTagContext>(i);
		}
		public SelfClosingTagContext[] selfClosingTag() {
			return GetRuleContexts<SelfClosingTagContext>();
		}
		public SelfClosingTagContext selfClosingTag(int i) {
			return GetRuleContext<SelfClosingTagContext>(i);
		}
		public PlainTextContext[] plainText() {
			return GetRuleContexts<PlainTextContext>();
		}
		public PlainTextContext plainText(int i) {
			return GetRuleContext<PlainTextContext>(i);
		}
		public NonImportantHtmlContext[] nonImportantHtml() {
			return GetRuleContexts<NonImportantHtmlContext>();
		}
		public NonImportantHtmlContext nonImportantHtml(int i) {
			return GetRuleContext<NonImportantHtmlContext>(i);
		}
		public HtmlBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlBlock; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlBlockContext htmlBlock() {
		HtmlBlockContext _localctx = new HtmlBlockContext(Context, State);
		EnterRule(_localctx, 0, RULE_htmlBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			do {
				{
				State = 27;
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 22; openingTag();
					}
					break;
				case 2:
					{
					State = 23; closingTag();
					}
					break;
				case 3:
					{
					State = 24; selfClosingTag();
					}
					break;
				case 4:
					{
					State = 25; plainText();
					}
					break;
				case 5:
					{
					State = 26; nonImportantHtml();
					}
					break;
				}
				}
				State = 29;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HtmlComment) | (1L << HtmlDtd) | (1L << CDATA) | (1L << LeftAngularBracket) | (1L << Fluff))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonImportantHtmlContext : ParserRuleContext {
		public ITerminalNode HtmlComment() { return GetToken(QuokkaHtml.HtmlComment, 0); }
		public ITerminalNode HtmlDtd() { return GetToken(QuokkaHtml.HtmlDtd, 0); }
		public ITerminalNode CDATA() { return GetToken(QuokkaHtml.CDATA, 0); }
		public NonImportantHtmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonImportantHtml; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonImportantHtml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonImportantHtmlContext nonImportantHtml() {
		NonImportantHtmlContext _localctx = new NonImportantHtmlContext(Context, State);
		EnterRule(_localctx, 2, RULE_nonImportantHtml);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << HtmlComment) | (1L << HtmlDtd) | (1L << CDATA))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlainTextContext : ParserRuleContext {
		public ITerminalNode[] Fluff() { return GetTokens(QuokkaHtml.Fluff); }
		public ITerminalNode Fluff(int i) {
			return GetToken(QuokkaHtml.Fluff, i);
		}
		public PlainTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plainText; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlainText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlainTextContext plainText() {
		PlainTextContext _localctx = new PlainTextContext(Context, State);
		EnterRule(_localctx, 4, RULE_plainText);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 33; Match(Fluff);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 36;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode TAG_NAME() { return GetToken(QuokkaHtml.TAG_NAME, 0); }
		public ITerminalNode TAG_EQUALS() { return GetToken(QuokkaHtml.TAG_EQUALS, 0); }
		public AttributeValueContext attributeValue() {
			return GetRuleContext<AttributeValueContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 6, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; Match(TAG_NAME);
			State = 41;
			_la = TokenStream.La(1);
			if (_la==TAG_EQUALS) {
				{
				State = 39; Match(TAG_EQUALS);
				State = 40; attributeValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeValueContext : ParserRuleContext {
		public DoubleQuotedValueContext doubleQuotedValue() {
			return GetRuleContext<DoubleQuotedValueContext>(0);
		}
		public SingleQuotedValueContext singleQuotedValue() {
			return GetRuleContext<SingleQuotedValueContext>(0);
		}
		public UnquotedValueContext unquotedValue() {
			return GetRuleContext<UnquotedValueContext>(0);
		}
		public AttributeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeValueContext attributeValue() {
		AttributeValueContext _localctx = new AttributeValueContext(Context, State);
		EnterRule(_localctx, 8, RULE_attributeValue);
		try {
			State = 46;
			switch (TokenStream.La(1)) {
			case OpeningDoubleQuotes:
				EnterOuterAlt(_localctx, 1);
				{
				State = 43; doubleQuotedValue();
				}
				break;
			case OpeningSingleQuotes:
				EnterOuterAlt(_localctx, 2);
				{
				State = 44; singleQuotedValue();
				}
				break;
			case UNQUOTED_ATTRIBUTE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 45; unquotedValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnquotedValueContext : ParserRuleContext {
		public ITerminalNode UNQUOTED_ATTRIBUTE() { return GetToken(QuokkaHtml.UNQUOTED_ATTRIBUTE, 0); }
		public UnquotedValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unquotedValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnquotedValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnquotedValueContext unquotedValue() {
		UnquotedValueContext _localctx = new UnquotedValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_unquotedValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; Match(UNQUOTED_ATTRIBUTE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleQuotedValueContext : ParserRuleContext {
		public ITerminalNode OpeningSingleQuotes() { return GetToken(QuokkaHtml.OpeningSingleQuotes, 0); }
		public ITerminalNode ClosingSingleQuotes() { return GetToken(QuokkaHtml.ClosingSingleQuotes, 0); }
		public ITerminalNode[] SQS_OUTPUTBLOCK() { return GetTokens(QuokkaHtml.SQS_OUTPUTBLOCK); }
		public ITerminalNode SQS_OUTPUTBLOCK(int i) {
			return GetToken(QuokkaHtml.SQS_OUTPUTBLOCK, i);
		}
		public ITerminalNode[] SQS_FLUFF() { return GetTokens(QuokkaHtml.SQS_FLUFF); }
		public ITerminalNode SQS_FLUFF(int i) {
			return GetToken(QuokkaHtml.SQS_FLUFF, i);
		}
		public SingleQuotedValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleQuotedValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleQuotedValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleQuotedValueContext singleQuotedValue() {
		SingleQuotedValueContext _localctx = new SingleQuotedValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_singleQuotedValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(OpeningSingleQuotes);
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==SQS_OUTPUTBLOCK || _la==SQS_FLUFF) {
				{
				{
				State = 51;
				_la = TokenStream.La(1);
				if ( !(_la==SQS_OUTPUTBLOCK || _la==SQS_FLUFF) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 57; Match(ClosingSingleQuotes);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleQuotedValueContext : ParserRuleContext {
		public ITerminalNode OpeningDoubleQuotes() { return GetToken(QuokkaHtml.OpeningDoubleQuotes, 0); }
		public ITerminalNode ClosingDoubleQuotes() { return GetToken(QuokkaHtml.ClosingDoubleQuotes, 0); }
		public ITerminalNode[] DQS_OUTPUTBLOCK() { return GetTokens(QuokkaHtml.DQS_OUTPUTBLOCK); }
		public ITerminalNode DQS_OUTPUTBLOCK(int i) {
			return GetToken(QuokkaHtml.DQS_OUTPUTBLOCK, i);
		}
		public ITerminalNode[] DQS_FLUFF() { return GetTokens(QuokkaHtml.DQS_FLUFF); }
		public ITerminalNode DQS_FLUFF(int i) {
			return GetToken(QuokkaHtml.DQS_FLUFF, i);
		}
		public DoubleQuotedValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleQuotedValue; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleQuotedValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleQuotedValueContext doubleQuotedValue() {
		DoubleQuotedValueContext _localctx = new DoubleQuotedValueContext(Context, State);
		EnterRule(_localctx, 14, RULE_doubleQuotedValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59; Match(OpeningDoubleQuotes);
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DQS_OUTPUTBLOCK || _la==DQS_FLUFF) {
				{
				{
				State = 60;
				_la = TokenStream.La(1);
				if ( !(_la==DQS_OUTPUTBLOCK || _la==DQS_FLUFF) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 66; Match(ClosingDoubleQuotes);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpeningTagContext : ParserRuleContext {
		public ITerminalNode LeftAngularBracket() { return GetToken(QuokkaHtml.LeftAngularBracket, 0); }
		public ITerminalNode TAG_NAME() { return GetToken(QuokkaHtml.TAG_NAME, 0); }
		public ITerminalNode RightAngularBracket() { return GetToken(QuokkaHtml.RightAngularBracket, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public OpeningTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openingTag; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpeningTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpeningTagContext openingTag() {
		OpeningTagContext _localctx = new OpeningTagContext(Context, State);
		EnterRule(_localctx, 16, RULE_openingTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 68; Match(LeftAngularBracket);
			State = 69; Match(TAG_NAME);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TAG_NAME) {
				{
				{
				State = 70; attribute();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 76; Match(RightAngularBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosingTagContext : ParserRuleContext {
		public ITerminalNode LeftAngularBracket() { return GetToken(QuokkaHtml.LeftAngularBracket, 0); }
		public ITerminalNode Slash() { return GetToken(QuokkaHtml.Slash, 0); }
		public ITerminalNode TAG_NAME() { return GetToken(QuokkaHtml.TAG_NAME, 0); }
		public ITerminalNode RightAngularBracket() { return GetToken(QuokkaHtml.RightAngularBracket, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ClosingTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closingTag; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosingTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClosingTagContext closingTag() {
		ClosingTagContext _localctx = new ClosingTagContext(Context, State);
		EnterRule(_localctx, 18, RULE_closingTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78; Match(LeftAngularBracket);
			State = 79; Match(Slash);
			State = 80; Match(TAG_NAME);
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TAG_NAME) {
				{
				{
				State = 81; attribute();
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 87; Match(RightAngularBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelfClosingTagContext : ParserRuleContext {
		public ITerminalNode LeftAngularBracket() { return GetToken(QuokkaHtml.LeftAngularBracket, 0); }
		public ITerminalNode TAG_NAME() { return GetToken(QuokkaHtml.TAG_NAME, 0); }
		public ITerminalNode Slash() { return GetToken(QuokkaHtml.Slash, 0); }
		public ITerminalNode RightAngularBracket() { return GetToken(QuokkaHtml.RightAngularBracket, 0); }
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SelfClosingTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selfClosingTag; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfClosingTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelfClosingTagContext selfClosingTag() {
		SelfClosingTagContext _localctx = new SelfClosingTagContext(Context, State);
		EnterRule(_localctx, 20, RULE_selfClosingTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(LeftAngularBracket);
			State = 90; Match(TAG_NAME);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==TAG_NAME) {
				{
				{
				State = 91; attribute();
				}
				}
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 97; Match(Slash);
			State = 98; Match(RightAngularBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3\x19g\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x6\x2\x1E"+
		"\n\x2\r\x2\xE\x2\x1F\x3\x3\x3\x3\x3\x4\x6\x4%\n\x4\r\x4\xE\x4&\x3\x5\x3"+
		"\x5\x3\x5\x5\x5,\n\x5\x3\x6\x3\x6\x3\x6\x5\x6\x31\n\x6\x3\a\x3\a\x3\b"+
		"\x3\b\a\b\x37\n\b\f\b\xE\b:\v\b\x3\b\x3\b\x3\t\x3\t\a\t@\n\t\f\t\xE\t"+
		"\x43\v\t\x3\t\x3\t\x3\n\x3\n\x3\n\a\nJ\n\n\f\n\xE\nM\v\n\x3\n\x3\n\x3"+
		"\v\x3\v\x3\v\x3\v\a\vU\n\v\f\v\xE\vX\v\v\x3\v\x3\v\x3\f\x3\f\x3\f\a\f"+
		"_\n\f\f\f\xE\f\x62\v\f\x3\f\x3\f\x3\f\x3\f\x2\x2\r\x2\x4\x6\b\n\f\xE\x10"+
		"\x12\x14\x16\x2\x5\x3\x2\x3\x5\x3\x2\x18\x19\x3\x2\x15\x16i\x2\x1D\x3"+
		"\x2\x2\x2\x4!\x3\x2\x2\x2\x6$\x3\x2\x2\x2\b(\x3\x2\x2\x2\n\x30\x3\x2\x2"+
		"\x2\f\x32\x3\x2\x2\x2\xE\x34\x3\x2\x2\x2\x10=\x3\x2\x2\x2\x12\x46\x3\x2"+
		"\x2\x2\x14P\x3\x2\x2\x2\x16[\x3\x2\x2\x2\x18\x1E\x5\x12\n\x2\x19\x1E\x5"+
		"\x14\v\x2\x1A\x1E\x5\x16\f\x2\x1B\x1E\x5\x6\x4\x2\x1C\x1E\x5\x4\x3\x2"+
		"\x1D\x18\x3\x2\x2\x2\x1D\x19\x3\x2\x2\x2\x1D\x1A\x3\x2\x2\x2\x1D\x1B\x3"+
		"\x2\x2\x2\x1D\x1C\x3\x2\x2\x2\x1E\x1F\x3\x2\x2\x2\x1F\x1D\x3\x2\x2\x2"+
		"\x1F \x3\x2\x2\x2 \x3\x3\x2\x2\x2!\"\t\x2\x2\x2\"\x5\x3\x2\x2\x2#%\a\a"+
		"\x2\x2$#\x3\x2\x2\x2%&\x3\x2\x2\x2&$\x3\x2\x2\x2&\'\x3\x2\x2\x2\'\a\x3"+
		"\x2\x2\x2(+\a\v\x2\x2)*\a\n\x2\x2*,\x5\n\x6\x2+)\x3\x2\x2\x2+,\x3\x2\x2"+
		"\x2,\t\x3\x2\x2\x2-\x31\x5\x10\t\x2.\x31\x5\xE\b\x2/\x31\x5\f\a\x2\x30"+
		"-\x3\x2\x2\x2\x30.\x3\x2\x2\x2\x30/\x3\x2\x2\x2\x31\v\x3\x2\x2\x2\x32"+
		"\x33\a\x11\x2\x2\x33\r\x3\x2\x2\x2\x34\x38\a\x13\x2\x2\x35\x37\t\x3\x2"+
		"\x2\x36\x35\x3\x2\x2\x2\x37:\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x38\x39\x3"+
		"\x2\x2\x2\x39;\x3\x2\x2\x2:\x38\x3\x2\x2\x2;<\a\x17\x2\x2<\xF\x3\x2\x2"+
		"\x2=\x41\a\x12\x2\x2>@\t\x4\x2\x2?>\x3\x2\x2\x2@\x43\x3\x2\x2\x2\x41?"+
		"\x3\x2\x2\x2\x41\x42\x3\x2\x2\x2\x42\x44\x3\x2\x2\x2\x43\x41\x3\x2\x2"+
		"\x2\x44\x45\a\x14\x2\x2\x45\x11\x3\x2\x2\x2\x46G\a\x6\x2\x2GK\a\v\x2\x2"+
		"HJ\x5\b\x5\x2IH\x3\x2\x2\x2JM\x3\x2\x2\x2KI\x3\x2\x2\x2KL\x3\x2\x2\x2"+
		"LN\x3\x2\x2\x2MK\x3\x2\x2\x2NO\a\b\x2\x2O\x13\x3\x2\x2\x2PQ\a\x6\x2\x2"+
		"QR\a\t\x2\x2RV\a\v\x2\x2SU\x5\b\x5\x2TS\x3\x2\x2\x2UX\x3\x2\x2\x2VT\x3"+
		"\x2\x2\x2VW\x3\x2\x2\x2WY\x3\x2\x2\x2XV\x3\x2\x2\x2YZ\a\b\x2\x2Z\x15\x3"+
		"\x2\x2\x2[\\\a\x6\x2\x2\\`\a\v\x2\x2]_\x5\b\x5\x2^]\x3\x2\x2\x2_\x62\x3"+
		"\x2\x2\x2`^\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61\x63\x3\x2\x2\x2\x62`\x3\x2"+
		"\x2\x2\x63\x64\a\t\x2\x2\x64\x65\a\b\x2\x2\x65\x17\x3\x2\x2\x2\f\x1D\x1F"+
		"&+\x30\x38\x41KV`";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Quokka.Generated
