// // Copyright 2022 Mindbox Ltd
// //
// // Licensed under the Apache License, Version 2.0 (the "License");
// // you may not use this file except in compliance with the License.
// // You may obtain a copy of the License at
// //
// //     http://www.apache.org/licenses/LICENSE-2.0
// //
// // Unless required by applicable law or agreed to in writing, software
// // distributed under the License is distributed on an "AS IS" BASIS,
// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// // See the License for the specific language governing permissions and
// // limitations under the License.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Mindbox.Quokka.Generated {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
internal partial class QuokkaHtmlLex : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		HtmlComment=1, HtmlDtd=2, CDATA=3, LeftAngularBracket=4, OutputBlock=5, 
		Fluff=6, RightAngularBracket=7, Slash=8, TAG_EQUALS=9, TAG_NAME=10, TAG_WHITESPACE=11, 
		SCRIPT_BODY=12, SCRIPT_SHORT_BODY=13, STYLE_BODY=14, STYLE_SHORT_BODY=15, 
		UNQUOTED_ATTRIBUTE=16, OpeningDoubleQuotes=17, OpeningSingleQuotes=18, 
		UnquotedOutputBlock=19, ClosingDoubleQuotes=20, DQS_OUTPUTBLOCK=21, DQS_FLUFF=22, 
		ClosingSingleQuotes=23, SQS_OUTPUTBLOCK=24, SQS_FLUFF=25;
	public const int
		InsideTag=1, SCRIPT=2, STYLE=3, ATTVALUE=4, DoubleQuotes=5, SingleQuotes=6;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE", "InsideTag", "SCRIPT", "STYLE", "ATTVALUE", "DoubleQuotes", 
		"SingleQuotes"
	};

	public static readonly string[] ruleNames = {
		"HtmlComment", "HtmlDtd", "CDATA", "LeftAngularBracket", "OutputBlock", 
		"Fluff", "RightAngularBracket", "Slash", "TAG_EQUALS", "TAG_NAME", "TAG_WHITESPACE", 
		"HEXDIGIT", "DIGIT", "TAG_NameChar", "TAG_NameStartChar", "SCRIPT_BODY", 
		"SCRIPT_SHORT_BODY", "STYLE_BODY", "STYLE_SHORT_BODY", "UNQUOTED_ATTRIBUTE", 
		"ATTCHAR", "ATTCHARS", "HEXCHARS", "DECCHARS", "OpeningDoubleQuotes", 
		"OpeningSingleQuotes", "UnquotedOutputBlock", "ClosingDoubleQuotes", "DQS_OUTPUTBLOCK", 
		"DQS_FLUFF", "ClosingSingleQuotes", "SQS_OUTPUTBLOCK", "SQS_FLUFF"
	};


	public QuokkaHtmlLex(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public QuokkaHtmlLex(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'<'", null, null, "'>'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HtmlComment", "HtmlDtd", "CDATA", "LeftAngularBracket", "OutputBlock", 
		"Fluff", "RightAngularBracket", "Slash", "TAG_EQUALS", "TAG_NAME", "TAG_WHITESPACE", 
		"SCRIPT_BODY", "SCRIPT_SHORT_BODY", "STYLE_BODY", "STYLE_SHORT_BODY", 
		"UNQUOTED_ATTRIBUTE", "OpeningDoubleQuotes", "OpeningSingleQuotes", "UnquotedOutputBlock", 
		"ClosingDoubleQuotes", "DQS_OUTPUTBLOCK", "DQS_FLUFF", "ClosingSingleQuotes", 
		"SQS_OUTPUTBLOCK", "SQS_FLUFF"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QuokkaHtmlLex.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static QuokkaHtmlLex() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,25,398,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,
		2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,
		7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,
		7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,
		7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,
		7,32,1,0,1,0,1,0,1,0,1,0,1,0,5,0,80,8,0,10,0,12,0,83,9,0,1,0,1,0,1,0,1,
		0,1,1,1,1,1,1,1,1,5,1,93,8,1,10,1,12,1,96,9,1,1,1,1,1,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,111,8,2,10,2,12,2,114,9,2,1,2,1,2,1,2,
		1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,5,4,128,8,4,10,4,12,4,131,9,4,1,4,
		1,4,1,5,1,5,1,5,5,5,138,8,5,10,5,12,5,141,9,5,1,5,1,5,1,5,1,5,1,5,5,5,
		148,8,5,10,5,12,5,151,9,5,1,5,1,5,1,5,4,5,156,8,5,11,5,12,5,157,3,5,160,
		8,5,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,5,8,170,8,8,10,8,12,8,173,9,8,1,8,
		1,8,1,9,1,9,5,9,179,8,9,10,9,12,9,182,9,9,1,10,1,10,1,10,1,10,1,11,1,11,
		1,12,1,12,1,13,1,13,1,13,1,13,3,13,196,8,13,1,14,3,14,199,8,14,1,15,5,
		15,202,8,15,10,15,12,15,205,9,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,16,5,16,220,8,16,10,16,12,16,223,9,16,1,16,1,
		16,1,16,1,16,1,16,1,16,1,17,5,17,232,8,17,10,17,12,17,235,9,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,5,18,249,8,18,10,
		18,12,18,252,9,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,3,19,263,
		8,19,1,19,1,19,1,20,3,20,268,8,20,1,21,4,21,271,8,21,11,21,12,21,272,1,
		21,3,21,276,8,21,1,22,1,22,4,22,280,8,22,11,22,12,22,281,1,23,4,23,285,
		8,23,11,23,12,23,286,1,23,3,23,290,8,23,1,24,1,24,1,24,1,24,1,25,1,25,
		1,25,1,25,1,26,1,26,1,26,1,26,5,26,304,8,26,10,26,12,26,307,9,26,1,26,
		1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,5,28,322,8,
		28,10,28,12,28,325,9,28,1,28,1,28,1,29,1,29,1,29,5,29,332,8,29,10,29,12,
		29,335,9,29,1,29,1,29,1,29,1,29,1,29,5,29,342,8,29,10,29,12,29,345,9,29,
		1,29,1,29,1,29,4,29,350,8,29,11,29,12,29,351,3,29,354,8,29,1,30,1,30,1,
		30,1,30,1,30,1,31,1,31,1,31,1,31,5,31,365,8,31,10,31,12,31,368,9,31,1,
		31,1,31,1,32,1,32,1,32,5,32,375,8,32,10,32,12,32,378,9,32,1,32,1,32,1,
		32,1,32,1,32,5,32,385,8,32,10,32,12,32,388,9,32,1,32,1,32,1,32,4,32,393,
		8,32,11,32,12,32,394,3,32,397,8,32,14,81,94,112,129,139,149,203,221,233,
		250,333,343,376,386,0,33,7,1,9,2,11,3,13,4,15,5,17,6,19,7,21,8,23,9,25,
		10,27,11,29,0,31,0,33,0,35,0,37,12,39,13,41,14,43,15,45,16,47,0,49,0,51,
		0,53,0,55,17,57,18,59,19,61,20,63,21,65,22,67,23,69,24,71,25,7,0,1,2,3,
		4,5,6,13,1,0,36,36,1,0,123,123,2,0,36,36,60,60,3,0,9,10,13,13,32,32,3,
		0,48,57,65,70,97,102,1,0,48,57,2,0,45,46,95,95,3,0,183,183,768,879,8255,
		8256,8,0,58,58,65,90,97,122,8304,8591,11264,12271,12289,55295,63744,64975,
		65008,65533,7,0,35,35,43,59,61,61,63,63,65,90,95,95,97,122,1,0,125,125,
		2,0,34,34,36,36,2,0,36,36,39,39,424,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,1,19,1,0,0,0,1,21,1,0,0,0,1,23,
		1,0,0,0,1,25,1,0,0,0,1,27,1,0,0,0,2,37,1,0,0,0,2,39,1,0,0,0,3,41,1,0,0,
		0,3,43,1,0,0,0,4,45,1,0,0,0,4,55,1,0,0,0,4,57,1,0,0,0,4,59,1,0,0,0,5,61,
		1,0,0,0,5,63,1,0,0,0,5,65,1,0,0,0,6,67,1,0,0,0,6,69,1,0,0,0,6,71,1,0,0,
		0,7,73,1,0,0,0,9,88,1,0,0,0,11,99,1,0,0,0,13,119,1,0,0,0,15,123,1,0,0,
		0,17,159,1,0,0,0,19,161,1,0,0,0,21,165,1,0,0,0,23,167,1,0,0,0,25,176,1,
		0,0,0,27,183,1,0,0,0,29,187,1,0,0,0,31,189,1,0,0,0,33,195,1,0,0,0,35,198,
		1,0,0,0,37,203,1,0,0,0,39,221,1,0,0,0,41,233,1,0,0,0,43,250,1,0,0,0,45,
		262,1,0,0,0,47,267,1,0,0,0,49,270,1,0,0,0,51,277,1,0,0,0,53,284,1,0,0,
		0,55,291,1,0,0,0,57,295,1,0,0,0,59,299,1,0,0,0,61,312,1,0,0,0,63,317,1,
		0,0,0,65,353,1,0,0,0,67,355,1,0,0,0,69,360,1,0,0,0,71,396,1,0,0,0,73,74,
		5,60,0,0,74,75,5,33,0,0,75,76,5,45,0,0,76,77,5,45,0,0,77,81,1,0,0,0,78,
		80,9,0,0,0,79,78,1,0,0,0,80,83,1,0,0,0,81,82,1,0,0,0,81,79,1,0,0,0,82,
		84,1,0,0,0,83,81,1,0,0,0,84,85,5,45,0,0,85,86,5,45,0,0,86,87,5,62,0,0,
		87,8,1,0,0,0,88,89,5,60,0,0,89,90,5,33,0,0,90,94,1,0,0,0,91,93,9,0,0,0,
		92,91,1,0,0,0,93,96,1,0,0,0,94,95,1,0,0,0,94,92,1,0,0,0,95,97,1,0,0,0,
		96,94,1,0,0,0,97,98,5,62,0,0,98,10,1,0,0,0,99,100,5,60,0,0,100,101,5,33,
		0,0,101,102,5,91,0,0,102,103,5,67,0,0,103,104,5,68,0,0,104,105,5,65,0,
		0,105,106,5,84,0,0,106,107,5,65,0,0,107,108,5,91,0,0,108,112,1,0,0,0,109,
		111,9,0,0,0,110,109,1,0,0,0,111,114,1,0,0,0,112,113,1,0,0,0,112,110,1,
		0,0,0,113,115,1,0,0,0,114,112,1,0,0,0,115,116,5,93,0,0,116,117,5,93,0,
		0,117,118,5,62,0,0,118,12,1,0,0,0,119,120,5,60,0,0,120,121,1,0,0,0,121,
		122,6,3,0,0,122,14,1,0,0,0,123,124,5,36,0,0,124,125,5,123,0,0,125,129,
		1,0,0,0,126,128,9,0,0,0,127,126,1,0,0,0,128,131,1,0,0,0,129,130,1,0,0,
		0,129,127,1,0,0,0,130,132,1,0,0,0,131,129,1,0,0,0,132,133,5,125,0,0,133,
		16,1,0,0,0,134,135,7,0,0,0,135,139,8,1,0,0,136,138,8,0,0,0,137,136,1,0,
		0,0,138,141,1,0,0,0,139,140,1,0,0,0,139,137,1,0,0,0,140,142,1,0,0,0,141,
		139,1,0,0,0,142,160,5,125,0,0,143,144,7,0,0,0,144,145,5,123,0,0,145,149,
		5,123,0,0,146,148,8,0,0,0,147,146,1,0,0,0,148,151,1,0,0,0,149,150,1,0,
		0,0,149,147,1,0,0,0,150,152,1,0,0,0,151,149,1,0,0,0,152,160,5,125,0,0,
		153,160,7,0,0,0,154,156,8,2,0,0,155,154,1,0,0,0,156,157,1,0,0,0,157,155,
		1,0,0,0,157,158,1,0,0,0,158,160,1,0,0,0,159,134,1,0,0,0,159,143,1,0,0,
		0,159,153,1,0,0,0,159,155,1,0,0,0,160,18,1,0,0,0,161,162,5,62,0,0,162,
		163,1,0,0,0,163,164,6,6,1,0,164,20,1,0,0,0,165,166,5,47,0,0,166,22,1,0,
		0,0,167,171,5,61,0,0,168,170,7,3,0,0,169,168,1,0,0,0,170,173,1,0,0,0,171,
		169,1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,0,173,171,1,0,0,0,174,175,6,
		8,2,0,175,24,1,0,0,0,176,180,3,35,14,0,177,179,3,33,13,0,178,177,1,0,0,
		0,179,182,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,26,1,0,0,0,182,180,
		1,0,0,0,183,184,7,3,0,0,184,185,1,0,0,0,185,186,6,10,3,0,186,28,1,0,0,
		0,187,188,7,4,0,0,188,30,1,0,0,0,189,190,7,5,0,0,190,32,1,0,0,0,191,196,
		3,35,14,0,192,196,7,6,0,0,193,196,3,31,12,0,194,196,7,7,0,0,195,191,1,
		0,0,0,195,192,1,0,0,0,195,193,1,0,0,0,195,194,1,0,0,0,196,34,1,0,0,0,197,
		199,7,8,0,0,198,197,1,0,0,0,199,36,1,0,0,0,200,202,9,0,0,0,201,200,1,0,
		0,0,202,205,1,0,0,0,203,204,1,0,0,0,203,201,1,0,0,0,204,206,1,0,0,0,205,
		203,1,0,0,0,206,207,5,60,0,0,207,208,5,47,0,0,208,209,5,115,0,0,209,210,
		5,99,0,0,210,211,5,114,0,0,211,212,5,105,0,0,212,213,5,112,0,0,213,214,
		5,116,0,0,214,215,5,62,0,0,215,216,1,0,0,0,216,217,6,15,1,0,217,38,1,0,
		0,0,218,220,9,0,0,0,219,218,1,0,0,0,220,223,1,0,0,0,221,222,1,0,0,0,221,
		219,1,0,0,0,222,224,1,0,0,0,223,221,1,0,0,0,224,225,5,60,0,0,225,226,5,
		47,0,0,226,227,5,62,0,0,227,228,1,0,0,0,228,229,6,16,1,0,229,40,1,0,0,
		0,230,232,9,0,0,0,231,230,1,0,0,0,232,235,1,0,0,0,233,234,1,0,0,0,233,
		231,1,0,0,0,234,236,1,0,0,0,235,233,1,0,0,0,236,237,5,60,0,0,237,238,5,
		47,0,0,238,239,5,115,0,0,239,240,5,116,0,0,240,241,5,121,0,0,241,242,5,
		108,0,0,242,243,5,101,0,0,243,244,5,62,0,0,244,245,1,0,0,0,245,246,6,17,
		1,0,246,42,1,0,0,0,247,249,9,0,0,0,248,247,1,0,0,0,249,252,1,0,0,0,250,
		251,1,0,0,0,250,248,1,0,0,0,251,253,1,0,0,0,252,250,1,0,0,0,253,254,5,
		60,0,0,254,255,5,47,0,0,255,256,5,62,0,0,256,257,1,0,0,0,257,258,6,18,
		1,0,258,44,1,0,0,0,259,263,3,49,21,0,260,263,3,51,22,0,261,263,3,53,23,
		0,262,259,1,0,0,0,262,260,1,0,0,0,262,261,1,0,0,0,263,264,1,0,0,0,264,
		265,6,19,1,0,265,46,1,0,0,0,266,268,7,9,0,0,267,266,1,0,0,0,268,48,1,0,
		0,0,269,271,3,47,20,0,270,269,1,0,0,0,271,272,1,0,0,0,272,270,1,0,0,0,
		272,273,1,0,0,0,273,275,1,0,0,0,274,276,5,32,0,0,275,274,1,0,0,0,275,276,
		1,0,0,0,276,50,1,0,0,0,277,279,5,35,0,0,278,280,7,4,0,0,279,278,1,0,0,
		0,280,281,1,0,0,0,281,279,1,0,0,0,281,282,1,0,0,0,282,52,1,0,0,0,283,285,
		7,5,0,0,284,283,1,0,0,0,285,286,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,
		0,287,289,1,0,0,0,288,290,5,37,0,0,289,288,1,0,0,0,289,290,1,0,0,0,290,
		54,1,0,0,0,291,292,5,34,0,0,292,293,1,0,0,0,293,294,6,24,4,0,294,56,1,
		0,0,0,295,296,5,39,0,0,296,297,1,0,0,0,297,298,6,25,5,0,298,58,1,0,0,0,
		299,300,5,36,0,0,300,301,5,123,0,0,301,305,1,0,0,0,302,304,8,10,0,0,303,
		302,1,0,0,0,304,307,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,308,1,
		0,0,0,307,305,1,0,0,0,308,309,5,125,0,0,309,310,1,0,0,0,310,311,6,26,1,
		0,311,60,1,0,0,0,312,313,5,34,0,0,313,314,1,0,0,0,314,315,6,27,1,0,315,
		316,6,27,1,0,316,62,1,0,0,0,317,318,5,36,0,0,318,319,5,123,0,0,319,323,
		1,0,0,0,320,322,8,10,0,0,321,320,1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,
		0,323,324,1,0,0,0,324,326,1,0,0,0,325,323,1,0,0,0,326,327,5,125,0,0,327,
		64,1,0,0,0,328,329,5,36,0,0,329,333,8,1,0,0,330,332,8,11,0,0,331,330,1,
		0,0,0,332,335,1,0,0,0,333,334,1,0,0,0,333,331,1,0,0,0,334,336,1,0,0,0,
		335,333,1,0,0,0,336,354,5,125,0,0,337,338,5,36,0,0,338,339,5,123,0,0,339,
		343,5,123,0,0,340,342,8,11,0,0,341,340,1,0,0,0,342,345,1,0,0,0,343,344,
		1,0,0,0,343,341,1,0,0,0,344,346,1,0,0,0,345,343,1,0,0,0,346,354,5,125,
		0,0,347,354,5,36,0,0,348,350,8,11,0,0,349,348,1,0,0,0,350,351,1,0,0,0,
		351,349,1,0,0,0,351,352,1,0,0,0,352,354,1,0,0,0,353,328,1,0,0,0,353,337,
		1,0,0,0,353,347,1,0,0,0,353,349,1,0,0,0,354,66,1,0,0,0,355,356,5,39,0,
		0,356,357,1,0,0,0,357,358,6,30,1,0,358,359,6,30,1,0,359,68,1,0,0,0,360,
		361,5,36,0,0,361,362,5,123,0,0,362,366,1,0,0,0,363,365,8,10,0,0,364,363,
		1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,0,366,367,1,0,0,0,367,369,1,0,0,
		0,368,366,1,0,0,0,369,370,5,125,0,0,370,70,1,0,0,0,371,372,5,36,0,0,372,
		376,8,1,0,0,373,375,8,12,0,0,374,373,1,0,0,0,375,378,1,0,0,0,376,377,1,
		0,0,0,376,374,1,0,0,0,377,379,1,0,0,0,378,376,1,0,0,0,379,397,5,125,0,
		0,380,381,5,36,0,0,381,382,5,123,0,0,382,386,5,123,0,0,383,385,8,12,0,
		0,384,383,1,0,0,0,385,388,1,0,0,0,386,387,1,0,0,0,386,384,1,0,0,0,387,
		389,1,0,0,0,388,386,1,0,0,0,389,397,5,125,0,0,390,397,5,36,0,0,391,393,
		8,12,0,0,392,391,1,0,0,0,393,394,1,0,0,0,394,392,1,0,0,0,394,395,1,0,0,
		0,395,397,1,0,0,0,396,371,1,0,0,0,396,380,1,0,0,0,396,390,1,0,0,0,396,
		392,1,0,0,0,397,72,1,0,0,0,41,0,1,2,3,4,5,6,81,94,112,129,139,149,157,
		159,171,180,195,198,203,221,233,250,262,267,272,275,281,286,289,305,323,
		333,343,351,353,366,376,386,394,396,6,5,1,0,4,0,0,5,4,0,6,0,0,5,5,0,5,
		6,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Mindbox.Quokka.Generated
