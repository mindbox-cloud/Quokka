// // Copyright 2022 Mindbox Ltd
// //
// // Licensed under the Apache License, Version 2.0 (the "License");
// // you may not use this file except in compliance with the License.
// // You may obtain a copy of the License at
// //
// //     http://www.apache.org/licenses/LICENSE-2.0
// //
// // Unless required by applicable law or agreed to in writing, software
// // distributed under the License is distributed on an "AS IS" BASIS,
// // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// // See the License for the specific language governing permissions and
// // limitations under the License.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Mindbox.Quokka.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
internal partial class QuokkaHtml : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		HtmlComment=1, HtmlDtd=2, CDATA=3, LeftAngularBracket=4, OutputBlock=5, 
		Fluff=6, RightAngularBracket=7, Slash=8, TAG_EQUALS=9, TAG_NAME=10, TAG_WHITESPACE=11, 
		SCRIPT_BODY=12, SCRIPT_SHORT_BODY=13, STYLE_BODY=14, STYLE_SHORT_BODY=15, 
		UNQUOTED_ATTRIBUTE=16, OpeningDoubleQuotes=17, OpeningSingleQuotes=18, 
		UnquotedOutputBlock=19, ClosingDoubleQuotes=20, DQS_OUTPUTBLOCK=21, DQS_FLUFF=22, 
		ClosingSingleQuotes=23, SQS_OUTPUTBLOCK=24, SQS_FLUFF=25;
	public const int
		RULE_htmlBlock = 0, RULE_nonImportantHtml = 1, RULE_plainText = 2, RULE_attribute = 3, 
		RULE_attributeValue = 4, RULE_unquotedValue = 5, RULE_singleQuotedValue = 6, 
		RULE_doubleQuotedValue = 7, RULE_insideAttributeOutputBlock = 8, RULE_insideAttributeConstant = 9, 
		RULE_openingTag = 10, RULE_closingTag = 11, RULE_selfClosingTag = 12;
	public static readonly string[] ruleNames = {
		"htmlBlock", "nonImportantHtml", "plainText", "attribute", "attributeValue", 
		"unquotedValue", "singleQuotedValue", "doubleQuotedValue", "insideAttributeOutputBlock", 
		"insideAttributeConstant", "openingTag", "closingTag", "selfClosingTag"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'<'", null, null, "'>'", "'/'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "HtmlComment", "HtmlDtd", "CDATA", "LeftAngularBracket", "OutputBlock", 
		"Fluff", "RightAngularBracket", "Slash", "TAG_EQUALS", "TAG_NAME", "TAG_WHITESPACE", 
		"SCRIPT_BODY", "SCRIPT_SHORT_BODY", "STYLE_BODY", "STYLE_SHORT_BODY", 
		"UNQUOTED_ATTRIBUTE", "OpeningDoubleQuotes", "OpeningSingleQuotes", "UnquotedOutputBlock", 
		"ClosingDoubleQuotes", "DQS_OUTPUTBLOCK", "DQS_FLUFF", "ClosingSingleQuotes", 
		"SQS_OUTPUTBLOCK", "SQS_FLUFF"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "QuokkaHtml.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static QuokkaHtml() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public QuokkaHtml(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public QuokkaHtml(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class HtmlBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OpeningTagContext[] openingTag() {
			return GetRuleContexts<OpeningTagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpeningTagContext openingTag(int i) {
			return GetRuleContext<OpeningTagContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosingTagContext[] closingTag() {
			return GetRuleContexts<ClosingTagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ClosingTagContext closingTag(int i) {
			return GetRuleContext<ClosingTagContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelfClosingTagContext[] selfClosingTag() {
			return GetRuleContexts<SelfClosingTagContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelfClosingTagContext selfClosingTag(int i) {
			return GetRuleContext<SelfClosingTagContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlainTextContext[] plainText() {
			return GetRuleContexts<PlainTextContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlainTextContext plainText(int i) {
			return GetRuleContext<PlainTextContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonImportantHtmlContext[] nonImportantHtml() {
			return GetRuleContexts<NonImportantHtmlContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NonImportantHtmlContext nonImportantHtml(int i) {
			return GetRuleContext<NonImportantHtmlContext>(i);
		}
		public HtmlBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_htmlBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHtmlBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HtmlBlockContext htmlBlock() {
		HtmlBlockContext _localctx = new HtmlBlockContext(Context, State);
		EnterRule(_localctx, 0, RULE_htmlBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				State = 31;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 26;
					openingTag();
					}
					break;
				case 2:
					{
					State = 27;
					closingTag();
					}
					break;
				case 3:
					{
					State = 28;
					selfClosingTag();
					}
					break;
				case 4:
					{
					State = 29;
					plainText();
					}
					break;
				case 5:
					{
					State = 30;
					nonImportantHtml();
					}
					break;
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 126L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonImportantHtmlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HtmlComment() { return GetToken(QuokkaHtml.HtmlComment, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HtmlDtd() { return GetToken(QuokkaHtml.HtmlDtd, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CDATA() { return GetToken(QuokkaHtml.CDATA, 0); }
		public NonImportantHtmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonImportantHtml; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonImportantHtml(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonImportantHtmlContext nonImportantHtml() {
		NonImportantHtmlContext _localctx = new NonImportantHtmlContext(Context, State);
		EnterRule(_localctx, 2, RULE_nonImportantHtml);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 14L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlainTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Fluff() { return GetTokens(QuokkaHtml.Fluff); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Fluff(int i) {
			return GetToken(QuokkaHtml.Fluff, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OutputBlock() { return GetTokens(QuokkaHtml.OutputBlock); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OutputBlock(int i) {
			return GetToken(QuokkaHtml.OutputBlock, i);
		}
		public PlainTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_plainText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlainText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PlainTextContext plainText() {
		PlainTextContext _localctx = new PlainTextContext(Context, State);
		EnterRule(_localctx, 4, RULE_plainText);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 37;
					_la = TokenStream.LA(1);
					if ( !(_la==OutputBlock || _la==Fluff) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 40;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_NAME() { return GetToken(QuokkaHtml.TAG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_EQUALS() { return GetToken(QuokkaHtml.TAG_EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeValueContext attributeValue() {
			return GetRuleContext<AttributeValueContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 6, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			Match(TAG_NAME);
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TAG_EQUALS) {
				{
				State = 43;
				Match(TAG_EQUALS);
				State = 44;
				attributeValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DoubleQuotedValueContext doubleQuotedValue() {
			return GetRuleContext<DoubleQuotedValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleQuotedValueContext singleQuotedValue() {
			return GetRuleContext<SingleQuotedValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnquotedValueContext unquotedValue() {
			return GetRuleContext<UnquotedValueContext>(0);
		}
		public AttributeValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttributeValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeValueContext attributeValue() {
		AttributeValueContext _localctx = new AttributeValueContext(Context, State);
		EnterRule(_localctx, 8, RULE_attributeValue);
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpeningDoubleQuotes:
				EnterOuterAlt(_localctx, 1);
				{
				State = 47;
				doubleQuotedValue();
				}
				break;
			case OpeningSingleQuotes:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				singleQuotedValue();
				}
				break;
			case UNQUOTED_ATTRIBUTE:
			case UnquotedOutputBlock:
			case DQS_OUTPUTBLOCK:
			case DQS_FLUFF:
			case SQS_OUTPUTBLOCK:
			case SQS_FLUFF:
				EnterOuterAlt(_localctx, 3);
				{
				State = 49;
				unquotedValue();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnquotedValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InsideAttributeConstantContext insideAttributeConstant() {
			return GetRuleContext<InsideAttributeConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsideAttributeOutputBlockContext insideAttributeOutputBlock() {
			return GetRuleContext<InsideAttributeOutputBlockContext>(0);
		}
		public UnquotedValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unquotedValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnquotedValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnquotedValueContext unquotedValue() {
		UnquotedValueContext _localctx = new UnquotedValueContext(Context, State);
		EnterRule(_localctx, 10, RULE_unquotedValue);
		try {
			State = 54;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNQUOTED_ATTRIBUTE:
			case DQS_FLUFF:
			case SQS_FLUFF:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				insideAttributeConstant();
				}
				break;
			case UnquotedOutputBlock:
			case DQS_OUTPUTBLOCK:
			case SQS_OUTPUTBLOCK:
				EnterOuterAlt(_localctx, 2);
				{
				State = 53;
				insideAttributeOutputBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleQuotedValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpeningSingleQuotes() { return GetToken(QuokkaHtml.OpeningSingleQuotes, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ClosingSingleQuotes() { return GetToken(QuokkaHtml.ClosingSingleQuotes, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InsideAttributeOutputBlockContext[] insideAttributeOutputBlock() {
			return GetRuleContexts<InsideAttributeOutputBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsideAttributeOutputBlockContext insideAttributeOutputBlock(int i) {
			return GetRuleContext<InsideAttributeOutputBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsideAttributeConstantContext[] insideAttributeConstant() {
			return GetRuleContexts<InsideAttributeConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsideAttributeConstantContext insideAttributeConstant(int i) {
			return GetRuleContext<InsideAttributeConstantContext>(i);
		}
		public SingleQuotedValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleQuotedValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleQuotedValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleQuotedValueContext singleQuotedValue() {
		SingleQuotedValueContext _localctx = new SingleQuotedValueContext(Context, State);
		EnterRule(_localctx, 12, RULE_singleQuotedValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 56;
			Match(OpeningSingleQuotes);
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 57212928L) != 0)) {
				{
				State = 59;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case UnquotedOutputBlock:
				case DQS_OUTPUTBLOCK:
				case SQS_OUTPUTBLOCK:
					{
					State = 57;
					insideAttributeOutputBlock();
					}
					break;
				case UNQUOTED_ATTRIBUTE:
				case DQS_FLUFF:
				case SQS_FLUFF:
					{
					State = 58;
					insideAttributeConstant();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 64;
			Match(ClosingSingleQuotes);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoubleQuotedValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpeningDoubleQuotes() { return GetToken(QuokkaHtml.OpeningDoubleQuotes, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ClosingDoubleQuotes() { return GetToken(QuokkaHtml.ClosingDoubleQuotes, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InsideAttributeOutputBlockContext[] insideAttributeOutputBlock() {
			return GetRuleContexts<InsideAttributeOutputBlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsideAttributeOutputBlockContext insideAttributeOutputBlock(int i) {
			return GetRuleContext<InsideAttributeOutputBlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsideAttributeConstantContext[] insideAttributeConstant() {
			return GetRuleContexts<InsideAttributeConstantContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsideAttributeConstantContext insideAttributeConstant(int i) {
			return GetRuleContext<InsideAttributeConstantContext>(i);
		}
		public DoubleQuotedValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doubleQuotedValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoubleQuotedValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DoubleQuotedValueContext doubleQuotedValue() {
		DoubleQuotedValueContext _localctx = new DoubleQuotedValueContext(Context, State);
		EnterRule(_localctx, 14, RULE_doubleQuotedValue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			Match(OpeningDoubleQuotes);
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 57212928L) != 0)) {
				{
				State = 69;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case UnquotedOutputBlock:
				case DQS_OUTPUTBLOCK:
				case SQS_OUTPUTBLOCK:
					{
					State = 67;
					insideAttributeOutputBlock();
					}
					break;
				case UNQUOTED_ATTRIBUTE:
				case DQS_FLUFF:
				case SQS_FLUFF:
					{
					State = 68;
					insideAttributeConstant();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 74;
			Match(ClosingDoubleQuotes);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsideAttributeOutputBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQS_OUTPUTBLOCK() { return GetToken(QuokkaHtml.SQS_OUTPUTBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DQS_OUTPUTBLOCK() { return GetToken(QuokkaHtml.DQS_OUTPUTBLOCK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UnquotedOutputBlock() { return GetToken(QuokkaHtml.UnquotedOutputBlock, 0); }
		public InsideAttributeOutputBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insideAttributeOutputBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsideAttributeOutputBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsideAttributeOutputBlockContext insideAttributeOutputBlock() {
		InsideAttributeOutputBlockContext _localctx = new InsideAttributeOutputBlockContext(Context, State);
		EnterRule(_localctx, 16, RULE_insideAttributeOutputBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 19398656L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsideAttributeConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQS_FLUFF() { return GetToken(QuokkaHtml.SQS_FLUFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DQS_FLUFF() { return GetToken(QuokkaHtml.DQS_FLUFF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNQUOTED_ATTRIBUTE() { return GetToken(QuokkaHtml.UNQUOTED_ATTRIBUTE, 0); }
		public InsideAttributeConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insideAttributeConstant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInsideAttributeConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InsideAttributeConstantContext insideAttributeConstant() {
		InsideAttributeConstantContext _localctx = new InsideAttributeConstantContext(Context, State);
		EnterRule(_localctx, 18, RULE_insideAttributeConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 78;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 37814272L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpeningTagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftAngularBracket() { return GetToken(QuokkaHtml.LeftAngularBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_NAME() { return GetToken(QuokkaHtml.TAG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightAngularBracket() { return GetToken(QuokkaHtml.RightAngularBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public OpeningTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_openingTag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOpeningTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OpeningTagContext openingTag() {
		OpeningTagContext _localctx = new OpeningTagContext(Context, State);
		EnterRule(_localctx, 20, RULE_openingTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 80;
			Match(LeftAngularBracket);
			State = 81;
			Match(TAG_NAME);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG_NAME) {
				{
				{
				State = 82;
				attribute();
				}
				}
				State = 87;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 88;
			Match(RightAngularBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClosingTagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftAngularBracket() { return GetToken(QuokkaHtml.LeftAngularBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash() { return GetToken(QuokkaHtml.Slash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_NAME() { return GetToken(QuokkaHtml.TAG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightAngularBracket() { return GetToken(QuokkaHtml.RightAngularBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ClosingTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_closingTag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClosingTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClosingTagContext closingTag() {
		ClosingTagContext _localctx = new ClosingTagContext(Context, State);
		EnterRule(_localctx, 22, RULE_closingTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			Match(LeftAngularBracket);
			State = 91;
			Match(Slash);
			State = 92;
			Match(TAG_NAME);
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG_NAME) {
				{
				{
				State = 93;
				attribute();
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 99;
			Match(RightAngularBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelfClosingTagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LeftAngularBracket() { return GetToken(QuokkaHtml.LeftAngularBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TAG_NAME() { return GetToken(QuokkaHtml.TAG_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Slash() { return GetToken(QuokkaHtml.Slash, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RightAngularBracket() { return GetToken(QuokkaHtml.RightAngularBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public SelfClosingTagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selfClosingTag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IQuokkaHtmlVisitor<TResult> typedVisitor = visitor as IQuokkaHtmlVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelfClosingTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelfClosingTagContext selfClosingTag() {
		SelfClosingTagContext _localctx = new SelfClosingTagContext(Context, State);
		EnterRule(_localctx, 24, RULE_selfClosingTag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(LeftAngularBracket);
			State = 102;
			Match(TAG_NAME);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TAG_NAME) {
				{
				{
				State = 103;
				attribute();
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 109;
			Match(Slash);
			State = 110;
			Match(RightAngularBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,25,113,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,0,1,0,1,0,
		4,0,32,8,0,11,0,12,0,33,1,1,1,1,1,2,4,2,39,8,2,11,2,12,2,40,1,3,1,3,1,
		3,3,3,46,8,3,1,4,1,4,1,4,3,4,51,8,4,1,5,1,5,3,5,55,8,5,1,6,1,6,1,6,5,6,
		60,8,6,10,6,12,6,63,9,6,1,6,1,6,1,7,1,7,1,7,5,7,70,8,7,10,7,12,7,73,9,
		7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,5,10,84,8,10,10,10,12,10,87,9,
		10,1,10,1,10,1,11,1,11,1,11,1,11,5,11,95,8,11,10,11,12,11,98,9,11,1,11,
		1,11,1,12,1,12,1,12,5,12,105,8,12,10,12,12,12,108,9,12,1,12,1,12,1,12,
		1,12,0,0,13,0,2,4,6,8,10,12,14,16,18,20,22,24,0,4,1,0,1,3,1,0,5,6,3,0,
		19,19,21,21,24,24,3,0,16,16,22,22,25,25,116,0,31,1,0,0,0,2,35,1,0,0,0,
		4,38,1,0,0,0,6,42,1,0,0,0,8,50,1,0,0,0,10,54,1,0,0,0,12,56,1,0,0,0,14,
		66,1,0,0,0,16,76,1,0,0,0,18,78,1,0,0,0,20,80,1,0,0,0,22,90,1,0,0,0,24,
		101,1,0,0,0,26,32,3,20,10,0,27,32,3,22,11,0,28,32,3,24,12,0,29,32,3,4,
		2,0,30,32,3,2,1,0,31,26,1,0,0,0,31,27,1,0,0,0,31,28,1,0,0,0,31,29,1,0,
		0,0,31,30,1,0,0,0,32,33,1,0,0,0,33,31,1,0,0,0,33,34,1,0,0,0,34,1,1,0,0,
		0,35,36,7,0,0,0,36,3,1,0,0,0,37,39,7,1,0,0,38,37,1,0,0,0,39,40,1,0,0,0,
		40,38,1,0,0,0,40,41,1,0,0,0,41,5,1,0,0,0,42,45,5,10,0,0,43,44,5,9,0,0,
		44,46,3,8,4,0,45,43,1,0,0,0,45,46,1,0,0,0,46,7,1,0,0,0,47,51,3,14,7,0,
		48,51,3,12,6,0,49,51,3,10,5,0,50,47,1,0,0,0,50,48,1,0,0,0,50,49,1,0,0,
		0,51,9,1,0,0,0,52,55,3,18,9,0,53,55,3,16,8,0,54,52,1,0,0,0,54,53,1,0,0,
		0,55,11,1,0,0,0,56,61,5,18,0,0,57,60,3,16,8,0,58,60,3,18,9,0,59,57,1,0,
		0,0,59,58,1,0,0,0,60,63,1,0,0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,64,1,0,
		0,0,63,61,1,0,0,0,64,65,5,23,0,0,65,13,1,0,0,0,66,71,5,17,0,0,67,70,3,
		16,8,0,68,70,3,18,9,0,69,67,1,0,0,0,69,68,1,0,0,0,70,73,1,0,0,0,71,69,
		1,0,0,0,71,72,1,0,0,0,72,74,1,0,0,0,73,71,1,0,0,0,74,75,5,20,0,0,75,15,
		1,0,0,0,76,77,7,2,0,0,77,17,1,0,0,0,78,79,7,3,0,0,79,19,1,0,0,0,80,81,
		5,4,0,0,81,85,5,10,0,0,82,84,3,6,3,0,83,82,1,0,0,0,84,87,1,0,0,0,85,83,
		1,0,0,0,85,86,1,0,0,0,86,88,1,0,0,0,87,85,1,0,0,0,88,89,5,7,0,0,89,21,
		1,0,0,0,90,91,5,4,0,0,91,92,5,8,0,0,92,96,5,10,0,0,93,95,3,6,3,0,94,93,
		1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,99,1,0,0,0,98,96,
		1,0,0,0,99,100,5,7,0,0,100,23,1,0,0,0,101,102,5,4,0,0,102,106,5,10,0,0,
		103,105,3,6,3,0,104,103,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,
		1,0,0,0,107,109,1,0,0,0,108,106,1,0,0,0,109,110,5,8,0,0,110,111,5,7,0,
		0,111,25,1,0,0,0,13,31,33,40,45,50,54,59,61,69,71,85,96,106
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Mindbox.Quokka.Generated
